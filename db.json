{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/image/image.png","path":"image/image.png","modified":1,"renderable":0},{"_id":"source/image/img02.png","path":"image/img02.png","modified":1,"renderable":0},{"_id":"source/image/img01.jpg","path":"image/img01.jpg","modified":1,"renderable":0},{"_id":"source/image/img03.png","path":"image/img03.png","modified":1,"renderable":0},{"_id":"source/image/jspic01.png","path":"image/jspic01.png","modified":1,"renderable":0},{"_id":"source/image/jspic02.png","path":"image/jspic02.png","modified":1,"renderable":0},{"_id":"source/image/jspic03.png","path":"image/jspic03.png","modified":1,"renderable":0},{"_id":"source/image/jspic04.png","path":"image/jspic04.png","modified":1,"renderable":0},{"_id":"source/image/jspic05.png","path":"image/jspic05.png","modified":1,"renderable":0},{"_id":"source/image/jspic06.png","path":"image/jspic06.png","modified":1,"renderable":0},{"_id":"source/image/jspic07.png","path":"image/jspic07.png","modified":1,"renderable":0},{"_id":"source/image/jspic08.png","path":"image/jspic08.png","modified":1,"renderable":0},{"_id":"source/image/jspic09.png","path":"image/jspic09.png","modified":1,"renderable":0},{"_id":"source/image/node01.png","path":"image/node01.png","modified":1,"renderable":0},{"_id":"source/image/node02.jpg","path":"image/node02.jpg","modified":1,"renderable":0},{"_id":"source/image/node05.png","path":"image/node05.png","modified":1,"renderable":0},{"_id":"source/image/node03.jpg","path":"image/node03.jpg","modified":1,"renderable":0},{"_id":"source/image/node04.png","path":"image/node04.png","modified":1,"renderable":0},{"_id":"source/image/npmpic01.png","path":"image/npmpic01.png","modified":1,"renderable":0},{"_id":"source/image/npmpic02.png","path":"image/npmpic02.png","modified":1,"renderable":0},{"_id":"source/image/npmpic03.png","path":"image/npmpic03.png","modified":1,"renderable":0},{"_id":"source/image/pic02.png","path":"image/pic02.png","modified":1,"renderable":0},{"_id":"source/image/pic01.png","path":"image/pic01.png","modified":1,"renderable":0},{"_id":"source/image/pic03.png","path":"image/pic03.png","modified":1,"renderable":0},{"_id":"source/image/pic04.png","path":"image/pic04.png","modified":1,"renderable":0},{"_id":"source/image/pic05.png","path":"image/pic05.png","modified":1,"renderable":0},{"_id":"source/image/pic06.png","path":"image/pic06.png","modified":1,"renderable":0},{"_id":"source/image/pic07.png","path":"image/pic07.png","modified":1,"renderable":0},{"_id":"source/image/pic09.png","path":"image/pic09.png","modified":1,"renderable":0},{"_id":"source/image/pic10.png","path":"image/pic10.png","modified":1,"renderable":0},{"_id":"source/image/pic08.png","path":"image/pic08.png","modified":1,"renderable":0},{"_id":"source/image/pic11.png","path":"image/pic11.png","modified":1,"renderable":0},{"_id":"source/image/pic12.png","path":"image/pic12.png","modified":1,"renderable":0},{"_id":"source/image/pic13.png","path":"image/pic13.png","modified":1,"renderable":0},{"_id":"source/image/vue2-01.png","path":"image/vue2-01.png","modified":1,"renderable":0},{"_id":"source/image/vue2-02.png","path":"image/vue2-02.png","modified":1,"renderable":0},{"_id":"source/image/pythonpic01.png","path":"image/pythonpic01.png","modified":1,"renderable":0},{"_id":"source/image/vue2-03.png","path":"image/vue2-03.png","modified":1,"renderable":0},{"_id":"source/image/vue2-04.png","path":"image/vue2-04.png","modified":1,"renderable":0},{"_id":"source/image/vue2-05.png","path":"image/vue2-05.png","modified":1,"renderable":0},{"_id":"source/image/vue2-07.png","path":"image/vue2-07.png","modified":1,"renderable":0},{"_id":"source/image/vue2-06.png","path":"image/vue2-06.png","modified":1,"renderable":0},{"_id":"source/image/vue2-08.png","path":"image/vue2-08.png","modified":1,"renderable":0},{"_id":"source/image/vue2-09.png","path":"image/vue2-09.png","modified":1,"renderable":0},{"_id":"source/image/vue2-10.png","path":"image/vue2-10.png","modified":1,"renderable":0},{"_id":"source/image/vue2-11.png","path":"image/vue2-11.png","modified":1,"renderable":0},{"_id":"source/image/vue2-12.png","path":"image/vue2-12.png","modified":1,"renderable":0},{"_id":"source/image/vue2-13.png","path":"image/vue2-13.png","modified":1,"renderable":0},{"_id":"source/image/vue2-14.png","path":"image/vue2-14.png","modified":1,"renderable":0},{"_id":"source/image/vue2-15.png","path":"image/vue2-15.png","modified":1,"renderable":0},{"_id":"source/image/vue2-17.png","path":"image/vue2-17.png","modified":1,"renderable":0},{"_id":"source/image/vue2-16.png","path":"image/vue2-16.png","modified":1,"renderable":0},{"_id":"source/image/vue2-18.png","path":"image/vue2-18.png","modified":1,"renderable":0},{"_id":"source/image/vue2-20.png","path":"image/vue2-20.png","modified":1,"renderable":0},{"_id":"source/image/vue2-19.png","path":"image/vue2-19.png","modified":1,"renderable":0},{"_id":"source/image/vue2-21.png","path":"image/vue2-21.png","modified":1,"renderable":0},{"_id":"source/image/vue2-22.png","path":"image/vue2-22.png","modified":1,"renderable":0},{"_id":"source/image/vue2-23.png","path":"image/vue2-23.png","modified":1,"renderable":0},{"_id":"source/image/vue2-25.png","path":"image/vue2-25.png","modified":1,"renderable":0},{"_id":"source/image/vue2-24.png","path":"image/vue2-24.png","modified":1,"renderable":0},{"_id":"source/image/vue2-26.png","path":"image/vue2-26.png","modified":1,"renderable":0},{"_id":"source/image/vue2-27.png","path":"image/vue2-27.png","modified":1,"renderable":0},{"_id":"source/image/vue2-28.png","path":"image/vue2-28.png","modified":1,"renderable":0},{"_id":"source/image/vue2-29.png","path":"image/vue2-29.png","modified":1,"renderable":0},{"_id":"source/image/vue2-31.png","path":"image/vue2-31.png","modified":1,"renderable":0},{"_id":"source/image/vue2-30.png","path":"image/vue2-30.png","modified":1,"renderable":0},{"_id":"source/image/vue2-32.png","path":"image/vue2-32.png","modified":1,"renderable":0},{"_id":"source/image/vue2-33.png","path":"image/vue2-33.png","modified":1,"renderable":0},{"_id":"source/image/无风险01.jpg","path":"image/无风险01.jpg","modified":1,"renderable":0},{"_id":"source/image/无风险02.jpg","path":"image/无风险02.jpg","modified":1,"renderable":0},{"_id":"source/image/无风险03.jpg","path":"image/无风险03.jpg","modified":1,"renderable":0},{"_id":"source/image/无风险04.jpg","path":"image/无风险04.jpg","modified":1,"renderable":0},{"_id":"source/image/无风险05.png","path":"image/无风险05.png","modified":1,"renderable":0},{"_id":"source/image/无风险06.jpg","path":"image/无风险06.jpg","modified":1,"renderable":0},{"_id":"source/image/无风险07.jpg","path":"image/无风险07.jpg","modified":1,"renderable":0},{"_id":"source/image/背景.jpg","path":"image/背景.jpg","modified":1,"renderable":0},{"_id":"source/image/背景3.jpeg","path":"image/背景3.jpeg","modified":1,"renderable":0},{"_id":"source/image/背景2.jpg","path":"image/背景2.jpg","modified":1,"renderable":0},{"_id":"source/image/背景4.jpg","path":"image/背景4.jpg","modified":1,"renderable":0},{"_id":"source/image/背景5.jpg","path":"image/背景5.jpg","modified":1,"renderable":0},{"_id":"source/image/背景7.jpg","path":"image/背景7.jpg","modified":1,"renderable":0},{"_id":"source/image/背景6.jpg","path":"image/背景6.jpg","modified":1,"renderable":0},{"_id":"source/image/背景8.jpg","path":"image/背景8.jpg","modified":1,"renderable":0},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/头像.jpeg","path":"img/头像.jpeg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/头像2.jpg","path":"img/头像2.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/背景.jpg","path":"img/背景.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/背景2.jpg","path":"img/背景2.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/背景3.jpeg","path":"img/背景3.jpeg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/2年后看2年前自己写的代码，蚌埠住了.md","hash":"e1225b20f50674b3753735b9ffaf7754bace5119","modified":1721044020894},{"_id":"source/_posts/ModuleNotFoundError-No-module-named-sklearn-cross-validation-的解决方案.md","hash":"9498e35864fa560b46aef3e8cf827c5432692b90","modified":1664887865937},{"_id":"source/_posts/ajax学习笔记.md","hash":"3ed28129ad0a3021e639d6e49d47ee32dcc17026","modified":1664887810616},{"_id":"source/_posts/hello-world.md","hash":"27c17b3c2b28562ac8b929f3d49dd2a1be442086","modified":1721056149503},{"_id":"source/_posts/error-Newline-required-at-end-of-file-but-not-found-eol-last的解决方案.md","hash":"a1c531d8efb5b1ae938172c732449e997cafcd15","modified":1664887827250},{"_id":"source/_posts/npm-ERR-code-ERESOLVE的解决方案.md","hash":"dd248da55f566da7f4ed77e75e187ba79284485b","modified":1664887878035},{"_id":"source/_posts/git学习笔记.md","hash":"9f7b8b94b3e7916d548be6080951531d7d2b7bdf","modified":1664887840940},{"_id":"source/_posts/js学习笔记.md","hash":"854f93c103d9e4101832b685ea20be928d7a8c20","modified":1664887855247},{"_id":"source/_posts/失踪人口回归.md","hash":"3b00449ca865ba0dfefb87fddc86e3b63a395a36","modified":1700485422114},{"_id":"source/_posts/vue2学习笔记.md","hash":"7bb2a6cc9155ee8a3e544ebf9907bf2cd553693f","modified":1664887908478},{"_id":"source/_posts/数据库报错设备未就绪怎么办.md","hash":"a30c1169bc9a05eeefa0bbb7bde9fabddb796d88","modified":1664887772515},{"_id":"source/_posts/request-entity-too-large.md","hash":"55d6c4ec68133f52e3fa11f485a0d22d85f3d43c","modified":1664887891473},{"_id":"source/categories/index.md","hash":"11a00ba16a89fbd19a587ebe4f22ab40a68cf651","modified":1661844185149},{"_id":"source/_posts/浅谈第一次用node写接口遇到的坑.md","hash":"ce2d10c45f72fd00afe68bc8ed164b52b681a7c0","modified":1664887749673},{"_id":"source/_posts/正则表达式学习笔记.md","hash":"ce0fdff5bf36afcc0c17f23c06297f10e04ba1e6","modified":1664887786065},{"_id":"source/image/image.png","hash":"d29969fc958165d6081df8f88d5d1e6d6c4d4836","modified":1721035517056},{"_id":"source/about/index.md","hash":"9b5d5d8c5b3aa705989e9131148fe0e2e963424f","modified":1661844549829},{"_id":"source/_posts/经验篇.md","hash":"b44bb4f30089d7205e87e16275d62ca668f56c99","modified":1721056214836},{"_id":"source/image/img01.jpg","hash":"dcf5aa731b27cbaca093a2354a70ab8088f0a306","modified":1656767600206},{"_id":"source/image/jspic03.png","hash":"63209dc32d725b59d5425f62cb2bb1fc1513cc78","modified":1654951185118},{"_id":"source/image/jspic09.png","hash":"b0ff6be95bd020ee73f05d25bb0489a1617ad563","modified":1656758729301},{"_id":"source/image/node01.png","hash":"9779aa7b8c0ab7e25104315eb719e6c30808b99f","modified":1662445826740},{"_id":"source/image/node04.png","hash":"b2d0ee31813cd448966ac9f0ed9b9e911a6a34ee","modified":1662446086948},{"_id":"source/image/node02.jpg","hash":"80ae4a37d88e5c394e81309cc1b846a305dfb71d","modified":1662445826792},{"_id":"source/image/node05.png","hash":"d76f913f36dd166e8e0c14bef30b76a0964002dc","modified":1662446874677},{"_id":"source/image/npmpic03.png","hash":"5c0d465243cf5a374f801ec5f7d26717a6835e0d","modified":1662195806148},{"_id":"source/image/node03.jpg","hash":"efb8475d57281811b4fa598987eaa1a86382b0c1","modified":1662445826836},{"_id":"source/image/npmpic02.png","hash":"f2767417d572a5284138f40be7f50c69df7dc206","modified":1662195524864},{"_id":"source/image/pic10.png","hash":"73874f1872d067f53e063fa39338b69b0fccc52f","modified":1657470034985},{"_id":"source/image/vue2-01.png","hash":"a77734ea9d6c9c346e052d9e1999e835a9ff914c","modified":1657700267689},{"_id":"source/image/pythonpic01.png","hash":"5ac4a23a5599c8b72885dc3cf1312f85e2351fdb","modified":1662097284696},{"_id":"source/image/vue2-02.png","hash":"777a62b2ef139938832e0620926102b6fd81bb29","modified":1657701604562},{"_id":"source/image/vue2-08.png","hash":"b87e0ec498497d8e7e9fb84ded08960ea5806035","modified":1657875285971},{"_id":"source/image/vue2-09.png","hash":"2f336d84420613e270e7183224001a168de7c344","modified":1657876425442},{"_id":"source/image/vue2-11.png","hash":"27872e102784c1d9b10fd4be31d8459282a6c3c4","modified":1657878799930},{"_id":"source/image/vue2-10.png","hash":"b9929c74ce1c5811443be943aaecc5f1d6416f8d","modified":1657877392182},{"_id":"source/image/vue2-15.png","hash":"97b6e63ca2be489496e47513c5644f54804f1c8d","modified":1660809330849},{"_id":"source/image/vue2-12.png","hash":"309c820432f57c03a89c17202fe48e6d2fc3d522","modified":1657879195435},{"_id":"source/image/vue2-17.png","hash":"da9335976d8beae7534b1643b3f7dc350ce05a3b","modified":1658150787553},{"_id":"source/image/vue2-13.png","hash":"4803f4459ee041087a75408d551cd8040cbbdfd2","modified":1657887637017},{"_id":"source/image/vue2-21.png","hash":"32ec20dc6d033b67a64a5eb8514d429f948b6546","modified":1658070341088},{"_id":"source/image/vue2-20.png","hash":"c77ddfe808c7a23e700c07cc5e86021a734d9803","modified":1658070305159},{"_id":"source/image/vue2-18.png","hash":"07fd747a02ee44468881ff18427018671e36518a","modified":1658305893314},{"_id":"source/image/vue2-22.png","hash":"ee62ef8914774c19d00681bcb88c165ec2016288","modified":1658070919741},{"_id":"source/image/vue2-19.png","hash":"57e7c6b996ce381a504914f36276b9e3e633fdd0","modified":1658306904792},{"_id":"source/image/vue2-25.png","hash":"72c4e2dadf53b23a929009e1443a69f0a973cc95","modified":1658325640631},{"_id":"source/image/vue2-23.png","hash":"f06951b565df2b03bf6416a650ccbb594a7e7ba6","modified":1658310644551},{"_id":"source/image/vue2-24.png","hash":"249c8e08639f70ba39601446e9dcf0b1b045fd98","modified":1658325658018},{"_id":"source/image/vue2-26.png","hash":"08d9a135456fa000c90c283304ebdefc4ee4f447","modified":1658328337229},{"_id":"source/image/vue2-29.png","hash":"68399981b005ef4292bddcf7d25ab594668fcf8d","modified":1658330714795},{"_id":"source/image/vue2-28.png","hash":"d69f9ca8726c2bb245ed76382e9219504482f18b","modified":1658329088522},{"_id":"source/image/vue2-31.png","hash":"611432f9acf123a617bab9b1f6672ea142bbcd6c","modified":1658332315984},{"_id":"source/image/vue2-30.png","hash":"52d8bb88dbc112ed6a0ccdd2d0e801b9692596a7","modified":1658332075892},{"_id":"source/image/vue2-32.png","hash":"2ba75e78c93bca4e4bc4c406d21e845dee5863d1","modified":1658376067468},{"_id":"source/image/vue2-33.png","hash":"034649f351f2f046139f148703cc7f65dbc2d7da","modified":1658394755953},{"_id":"source/tags/index.md","hash":"f8814972c8ae133b409a693a50d35615f3d2dac3","modified":1661844198191},{"_id":"source/image/背景4.jpg","hash":"c4faa7938d7f11f462c92edf9ffcf8651c4b369f","modified":1661857365307},{"_id":"source/image/背景3.jpeg","hash":"376faf134f82c838d530b2f16e388c228119f300","modified":1661504664936},{"_id":"source/link/index.md","hash":"72012f5f368f9a217b41fc6937f63bc632cfbfa8","modified":1661844193938},{"_id":"source/image/背景5.jpg","hash":"7e80e841a11f38e268a3860c4eb814e9d0e6ba66","modified":1661857404543},{"_id":"source/image/背景8.jpg","hash":"fd0178e270a41bab73ee7594124fecc401fd8841","modified":1661858063409},{"_id":"source/image/img02.png","hash":"0a79a840adc70efce7dc26b3ded9233c82c8ffa8","modified":1656770167913},{"_id":"source/image/jspic01.png","hash":"d2909852ee5542bb7a36187df26d56e9dd4228b9","modified":1661856729612},{"_id":"source/image/jspic02.png","hash":"83aa19b1f6ba71777f112a23e2b3b5957c34110d","modified":1661856780699},{"_id":"source/image/jspic07.png","hash":"c48a574fd1fed22db450c010a138f8ede6b02ad0","modified":1656745803464},{"_id":"source/image/jspic06.png","hash":"080224101a4b90e474c2233f1e485b201510bc40","modified":1661856924987},{"_id":"source/image/jspic08.png","hash":"bda94a33e26940db96fd9ff89a326c2a9f17fc8a","modified":1656752176906},{"_id":"source/image/npmpic01.png","hash":"fe314c11c95ecda475cd518db49707003763e80e","modified":1662195270186},{"_id":"source/image/pic08.png","hash":"4a14d064d94a21f830ca3bcc0d24990ba61e60fa","modified":1657469488438},{"_id":"source/image/pic11.png","hash":"fd2687e7ddc32b7855c6ed753fd6d0df2024996a","modified":1657470176762},{"_id":"source/image/vue2-03.png","hash":"cc095d3bca716e439901496eb6222797b213639b","modified":1657701847691},{"_id":"source/image/vue2-04.png","hash":"f7bbbca8711fd0d469c096b1f52aae5171c93650","modified":1657701960985},{"_id":"source/image/vue2-06.png","hash":"ea93873841763614d4c4733e13e6110e93d1efdf","modified":1657722776406},{"_id":"source/image/vue2-27.png","hash":"4a456f4aaa77c1b8dfbd0b7fc8db512e735a8b93","modified":1658329022720},{"_id":"source/image/背景6.jpg","hash":"bb7ac7025fd380ab0d31c35cce66f8229392e9f8","modified":1661857430712},{"_id":"source/image/背景7.jpg","hash":"c37bb1fbd39dd08829f7b2a4c8083ba13ed04d47","modified":1661858027245},{"_id":"source/image/jspic04.png","hash":"84e98b4bcac32b0b9b6d34675d64880963f8eb7d","modified":1661856867392},{"_id":"source/image/pic02.png","hash":"dd46c20fcdd5e1155e699bd2340e13c4aba58a40","modified":1657007115404},{"_id":"source/image/pic01.png","hash":"03be303a3a33a0ce53bdea7309246fe1899e989a","modified":1657004996094},{"_id":"source/image/pic04.png","hash":"d8b787725432efd12997e59d058a65f45ccc44a4","modified":1657033884358},{"_id":"source/image/pic05.png","hash":"1940850b196b027e9a954b49fafa977a919ad624","modified":1657034384864},{"_id":"source/image/pic12.png","hash":"ec88d772e803e79c23ab5bb4d52d97a203d61c73","modified":1657470852321},{"_id":"source/image/pic13.png","hash":"a68fc8bd6271def0ef33d0bf51465eac1be55363","modified":1657820499348},{"_id":"source/image/vue2-07.png","hash":"e50b90fb6e4cfbda46a0cc6f751effc5d6c9b71c","modified":1657724425631},{"_id":"source/image/vue2-14.png","hash":"5f7845ed3ffa1e7f5620d11dd3d420707d85e76e","modified":1657890342524},{"_id":"source/image/无风险05.png","hash":"b1606605285ced59cc69ced88cf37c8fb3f63d09","modified":1664887510760},{"_id":"source/image/无风险06.jpg","hash":"4cc5456eae0827843b40e9af9f93ed47ddc48165","modified":1664887501508},{"_id":"source/image/无风险03.jpg","hash":"0de752699eb346abdbddff953543ebfff3ae5b8f","modified":1664887524178},{"_id":"source/image/背景.jpg","hash":"ec0b613bd79e715b0816b2c9e1eb0e4f93d43123","modified":1661493644771},{"_id":"source/image/img03.png","hash":"1e816852a75e468233af37dfac7bfe6b65e2ad98","modified":1656773608608},{"_id":"source/image/jspic05.png","hash":"b21dd16448ba16b137979cbfe277205739770fbb","modified":1661856902512},{"_id":"source/image/pic09.png","hash":"16552a8487814895437826f7b9c785f521c7db71","modified":1657469692609},{"_id":"source/image/vue2-05.png","hash":"675bd0b76fa8449b2345acd95edcaaf16d08fe75","modified":1657717109720},{"_id":"source/image/无风险01.jpg","hash":"6f3597da6b60e2ead6cb9b8c4a698e7cf3e8f2a8","modified":1664887404051},{"_id":"source/image/无风险02.jpg","hash":"bc8400fb6d0d2214f6cfdd78e6e7cf53881c2c54","modified":1664887445158},{"_id":"source/image/pic03.png","hash":"2eb371b10a61ef825e5d811a2f85a55d01ad6120","modified":1657033220332},{"_id":"source/image/pic06.png","hash":"54f9794e26e0db8032b002ebbfc13cfede464f8d","modified":1657379676655},{"_id":"source/image/vue2-16.png","hash":"88a9500c0cef144c9c51a35bc9538778321f6619","modified":1658052877068},{"_id":"source/image/无风险04.jpg","hash":"3b7a0d3f571ae95780df7984a6172b7480e804d0","modified":1664887473277},{"_id":"source/image/pic07.png","hash":"fec057a792ab045ed136be5da9bff041adca49eb","modified":1657380371663},{"_id":"source/image/无风险07.jpg","hash":"3a24a3a5ed526bee709799940035a4e9edf5d891","modified":1664887451217},{"_id":"themes/butterfly/package.json","hash":"fcf19a2e42a7684dc4cab3e9b28b5f893296dc3b","modified":1661487094624},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1661487094571},{"_id":"themes/butterfly/plugins.yml","hash":"57ed4bc4e74dd8fcbdb330a35a0bd1a0fafebab1","modified":1661487094624},{"_id":"themes/butterfly/_config.yml","hash":"43b7c430fdf807dc6b1d2ef8729a11b8446210ea","modified":1663689775153},{"_id":"themes/butterfly/README_CN.md","hash":"c03bd24e375f0f9bbc4238d0ee9bae7f4db2f032","modified":1661487094572},{"_id":"themes/butterfly/README.md","hash":"851d8e3e0ba8d9da305eb2f2ec63221296c04080","modified":1661487094572},{"_id":"themes/butterfly/languages/default.yml","hash":"335731ef259a3cec2499a2d5b050025ff4bdc608","modified":1661487094573},{"_id":"themes/butterfly/layout/archive.pug","hash":"115fa5ee8864e5c97549eff91a17c66101d724ab","modified":1661487094575},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"4adf079fb0170e3a8de6ddbb0392d6d1120030c4","modified":1661487094574},{"_id":"themes/butterfly/layout/category.pug","hash":"bf979aec88d78b644fc5d31518f8679ad7625792","modified":1661487094575},{"_id":"themes/butterfly/layout/page.pug","hash":"bf2d6c6d2d156777b55292e51be02b0b3acf0af8","modified":1661487094623},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"dcb10d62249bb149af8ad78db3ee6e342c6d6be7","modified":1661487094574},{"_id":"themes/butterfly/languages/en.yml","hash":"a96ab1bbe74e99ca2e4d67da9d83f442eb9b73af","modified":1661487094573},{"_id":"themes/butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1661487094623},{"_id":"themes/butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1661487094624},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1661487094577},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"aace9ddff469de4226e47a52ede1c81e66d66d5c","modified":1661487094576},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"ddea99847fd41323f183cd0c9dae3174c586f5b3","modified":1661487094577},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"4f41fc46410e1e3018ff87e1d1a5c28be7258119","modified":1661487094592},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"3d95525a6d809be2f2a1cd6b33d3b7ecc0457d62","modified":1661487094583},{"_id":"themes/butterfly/layout/post.pug","hash":"fdbb508b5e6dec30fb8753c5a7fdd494410c4fc0","modified":1661487094623},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"1d0f1b84be352862046e780800d696e80ef1cdd1","modified":1661487094577},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"d9ff4bad9c9664e12729c7a531169a05698a3fd1","modified":1661487094570},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"bb1847f45e713cc88b1c0a97035ec01f0209c995","modified":1661487094589},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1661487094570},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"6c3b7d0874fa499800a4fd49894c481b05ec750c","modified":1661487094629},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1661487094570},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1661487094630},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"376e1884ea764404c38b1e73b16de0358ece519e","modified":1661487094631},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"205562ec188bfba5686c51af77486550d0927df5","modified":1661487094592},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"c445140fa16f19bf5fb617fa735504e7799d4d42","modified":1661487094631},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"5fd6c9659262dc8f61d87866d0417fd534292c88","modified":1661487094629},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1661487094571},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"e1043b8f149371d5a4ab0f1306eabc2988bed071","modified":1661487094569},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"db4f5971c27f49a4cb47d34729f4ddf9919d392b","modified":1661487094631},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"83bfb16ab8d440be04e1b1f889f6affa7ad65a67","modified":1661487094633},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"c07efb04120914363b8de2c276ac5783b82db776","modified":1661487094632},{"_id":"themes/butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1661487094625},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"8e6f0677c190d44c64222054e2e7c065fc6c4802","modified":1661487094626},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"176332aa4d01728d0bd084e9b02c60167dc307dd","modified":1661487094626},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"218add7e9b39b6fb6e69921abb9e44891a6cc3ce","modified":1661487094627},{"_id":"themes/butterfly/scripts/events/init.js","hash":"b3e05e3440b078f57391c113d6b0c8ecff112720","modified":1661487094627},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"b92cc4648cfe5fb28c58943727823d1178b73a4a","modified":1661487094628},{"_id":"themes/butterfly/source/css/index.styl","hash":"c7924868adcb046b46498626a9223c7a7b3f2e30","modified":1661487094657},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"44cca49ddc76921bb455465ef912cab46c993cef","modified":1661487094634},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"6d4cd2393945a9316339351cab588265f5c18d73","modified":1661487094634},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"551f1b8edc973bd8afc5cce2eae546f002fa84c3","modified":1661487094635},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"3ba7677969ff01fab06fc6713455ddc6861f0024","modified":1661487094634},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"7641adb0d520c5ff29dd36fc1fb8617c52ecc9fb","modified":1661487094635},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"e01a3967e5884881bab858b11635457df412de80","modified":1661487094635},{"_id":"themes/butterfly/source/css/var.styl","hash":"584ef7b18d5e677eb2e62f9b139097d3b714a993","modified":1661487094658},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"56a5d41487d74654b75305c5325167a116495900","modified":1661487094636},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"fd683ccc090db3122d77c7ee73e8d35dc8735ee3","modified":1661487094636},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"4c7056d3cd56f10bd209d2ba4d3cc2027aad1440","modified":1661487094637},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1661487094661},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"08ea00791bd4738952234cb5d8360e119df6f875","modified":1661487094637},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1661487094659},{"_id":"themes/butterfly/source/img/头像.jpeg","hash":"b76ed063acc767e2b7d7b49567f8ebad301f602f","modified":1658854307869},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1661487094661},{"_id":"themes/butterfly/source/img/背景3.jpeg","hash":"376faf134f82c838d530b2f16e388c228119f300","modified":1661504664936},{"_id":"themes/butterfly/source/js/main.js","hash":"0b673b89d24b78b8544cc0e048953e6dcba3e9bf","modified":1661487094662},{"_id":"themes/butterfly/source/js/utils.js","hash":"fdb9e5b38f076953a2431b8f682388b030694b55","modified":1661487094664},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"6f489b24f06578440f18b629db56c810f00f8c3f","modified":1661487094581},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"07380718ed3af19a7e64b30e8c13726fe5983947","modified":1661487094578},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"631ec7000fd4d6cfa2de118ee02ad8a42ffb34f5","modified":1661487094582},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"ca8bcd90ad9467819330bfe7c02b76322754bccf","modified":1661487094581},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"a9e56b1c41bf327859b0a7bcb8e72b458bd851b2","modified":1661487094582},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"4db1170be7a9360e2c5399d281b979da730df2a3","modified":1661487094664},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"50b4b9c7f6a4771910be4198639cfcfc6d7b8925","modified":1661487094582},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1661487094579},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1661487094579},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"2e1ab0c2ca59a1ff5a5ba9b6ef60f3e34af5430c","modified":1661487094584},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"bd5dd5452e28a4fe94c3241a758ec6f4fdb7a149","modified":1661487094579},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1661487094580},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1661487094580},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"dd8e6813976be64e80eba6562b54e74527ab306d","modified":1661487094585},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"fc3e67e5ae4774d9e89964ba96beed28f34ee8f0","modified":1661487094580},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"e9459f122af7b733398578f9f0f8ab3c5e12a217","modified":1661487094588},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1661487094587},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"c1e45d4d0bd905ddcd2282de4fe89be92e67847d","modified":1661487094578},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"8b8e04d3d9462b3790ba17e5a865dab5a4740a73","modified":1661487094586},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"e939344fd389aeb11864ee697d5fd9b036d8325f","modified":1661487094593},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"8a3f9e674b44e6a92d4df22baca65d9d30007dc3","modified":1661487094579},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"594626a18b7efbf771232855dfbce143fb244bc6","modified":1661487094591},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"8f43fdeaf8cff4a35bab74b48c963786ca015620","modified":1661487094589},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"971038debf539333b1687b4a1d87cf4fc965a846","modified":1661487094586},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"e2eba0fcb8332cb333b2aff9c76664e40e2e1974","modified":1661487094588},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"f0898509da70388b5c532f19e762756d74080200","modified":1661487094612},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"cc1f7ae8a7ce5445277215821092e712ec8cc296","modified":1661487094590},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"4e37535c63149708ecbedb262336014524ad8723","modified":1661487094606},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"08979afbfecb4476a5ae8e360947b92624d285b8","modified":1661487094613},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1661487094619},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1661487094618},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"4e026840c915327e45331e63e4b7ef287e871204","modified":1661487094613},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1661487094619},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1661487094620},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1661487094620},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"d561d36229692e2c8a9ee45a7c24c0c2b3599170","modified":1661487094618},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"c02b1779bd0ebca6749f195be096b6ca574bfa29","modified":1661487094620},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"59d979702fa21d960443824198614d63aaf69662","modified":1661487094621},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"9755cac8424dc578e9ec07dbcaa429fddbedd392","modified":1661487094621},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1661487094622},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"471b20e71a19db1f5115727082e5188200c49383","modified":1661487094621},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"08641633d38903351a7424baf9893d9038ba057d","modified":1661487094619},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"12185713f9ca08984fc74e3b69d8cd6828d23da8","modified":1661487094622},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"5e0e9e9b2cd3c256d52423e2278e790aa387a53a","modified":1661487094622},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"f562648de515abc873609bfe9b9f799c8cf42b72","modified":1661487094638},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"af6e3357b8f6df18d0775b8352551c0f8ce38e55","modified":1661487094643},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"b9d7d23dc8810542b8c8ffcbfbd3694318debcc6","modified":1661487094639},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"a2aa5caf338ff5323b6ff0601ebcc09e710d8398","modified":1661487094639},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"792a04d36de32f230ca3256ad87a90fe8392f333","modified":1661487094643},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"e931ef81754a7b9d999fa23d134c620e68e75491","modified":1661487094644},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"3c178608406c31d768af355ef1d7326da37cc75f","modified":1661487094642},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"0abe05309a186682772a94e5e759b63f8028e61a","modified":1661487094643},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"612d2f8a53141b353078f2a3405d8d44a79d9558","modified":1661487094644},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"844858ae87c7278996ce484c6b456db354c48764","modified":1661487094644},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"bd099f7d3adef4b7edd24c0a25a07415b156e587","modified":1661487094645},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"1c1c585ba99cb4004956b5e98fc044260b456f99","modified":1661487094647},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"9f880a6fa91784a4d3e9ffb0d4607e8a74d4d929","modified":1661487094645},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"6dcf19c0933c8828a439f801b0f4b256447dec07","modified":1661487094646},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"b5ba2c3339ad406ce611d12d3f8cc84f864fbc03","modified":1661487094646},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"7e9b65dcae7ac54e0183bc841fea0f4bd4d78e5c","modified":1661487094647},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"5dabc3a5330cc28f0666d1cd8db0d67f553fd854","modified":1661487094648},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"68bc8cbea25dbb3cdc170f09f9b43ce130547717","modified":1661487094650},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"e02b52bdd337c0ed3c9d3a507d1011403c38881d","modified":1661487094647},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"1fed25162d7204480e9bcf476b3246e1717107ca","modified":1661487094649},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"a7223a8fcc4fa7b81e552c9a2554be7df9de312e","modified":1661487094649},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"d72218cb5a6bfe048ae1c92009bd815a08a53d3a","modified":1661487094650},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"a714776e3d585369f2285b6bb4e1564539c58d8b","modified":1661487094650},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9e35f91847773b915c74a78b8aa66c7bdb950ad0","modified":1661487094651},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"ecc2b2e28c179eb9406fc2c6f00e141078249cdd","modified":1661487094651},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"6d2a841c7656fb28b1e15afe1d7dda56c424b7d7","modified":1661487094651},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"d1398399eb7f1cc004fbcefa18f56188cc8fec8c","modified":1661487094652},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"45792c13c7c439d412b7dc597d74d24f3b598406","modified":1661487094653},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"62da1de0d5b8453fcecbfacddb16985265638ba5","modified":1661487094653},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"cced94e70b4b90130cfa215582be2adbf883efba","modified":1661487094652},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1661487094654},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1661487094655},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"2f83bd145b870d80d4b18b0ac603235229a5694e","modified":1661487094655},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"84c42716e833d2d1dd47195ea996803ffa0e58ec","modified":1661487094654},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"b7cf7753479fcf2fe07287ffdb0e568adbba4c18","modified":1661487094654},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"331c89ecfb79fab68466944a43e9e3d0ff49c646","modified":1661487094655},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1661487094657},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"645087801624a73cbee63269cfd399e9da39c663","modified":1661487094594},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"d0d60008ef4ff74298ff062878766f194a2e4a70","modified":1661487094663},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"07ea7134db7a66c87658116f089fb1a2a6906563","modified":1661487094656},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"f4d21dcbc3b00eed9b1f604e132c4c6811a0a059","modified":1661487094595},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"ec81ea316c82b83d6aee31e52f248d329559d5d3","modified":1661487094656},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1661487094595},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"f72e002d56903a49c36174e77e42f88b8af8bd44","modified":1661487094663},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1661487094596},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"6e5ccc9ea4346c71ad4cbf1e9f1cb83bb45e6f27","modified":1661487094597},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"cd4fc9c5a61608a5dedf645c1295430a1623040f","modified":1661487094596},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"dfbec0a99e38ebeac46931121b3a70b9a1e34b79","modified":1661487094595},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"55f7c144e4ef7a7f317bcdab8044fd8f89bdd5d9","modified":1661487094601},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"38b85d216d9377ddbaa2e5867e2f03805227237c","modified":1661487094596},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"c83f37e9618fbc03ecab25db54f14dbbf9e7ce10","modified":1661487094602},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"3b551ab7618b36795480015b5cf565288df5b957","modified":1661487094601},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"8c16214a610ff8087628f32d005a1b0aab3bb910","modified":1661487094601},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"319463fc8ff993b798f2293b659b522ad7770cf0","modified":1661487094602},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"3df2f59c9552a1f2e6f0d50c4ae97e72c5392b59","modified":1661487094602},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1661487094603},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"589f8503f264d4fda971c8daf2028f45c4f2867b","modified":1661487094604},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"5b44b4e5f2445260811de81edd3eeeb97d8bb583","modified":1661487094603},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"ccb5c3f2a821b87986998595743387d7c997c16e","modified":1661487094604},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"f04263a3bd7efb7f1b250cfee112e82f49805492","modified":1661487094604},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"f3f6eaecbcf9352342e259f4a5a3ad7160f31fc9","modified":1661487094597},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"e45152e4ebc3fb2462916be93f98d18f0574f2d3","modified":1661487094605},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"cba55cbbd0962bf84b8956195e686b0e158ed247","modified":1661487094605},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"d48d59ebf8c0142fb3c4592a0d35874f85e6fd4c","modified":1661487094605},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"b741b5e942481d779a8a1fe94c45154a62a6b748","modified":1661487094598},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"a5ddcf84ce8855c7801289270009e29c3a103150","modified":1661487094599},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"e5af55cdb87d1ffd3d8702bc77097159acf95b54","modified":1661487094598},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1661487094606},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"794ce3911f17d354b7196deb8c36d191afac63fb","modified":1661487094599},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f0d3eddd2bed68e5517274b3530bfe0fa5057d8e","modified":1661487094607},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e657b87b721b6ef9149686630a205f4ebb7f2716","modified":1661487094599},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"cd7ab4a776be93eea96a6f6fd0a547977fbe1ea3","modified":1661487094600},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"297d34d83e7bff8ec3b8bc19bb0f4d901c35fe5a","modified":1661487094607},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"056756e43908519039b8bbd7a90f8c49d561eb52","modified":1661487094607},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"cd1ce86441dc508e4c3dbf8b829046455ba8a6b4","modified":1661487094609},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"77ac27a24b8347668c4df9d5c44c9461c69eaec9","modified":1661487094608},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"b2ede1f6b41026ebd233ac076a405889a6eec76b","modified":1661487094609},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"bc207dcb771fc2c2c329f29d01708ff6b18443da","modified":1661487094610},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"91a72e94743befa21a7b1c557fbb3751efb87ab0","modified":1661487094611},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"af5d3d87b736598dafcf5871863596592cacdfe1","modified":1661487094614},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f8b65460c399973090c1fb7ab81e3708c252e7cc","modified":1661487094610},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"3b5ef84744a1a8fec5a63554079008040d96f924","modified":1661487094615},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"8b4034e53ca5bf85097f681a6e76a53ce685c205","modified":1661487094616},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"ff3727c3ec698ec61a28c55cbc8c8508f0efb0a0","modified":1661487094615},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"63ef0b2a75cf26a94c5bcd885f3a1c144451b852","modified":1661487094612},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4898a09d8e67fb358ffd74b3a1f0014f555dd856","modified":1661487094617},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"1f02a26730e5f36cc2dfec7ff4d5c93a099ed5ba","modified":1661487094616},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"33368c0b80e4c4e78f3c7ee9bec0fed70ad838ca","modified":1661487094611},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"6e77f1ca0cfb0db6b028f5c0238780e66d344f3d","modified":1661487094640},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"b45fc15c3ae7db3a0fbce0d6da74a72a95ca8a2b","modified":1661487094617},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"01ff9e77eb1bd454bec65a6ff5972c8e219bc708","modified":1661487094641},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1661487094641},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"fc702a4614d0562a381907b083f71ba63d301d86","modified":1661487094640},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"0b8aea62d1550113e1fcc237fae1b03743190208","modified":1661487094642},{"_id":"themes/butterfly/source/img/头像2.jpg","hash":"35906679fbeaa010a6a5a53b66093bfded8d990b","modified":1658854380380},{"_id":"themes/butterfly/source/img/背景.jpg","hash":"ec0b613bd79e715b0816b2c9e1eb0e4f93d43123","modified":1661493644771},{"_id":"source/image/背景2.jpg","hash":"3878db1bb72d31df8c1c05382d1ffdcbeb8169c9","modified":1644072585501},{"_id":"themes/butterfly/source/img/背景2.jpg","hash":"3878db1bb72d31df8c1c05382d1ffdcbeb8169c9","modified":1644072585501},{"_id":"public/404.html","hash":"39eb0e81613b1e46006bc9c99beb1f22a9fc1176","modified":1721056807394},{"_id":"public/categories/index.html","hash":"378dd60426f6d8cd858f9cc66a37e404858ae7ea","modified":1721056807394},{"_id":"public/about/index.html","hash":"fa93bd1d82d4b2374cc59b01f0e7fa758ceafb73","modified":1721056807394},{"_id":"public/tags/index.html","hash":"ca137fae95c3225b79009292515cde2e9e347f6d","modified":1721056807394},{"_id":"public/link/index.html","hash":"a2634f192d6271783641c419b0b4e78cbb3e9a59","modified":1721056807394},{"_id":"public/2024/07/15/2年后看2年前自己写的代码，蚌埠住了/index.html","hash":"2720555199c83e92f90a0f75958842532ef52ed0","modified":1721056807394},{"_id":"public/2023/11/20/失踪人口回归/index.html","hash":"4dce2ff499f41196a964ded7a50639b3b0e31a0e","modified":1721056807394},{"_id":"public/2022/10/04/经验篇/index.html","hash":"d7301a5caff626a062f6af557d177eb01ba1c5e5","modified":1721056807394},{"_id":"public/2022/09/20/request-entity-too-large/index.html","hash":"6453e761610cf754bf6949474d131dd19cf08ea4","modified":1721056807394},{"_id":"public/2022/09/17/数据库报错设备未就绪怎么办/index.html","hash":"4b738481ae08d47dcc9f2a2cf044506c81e0c6ab","modified":1721056807394},{"_id":"public/2022/09/14/浅谈第一次用node写接口遇到的坑/index.html","hash":"321cab8359725e5812bc577d7d21368a47192768","modified":1721056807394},{"_id":"public/2022/09/03/npm-ERR-code-ERESOLVE的解决方案/index.html","hash":"2ddcaf1ce1b7d030e4b0cec01980ddc5484147ed","modified":1721056807394},{"_id":"public/2022/09/03/error-Newline-required-at-end-of-file-but-not-found-eol-last的解决方案/index.html","hash":"2445a87e27693e916a9eb1b6a31247f642435dd4","modified":1721056807394},{"_id":"public/2022/09/02/ModuleNotFoundError-No-module-named-sklearn-cross-validation-的解决方案/index.html","hash":"73c9647ebed4e95eb245cf40bfc87ce6cfed6a7f","modified":1721056807394},{"_id":"public/2022/08/30/js学习笔记/index.html","hash":"f2976728250b5b6defb71e387a0033238da2b704","modified":1721056807394},{"_id":"public/2022/08/30/vue2学习笔记/index.html","hash":"1d29332a3662c387041b0580235c78fd23315cfc","modified":1721056807394},{"_id":"public/2022/08/30/ajax学习笔记/index.html","hash":"c185256f6d990ed85be20f3affb74311b9b8de21","modified":1721056807394},{"_id":"public/2022/08/30/git学习笔记/index.html","hash":"1780b5640e1a04a620ac0d312b4e9c7310987fb0","modified":1721056807394},{"_id":"public/2022/08/30/正则表达式学习笔记/index.html","hash":"a54e3cbe68d09508834921692ad8bb72cc999fb9","modified":1721056807394},{"_id":"public/2022/08/26/hello-world/index.html","hash":"490c3bf8ebb1090d695962fd4bae60089f5ff907","modified":1721056807394},{"_id":"public/archives/index.html","hash":"59144e6b006842143b4dac7a9ecb8c593b1c063e","modified":1721056807394},{"_id":"public/archives/page/2/index.html","hash":"e24c005fabd949a08c20700bffd965fee98d189b","modified":1721056807394},{"_id":"public/archives/2022/index.html","hash":"7a1a4e6238b7fc8f369736363d405e5dc8439dc8","modified":1721056807394},{"_id":"public/archives/2022/page/2/index.html","hash":"90fbfdce43afb2898839d3466cbf7198cfb6883d","modified":1721056807394},{"_id":"public/archives/2022/08/index.html","hash":"8f211235e3bc221168c58aaad4876f6b57eec9f7","modified":1721056807394},{"_id":"public/archives/2022/09/index.html","hash":"f830ff2200e62ae09336d56031e268d15aeb6c9a","modified":1721056807394},{"_id":"public/archives/2022/10/index.html","hash":"a64f05a48397aae666afa7eefb533134445775bf","modified":1721056807394},{"_id":"public/archives/2023/index.html","hash":"080ae5ad68efaab8828198f8abb6ff30deffb416","modified":1721056807394},{"_id":"public/archives/2023/11/index.html","hash":"ef8bce8025e0673e3cc0bcba7e8f405b3ea71c87","modified":1721056807394},{"_id":"public/archives/2024/index.html","hash":"64a0d74dbc8b68ae0fb7310b4ff2087c786f8366","modified":1721056807394},{"_id":"public/archives/2024/07/index.html","hash":"3d9fb4ec8ad05c07097c58159d1453098b0be2ee","modified":1721056807394},{"_id":"public/categories/闲聊/index.html","hash":"578196247bfbbbeb563ba6baf51b69ffeef41825","modified":1721056807394},{"_id":"public/categories/经验/index.html","hash":"7ee4c0138a17376c2b40508121a25805b65955e7","modified":1721056807394},{"_id":"public/categories/学习笔记/index.html","hash":"0676291cbc4529ce8fef4fb49c18870268aa1f43","modified":1721056807394},{"_id":"public/categories/教程/index.html","hash":"93a8e30d69b1cfc90642b9f169d6031767a1454e","modified":1721056807394},{"_id":"public/index.html","hash":"b98b2f87ef83dfbf7934aff81634b8d7fe353a57","modified":1721056807394},{"_id":"public/page/2/index.html","hash":"130e0ec0edb877c92e500ee088417dd747f3d1a0","modified":1721056807394},{"_id":"public/tags/闲聊/index.html","hash":"a29fdfd4c2985e9bc8991313fbc2f0c81bcfeab9","modified":1721056807394},{"_id":"public/tags/经验/index.html","hash":"0094bde3861ad8fd0870f655bbef8fc8b7e63d61","modified":1721056807394},{"_id":"public/tags/python/index.html","hash":"f04414436f7a7445a9763b449e50885e03b5046b","modified":1721056807394},{"_id":"public/tags/数据挖掘/index.html","hash":"a03c5e9862dbfd7e7eb8b4ffa82f5c976293b6a9","modified":1721056807394},{"_id":"public/tags/jupyter/index.html","hash":"742ce6daa0617561f8d858d1e7dd3b505ca67862","modified":1721056807394},{"_id":"public/tags/学习笔记/index.html","hash":"fb2f8357bb1cdc92fb64f06e262895d8316dd839","modified":1721056807394},{"_id":"public/tags/ajax/index.html","hash":"d3b4140795aa0411d8a1b31c055135cb220205c0","modified":1721056807394},{"_id":"public/tags/前端/index.html","hash":"d7e144ea66059917e829d082ae9b8f7ae2d6e58b","modified":1721056807394},{"_id":"public/tags/vue2/index.html","hash":"9433d4e8704f53651e0cdad6a28bb8aaf196f538","modified":1721056807394},{"_id":"public/tags/eslint/index.html","hash":"36e6baee5785368c7405f83e996d42416c4cede1","modified":1721056807394},{"_id":"public/tags/git/index.html","hash":"dee650d5149b504158995d6193c51f052b39d346","modified":1721056807394},{"_id":"public/tags/javascript/index.html","hash":"996ff9e4eeacd857c2b7f29f673c1bb923cd840a","modified":1721056807394},{"_id":"public/tags/ElementUI/index.html","hash":"0335e9441e5855c85c3bd3eede9a3f68e286e832","modified":1721056807394},{"_id":"public/tags/npm/index.html","hash":"d6bdc83728e51caf2651e14834545a9701794cd0","modified":1721056807394},{"_id":"public/tags/官方教程/index.html","hash":"b4719e88ade1025c22cbe88826cadd3406a1f7b8","modified":1721056807394},{"_id":"public/tags/node/index.html","hash":"bf507a004bda09379e299a68bb41ff3f52a3bbc3","modified":1721056807394},{"_id":"public/tags/数据库/index.html","hash":"eda05dcca031700bec4973e1cad81bae1294c2a3","modified":1721056807394},{"_id":"public/tags/sqlserver/index.html","hash":"59198d43683ec92cb132754deffbd71e8afd52c0","modified":1721056807394},{"_id":"public/tags/正则表达式/index.html","hash":"f2b382de49f1226af766836fdfb2d363307d9b21","modified":1721056807394},{"_id":"public/tags/node-js/index.html","hash":"ad895bf75dced1251ef2e99502c57d36b715d052","modified":1721056807394},{"_id":"public/image/image.png","hash":"d29969fc958165d6081df8f88d5d1e6d6c4d4836","modified":1721056807394},{"_id":"public/image/img01.jpg","hash":"dcf5aa731b27cbaca093a2354a70ab8088f0a306","modified":1721056807394},{"_id":"public/image/jspic03.png","hash":"63209dc32d725b59d5425f62cb2bb1fc1513cc78","modified":1721056807394},{"_id":"public/image/node01.png","hash":"9779aa7b8c0ab7e25104315eb719e6c30808b99f","modified":1721056807394},{"_id":"public/image/jspic09.png","hash":"b0ff6be95bd020ee73f05d25bb0489a1617ad563","modified":1721056807394},{"_id":"public/image/node02.jpg","hash":"80ae4a37d88e5c394e81309cc1b846a305dfb71d","modified":1721056807394},{"_id":"public/image/node05.png","hash":"d76f913f36dd166e8e0c14bef30b76a0964002dc","modified":1721056807394},{"_id":"public/image/node03.jpg","hash":"efb8475d57281811b4fa598987eaa1a86382b0c1","modified":1721056807394},{"_id":"public/image/npmpic02.png","hash":"f2767417d572a5284138f40be7f50c69df7dc206","modified":1721056807394},{"_id":"public/image/node04.png","hash":"b2d0ee31813cd448966ac9f0ed9b9e911a6a34ee","modified":1721056807394},{"_id":"public/image/npmpic03.png","hash":"5c0d465243cf5a374f801ec5f7d26717a6835e0d","modified":1721056807394},{"_id":"public/image/pic10.png","hash":"73874f1872d067f53e063fa39338b69b0fccc52f","modified":1721056807394},{"_id":"public/image/vue2-01.png","hash":"a77734ea9d6c9c346e052d9e1999e835a9ff914c","modified":1721056807394},{"_id":"public/image/vue2-02.png","hash":"777a62b2ef139938832e0620926102b6fd81bb29","modified":1721056807394},{"_id":"public/image/pythonpic01.png","hash":"5ac4a23a5599c8b72885dc3cf1312f85e2351fdb","modified":1721056807394},{"_id":"public/image/vue2-08.png","hash":"b87e0ec498497d8e7e9fb84ded08960ea5806035","modified":1721056807394},{"_id":"public/image/vue2-09.png","hash":"2f336d84420613e270e7183224001a168de7c344","modified":1721056807394},{"_id":"public/image/vue2-10.png","hash":"b9929c74ce1c5811443be943aaecc5f1d6416f8d","modified":1721056807394},{"_id":"public/image/vue2-11.png","hash":"27872e102784c1d9b10fd4be31d8459282a6c3c4","modified":1721056807394},{"_id":"public/image/vue2-12.png","hash":"309c820432f57c03a89c17202fe48e6d2fc3d522","modified":1721056807394},{"_id":"public/image/vue2-13.png","hash":"4803f4459ee041087a75408d551cd8040cbbdfd2","modified":1721056807394},{"_id":"public/image/vue2-15.png","hash":"97b6e63ca2be489496e47513c5644f54804f1c8d","modified":1721056807394},{"_id":"public/image/vue2-17.png","hash":"da9335976d8beae7534b1643b3f7dc350ce05a3b","modified":1721056807394},{"_id":"public/image/vue2-18.png","hash":"07fd747a02ee44468881ff18427018671e36518a","modified":1721056807394},{"_id":"public/image/vue2-20.png","hash":"c77ddfe808c7a23e700c07cc5e86021a734d9803","modified":1721056807394},{"_id":"public/image/vue2-19.png","hash":"57e7c6b996ce381a504914f36276b9e3e633fdd0","modified":1721056807394},{"_id":"public/image/vue2-21.png","hash":"32ec20dc6d033b67a64a5eb8514d429f948b6546","modified":1721056807394},{"_id":"public/image/vue2-22.png","hash":"ee62ef8914774c19d00681bcb88c165ec2016288","modified":1721056807394},{"_id":"public/image/vue2-25.png","hash":"72c4e2dadf53b23a929009e1443a69f0a973cc95","modified":1721056807394},{"_id":"public/image/vue2-23.png","hash":"f06951b565df2b03bf6416a650ccbb594a7e7ba6","modified":1721056807394},{"_id":"public/image/vue2-24.png","hash":"249c8e08639f70ba39601446e9dcf0b1b045fd98","modified":1721056807394},{"_id":"public/image/vue2-26.png","hash":"08d9a135456fa000c90c283304ebdefc4ee4f447","modified":1721056807394},{"_id":"public/image/vue2-28.png","hash":"d69f9ca8726c2bb245ed76382e9219504482f18b","modified":1721056807394},{"_id":"public/image/vue2-31.png","hash":"611432f9acf123a617bab9b1f6672ea142bbcd6c","modified":1721056807394},{"_id":"public/image/vue2-32.png","hash":"2ba75e78c93bca4e4bc4c406d21e845dee5863d1","modified":1721056807394},{"_id":"public/image/vue2-29.png","hash":"68399981b005ef4292bddcf7d25ab594668fcf8d","modified":1721056807394},{"_id":"public/image/vue2-30.png","hash":"52d8bb88dbc112ed6a0ccdd2d0e801b9692596a7","modified":1721056807394},{"_id":"public/image/vue2-33.png","hash":"034649f351f2f046139f148703cc7f65dbc2d7da","modified":1721056807394},{"_id":"public/image/背景3.jpeg","hash":"376faf134f82c838d530b2f16e388c228119f300","modified":1721056807394},{"_id":"public/image/背景5.jpg","hash":"7e80e841a11f38e268a3860c4eb814e9d0e6ba66","modified":1721056807394},{"_id":"public/image/背景4.jpg","hash":"c4faa7938d7f11f462c92edf9ffcf8651c4b369f","modified":1721056807394},{"_id":"public/image/背景8.jpg","hash":"fd0178e270a41bab73ee7594124fecc401fd8841","modified":1721056807394},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1721056807394},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1721056807394},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1721056807394},{"_id":"public/img/头像.jpeg","hash":"b76ed063acc767e2b7d7b49567f8ebad301f602f","modified":1721056807394},{"_id":"public/image/img02.png","hash":"0a79a840adc70efce7dc26b3ded9233c82c8ffa8","modified":1721056807394},{"_id":"public/img/背景3.jpeg","hash":"376faf134f82c838d530b2f16e388c228119f300","modified":1721056807394},{"_id":"public/image/jspic01.png","hash":"d2909852ee5542bb7a36187df26d56e9dd4228b9","modified":1721056807394},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1721056807394},{"_id":"public/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1721056807394},{"_id":"public/js/search/algolia.js","hash":"9feb248552667c53ce1b19bc7a295215f8c77008","modified":1721056807394},{"_id":"public/js/search/local-search.js","hash":"3071a4208fdf89ad7e0031536dd6ffa7bc951e4d","modified":1721056807394},{"_id":"public/css/index.css","hash":"e4c16adc66fa29c0064460dd37b861416f657c93","modified":1721056807394},{"_id":"public/js/main.js","hash":"73d2624ed465e4cfb1ebb00b2c8a24f5fc29bb21","modified":1721056807394},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1721056807394},{"_id":"public/image/jspic02.png","hash":"83aa19b1f6ba71777f112a23e2b3b5957c34110d","modified":1721056807394},{"_id":"public/image/jspic06.png","hash":"080224101a4b90e474c2233f1e485b201510bc40","modified":1721056807394},{"_id":"public/image/jspic07.png","hash":"c48a574fd1fed22db450c010a138f8ede6b02ad0","modified":1721056807394},{"_id":"public/image/jspic08.png","hash":"bda94a33e26940db96fd9ff89a326c2a9f17fc8a","modified":1721056807394},{"_id":"public/image/npmpic01.png","hash":"fe314c11c95ecda475cd518db49707003763e80e","modified":1721056807394},{"_id":"public/image/pic08.png","hash":"4a14d064d94a21f830ca3bcc0d24990ba61e60fa","modified":1721056807394},{"_id":"public/image/pic11.png","hash":"fd2687e7ddc32b7855c6ed753fd6d0df2024996a","modified":1721056807394},{"_id":"public/image/vue2-03.png","hash":"cc095d3bca716e439901496eb6222797b213639b","modified":1721056807394},{"_id":"public/image/vue2-04.png","hash":"f7bbbca8711fd0d469c096b1f52aae5171c93650","modified":1721056807394},{"_id":"public/image/vue2-06.png","hash":"ea93873841763614d4c4733e13e6110e93d1efdf","modified":1721056807394},{"_id":"public/image/vue2-27.png","hash":"4a456f4aaa77c1b8dfbd0b7fc8db512e735a8b93","modified":1721056807394},{"_id":"public/image/背景7.jpg","hash":"c37bb1fbd39dd08829f7b2a4c8083ba13ed04d47","modified":1721056807394},{"_id":"public/image/背景6.jpg","hash":"bb7ac7025fd380ab0d31c35cce66f8229392e9f8","modified":1721056807394},{"_id":"public/img/头像2.jpg","hash":"35906679fbeaa010a6a5a53b66093bfded8d990b","modified":1721056807394},{"_id":"public/image/jspic04.png","hash":"84e98b4bcac32b0b9b6d34675d64880963f8eb7d","modified":1721056807394},{"_id":"public/image/pic02.png","hash":"dd46c20fcdd5e1155e699bd2340e13c4aba58a40","modified":1721056807394},{"_id":"public/image/pic01.png","hash":"03be303a3a33a0ce53bdea7309246fe1899e989a","modified":1721056807394},{"_id":"public/image/pic04.png","hash":"d8b787725432efd12997e59d058a65f45ccc44a4","modified":1721056807394},{"_id":"public/image/pic05.png","hash":"1940850b196b027e9a954b49fafa977a919ad624","modified":1721056807394},{"_id":"public/image/pic12.png","hash":"ec88d772e803e79c23ab5bb4d52d97a203d61c73","modified":1721056807394},{"_id":"public/image/pic13.png","hash":"a68fc8bd6271def0ef33d0bf51465eac1be55363","modified":1721056807394},{"_id":"public/image/vue2-07.png","hash":"e50b90fb6e4cfbda46a0cc6f751effc5d6c9b71c","modified":1721056807394},{"_id":"public/image/vue2-14.png","hash":"5f7845ed3ffa1e7f5620d11dd3d420707d85e76e","modified":1721056807394},{"_id":"public/image/无风险03.jpg","hash":"0de752699eb346abdbddff953543ebfff3ae5b8f","modified":1721056807394},{"_id":"public/image/无风险05.png","hash":"b1606605285ced59cc69ced88cf37c8fb3f63d09","modified":1721056807394},{"_id":"public/image/无风险06.jpg","hash":"4cc5456eae0827843b40e9af9f93ed47ddc48165","modified":1721056807394},{"_id":"public/image/背景.jpg","hash":"ec0b613bd79e715b0816b2c9e1eb0e4f93d43123","modified":1721056807394},{"_id":"public/img/背景.jpg","hash":"ec0b613bd79e715b0816b2c9e1eb0e4f93d43123","modified":1721056807394},{"_id":"public/image/img03.png","hash":"1e816852a75e468233af37dfac7bfe6b65e2ad98","modified":1721056807394},{"_id":"public/image/jspic05.png","hash":"b21dd16448ba16b137979cbfe277205739770fbb","modified":1721056807394},{"_id":"public/image/pic09.png","hash":"16552a8487814895437826f7b9c785f521c7db71","modified":1721056807394},{"_id":"public/image/vue2-05.png","hash":"675bd0b76fa8449b2345acd95edcaaf16d08fe75","modified":1721056807394},{"_id":"public/image/无风险01.jpg","hash":"6f3597da6b60e2ead6cb9b8c4a698e7cf3e8f2a8","modified":1721056807394},{"_id":"public/image/无风险02.jpg","hash":"bc8400fb6d0d2214f6cfdd78e6e7cf53881c2c54","modified":1721056807394},{"_id":"public/image/pic03.png","hash":"2eb371b10a61ef825e5d811a2f85a55d01ad6120","modified":1721056807394},{"_id":"public/image/pic06.png","hash":"54f9794e26e0db8032b002ebbfc13cfede464f8d","modified":1721056807394},{"_id":"public/image/vue2-16.png","hash":"88a9500c0cef144c9c51a35bc9538778321f6619","modified":1721056807394},{"_id":"public/image/无风险04.jpg","hash":"3b7a0d3f571ae95780df7984a6172b7480e804d0","modified":1721056807394},{"_id":"public/image/pic07.png","hash":"fec057a792ab045ed136be5da9bff041adca49eb","modified":1721056807394},{"_id":"public/image/无风险07.jpg","hash":"3a24a3a5ed526bee709799940035a4e9edf5d891","modified":1721056807394},{"_id":"public/image/背景2.jpg","hash":"3878db1bb72d31df8c1c05382d1ffdcbeb8169c9","modified":1721056807394},{"_id":"public/img/背景2.jpg","hash":"3878db1bb72d31df8c1c05382d1ffdcbeb8169c9","modified":1721056807394}],"Category":[{"name":"闲聊","_id":"clyn4schr0004ecvz4izv0eh2"},{"name":"经验","_id":"clyn4schx000becvz48aj00js"},{"name":"学习笔记","_id":"clyn4sci1000hecvzfdqj88pz"},{"name":"教程","_id":"clyn4scig0015ecvzd8wedlfs"}],"Data":[],"Page":[{"title":"文章分类","date":"2022-08-26T08:45:00.000Z","type":"categories","top_img":"../image/背景3.jpeg","cover":"../image/背景3.jpeg","_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2022-08-26 16:45:00\ntype: \"categories\"\ntop_img: \"../image/背景3.jpeg\"\ncover: \"../image/背景3.jpeg\"\n---\n","updated":"2022-08-30T07:23:05.149Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clyn4sche0000ecvz90zpf76q","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于zhanhu和ta的快乐小屋","date":"2022-08-30T07:26:00.000Z","type":"about","top_img":"../image/背景3.jpeg","cover":"../image/背景3.jpeg","_content":"我叫zhanhu，来自广东，正在努力前进中…..主攻前端，副攻数据分析，持续奋斗！！！\n\n本博客是我第一个博客，目前还在建设中 本博客建于2022-08-26，本着利人利己的原则，我创建了本博客，本博客主要记录了我日常学习中的一些笔记，一些刷题日记，踩过的一些坑以及解决方案，一方面方便知识点的复习，一方面方便再次遇到这些坑的时候能有点经验。欢迎各位一起来学习，交流。","source":"about/index.md","raw":"---\ntitle: 关于zhanhu和ta的快乐小屋\ndate: 2022-08-30 15:26:00\ntype: \"about\"\ntop_img: \"../image/背景3.jpeg\"\ncover: \"../image/背景3.jpeg\"\n---\n我叫zhanhu，来自广东，正在努力前进中…..主攻前端，副攻数据分析，持续奋斗！！！\n\n本博客是我第一个博客，目前还在建设中 本博客建于2022-08-26，本着利人利己的原则，我创建了本博客，本博客主要记录了我日常学习中的一些笔记，一些刷题日记，踩过的一些坑以及解决方案，一方面方便知识点的复习，一方面方便再次遇到这些坑的时候能有点经验。欢迎各位一起来学习，交流。","updated":"2022-08-30T07:29:09.829Z","path":"about/index.html","comments":1,"layout":"page","_id":"clyn4scho0002ecvzgwq83m81","content":"<p>我叫zhanhu，来自广东，正在努力前进中…..主攻前端，副攻数据分析，持续奋斗！！！</p>\n<p>本博客是我第一个博客，目前还在建设中 本博客建于2022-08-26，本着利人利己的原则，我创建了本博客，本博客主要记录了我日常学习中的一些笔记，一些刷题日记，踩过的一些坑以及解决方案，一方面方便知识点的复习，一方面方便再次遇到这些坑的时候能有点经验。欢迎各位一起来学习，交流。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我叫zhanhu，来自广东，正在努力前进中…..主攻前端，副攻数据分析，持续奋斗！！！</p>\n<p>本博客是我第一个博客，目前还在建设中 本博客建于2022-08-26，本着利人利己的原则，我创建了本博客，本博客主要记录了我日常学习中的一些笔记，一些刷题日记，踩过的一些坑以及解决方案，一方面方便知识点的复习，一方面方便再次遇到这些坑的时候能有点经验。欢迎各位一起来学习，交流。</p>\n"},{"title":"标签页","date":"2022-08-26T08:41:15.000Z","type":"tags","top_img":"../image/背景3.jpeg","cover":"../image/背景3.jpeg","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签页\ndate: 2022-08-26 16:41:15\ntype: \"tags\"\ntop_img: \"../image/背景3.jpeg\"\ncover: \"../image/背景3.jpeg\"\n---\n","updated":"2022-08-30T07:23:18.191Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clyn4scht0006ecvzag3a7gwe","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"友情链接","date":"2022-08-26T08:48:00.000Z","type":"link","top_img":"../image/背景3.jpeg","cover":"../image/背景3.jpeg","_content":"","source":"link/index.md","raw":"---\ntitle: 友情链接\ndate: 2022-08-26 16:48:00\ntype: \"link\"\ntop_img: \"../image/背景3.jpeg\"\ncover: \"../image/背景3.jpeg\"\n---","updated":"2022-08-30T07:23:13.938Z","path":"link/index.html","comments":1,"layout":"page","_id":"clyn4schu0008ecvzbeos39j3","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"2年后看2年前自己写的代码，蚌埠住了","date":"2024-07-15T09:18:24.000Z","top_img":"../image/无风险01.jpg","cover":"../image/无风险01.jpg","description":"翻看自己的hexo博客，发现了2年前写的一段代码，我一整个？？？","_content":"\n今天心血来潮翻看自己之前写的blog，发现了这么一段代码\n\n![代码片段](../image/image.png)\n\n看完之后有一种 【小丑竟是我自己】的感觉，之前一直看别人写的搞笑代码，乐在其中，没想到2年后的我翻看自己2年前写的代码，竟也出现了这种搞笑片段。。。。发现之后截图发给了我的好友，我说快出来看笑话，2年前我竟是这样写代码的。。。。好友说我简直人才。\n\n往好了看，说明我进步了，怎么不是呢，狗头保命，改一个，以后看见别人写的搞笑代码也要返回来查一下自己之前是不是也是这么写的，下次再也不笑别人了。。。。\n\n```js\nchange() {\n    this.msg = !this.msg\n}\n``` \n\n第二个是发现自己博客的评论区好久没使用，都报错了\n```\nCode 504: The app is archived, please restore in console before use. [400 GET https://leancloud.cn/1.1/classes/Comment]\n```\n好久没用已经忘记自己之前用的什么插件了。查了自己的配置文件，发现是valine，百度一波发现是应用超过30天没有访问，被归档了，所以需要去官网重新激活一次。\n参考链接： https://zhuanlan.zhihu.com/p/251040011\n","source":"_posts/2年后看2年前自己写的代码，蚌埠住了.md","raw":"---\ntitle: 2年后看2年前自己写的代码，蚌埠住了\ndate: 2024-07-15 17:18:24\ntags: \n  - 闲聊\ncategories: 闲聊\ntop_img: \"../image/无风险01.jpg\"\ncover: \"../image/无风险01.jpg\"\ndescription: 翻看自己的hexo博客，发现了2年前写的一段代码，我一整个？？？\n---\n\n今天心血来潮翻看自己之前写的blog，发现了这么一段代码\n\n![代码片段](../image/image.png)\n\n看完之后有一种 【小丑竟是我自己】的感觉，之前一直看别人写的搞笑代码，乐在其中，没想到2年后的我翻看自己2年前写的代码，竟也出现了这种搞笑片段。。。。发现之后截图发给了我的好友，我说快出来看笑话，2年前我竟是这样写代码的。。。。好友说我简直人才。\n\n往好了看，说明我进步了，怎么不是呢，狗头保命，改一个，以后看见别人写的搞笑代码也要返回来查一下自己之前是不是也是这么写的，下次再也不笑别人了。。。。\n\n```js\nchange() {\n    this.msg = !this.msg\n}\n``` \n\n第二个是发现自己博客的评论区好久没使用，都报错了\n```\nCode 504: The app is archived, please restore in console before use. [400 GET https://leancloud.cn/1.1/classes/Comment]\n```\n好久没用已经忘记自己之前用的什么插件了。查了自己的配置文件，发现是valine，百度一波发现是应用超过30天没有访问，被归档了，所以需要去官网重新激活一次。\n参考链接： https://zhuanlan.zhihu.com/p/251040011\n","slug":"2年后看2年前自己写的代码，蚌埠住了","published":1,"updated":"2024-07-15T11:47:00.894Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyn4schj0001ecvz9opj9v9n","content":"<p>今天心血来潮翻看自己之前写的blog，发现了这么一段代码</p>\n<p><img src=\"/../image/image.png\" alt=\"代码片段\"></p>\n<p>看完之后有一种 【小丑竟是我自己】的感觉，之前一直看别人写的搞笑代码，乐在其中，没想到2年后的我翻看自己2年前写的代码，竟也出现了这种搞笑片段。。。。发现之后截图发给了我的好友，我说快出来看笑话，2年前我竟是这样写代码的。。。。好友说我简直人才。</p>\n<p>往好了看，说明我进步了，怎么不是呢，狗头保命，改一个，以后看见别人写的搞笑代码也要返回来查一下自己之前是不是也是这么写的，下次再也不笑别人了。。。。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">change</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">msg</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">msg</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第二个是发现自己博客的评论区好久没使用，都报错了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Code 504: The app is archived, please restore in console before use. [400 GET https://leancloud.cn/1.1/classes/Comment]</span><br></pre></td></tr></table></figure>\n<p>好久没用已经忘记自己之前用的什么插件了。查了自己的配置文件，发现是valine，百度一波发现是应用超过30天没有访问，被归档了，所以需要去官网重新激活一次。<br>参考链接： <a href=\"https://zhuanlan.zhihu.com/p/251040011\">https://zhuanlan.zhihu.com/p/251040011</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天心血来潮翻看自己之前写的blog，发现了这么一段代码</p>\n<p><img src=\"/../image/image.png\" alt=\"代码片段\"></p>\n<p>看完之后有一种 【小丑竟是我自己】的感觉，之前一直看别人写的搞笑代码，乐在其中，没想到2年后的我翻看自己2年前写的代码，竟也出现了这种搞笑片段。。。。发现之后截图发给了我的好友，我说快出来看笑话，2年前我竟是这样写代码的。。。。好友说我简直人才。</p>\n<p>往好了看，说明我进步了，怎么不是呢，狗头保命，改一个，以后看见别人写的搞笑代码也要返回来查一下自己之前是不是也是这么写的，下次再也不笑别人了。。。。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">change</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">msg</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">msg</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第二个是发现自己博客的评论区好久没使用，都报错了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Code 504: The app is archived, please restore in console before use. [400 GET https://leancloud.cn/1.1/classes/Comment]</span><br></pre></td></tr></table></figure>\n<p>好久没用已经忘记自己之前用的什么插件了。查了自己的配置文件，发现是valine，百度一波发现是应用超过30天没有访问，被归档了，所以需要去官网重新激活一次。<br>参考链接： <a href=\"https://zhuanlan.zhihu.com/p/251040011\">https://zhuanlan.zhihu.com/p/251040011</a></p>\n"},{"title":"ModuleNotFoundError: No module named 'sklearn.cross_validation'的解决方案","date":"2022-09-02T05:38:02.000Z","top_img":"../image/无风险02.jpg","cover":"../image/无风险02.jpg","description":"在进行数据挖掘的时候遇到的坑和解决方案","_content":"\n今天在学习数据挖掘里面的OneR算法的时候，当代码打到测试算法的时候突然报了一个错。\n![错误信息](./../image/pythonpic01.png)\n经过上网查询发现，这个包已经不在了，现在要换成别的写法即\n```\nfrom sklearn.model_selection import train_test_split\n```\n\n","source":"_posts/ModuleNotFoundError-No-module-named-sklearn-cross-validation-的解决方案.md","raw":"---\ntitle: 'ModuleNotFoundError: No module named ''sklearn.cross_validation''的解决方案'\ndate: 2022-09-02 13:38:02\ntags: \n  - 经验\n  - python\n  - 数据挖掘\n  - jupyter\ncategories: 经验\ntop_img: \"../image/无风险02.jpg\"\ncover: \"../image/无风险02.jpg\"\ndescription: 在进行数据挖掘的时候遇到的坑和解决方案\n---\n\n今天在学习数据挖掘里面的OneR算法的时候，当代码打到测试算法的时候突然报了一个错。\n![错误信息](./../image/pythonpic01.png)\n经过上网查询发现，这个包已经不在了，现在要换成别的写法即\n```\nfrom sklearn.model_selection import train_test_split\n```\n\n","slug":"ModuleNotFoundError-No-module-named-sklearn-cross-validation-的解决方案","published":1,"updated":"2022-10-04T12:51:05.937Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyn4schp0003ecvzb2nq84go","content":"<p>今天在学习数据挖掘里面的OneR算法的时候，当代码打到测试算法的时候突然报了一个错。<br><img src=\"/./../image/pythonpic01.png\" alt=\"错误信息\"><br>经过上网查询发现，这个包已经不在了，现在要换成别的写法即</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from sklearn.model_selection import train_test_split</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>今天在学习数据挖掘里面的OneR算法的时候，当代码打到测试算法的时候突然报了一个错。<br><img src=\"/./../image/pythonpic01.png\" alt=\"错误信息\"><br>经过上网查询发现，这个包已经不在了，现在要换成别的写法即</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from sklearn.model_selection import train_test_split</span><br></pre></td></tr></table></figure>\n\n"},{"title":"ajax学习笔记","date":"2022-08-30T07:39:36.000Z","label":"这是一篇ajax的知识点总结","top_img":"../image/无风险05.png","cover":"../image/无风险05.png","description":"这是一篇ajax的知识点总结","_content":"\n# ajax\n\n网页请求数据的方法： var xhrObj = new XMLHttpRequest()\n\n最常见的两种请求方式 get和post请求\n\nget请求通常用于获取服务端资源（向服务器要资源）\n\n例如：根据URL地址，从服务器获取HTML文件，css文件，js文件，图片文件，数据资源等\n\npost请求常用于向服务器提交数据（往服务器发送资源）\n\n例如：登录时向服务器提交的登录信息，注册时向服务器提交的注册信息，添加用户时向服务器提交的用户信息等各种数据提交操作\n\n## jq中发起ajax请求的3个方法\n\n$.get() 向服务器获取数据\n\n$.post()  向服务器提交数据\n\n$.ajax() 既可以向服务器获取数据又可以向服务器提交数据\n\n### $.get()发起不带参数的请求\n```\n$.get(url,[data],[callback])\n```\n![](../image/pic01.png)\n\n直接提供请求的url地址和请求成功的回调函数即可\n\n```js\n//这个代码的意思就是点击按钮就发起请求\n$(function(){\n            $('.btnGet').on('click',function(){\n                $.get('http://www.liulongbin.top:3006/api/getbooks',function(res){\n                    console.log(res);\n                })\n            })\n        })\n```\n\n看结果在F12那边点network，切换为Feach/XHR就能看见请求结果\n\n### $.get()发起带参数的请求\n\n```js\n$(function(){\n            $('.btnGet').on('click',function(){\n                $.get('http://www.liulongbin.top:3006/api/getbooks',{id:1},function(res){\n                    console.log(res);\n                })\n            })\n        })\n```\n### $.post()向服务器提交数据\n\n```$.post(url,[data],[callback])```\n\n![](../image/pic02.png)\n\n```js\n\n    $(function(){\n        $('.submit').on('click',function(){\n                $.post('http://www.liulongbin.top:3006/api/addbook',{bookname:\"海底两万里\",author:\"凡尔纳\",publisher:\"长江文艺出版社\"},function(res){\n                    console.log(res);\n                })\n        })\n    })\n\n```\n\najax 发请求\n\n```js\n{% raw %}\n    $.ajax({\n\n        type: ' ',    //请求的方式，例如GET或者POST(大写啊！！！)\n\n        url: ' ',      //请求的url地址\n\n        data: { },   //这次请求要携带的数据\n\n        success:function(res){ }      //请求成功之后的回调函数\n\n    })\n{% endraw %}\n```\n如果你不需要携带参数，那么那个data就可以省略不写了，指的是整个都不要\n# 表单\n\n用于发送用户请求的\n\n## 表单的组成部分\n\n由三部分组成\n\n1、表单标签 ```<form> </form>```\n\n2、表单域 就是那些input框\n\n包含了文本框，密码框，隐藏框，多行文本框，复选框，单选框，下拉选择框和文件上传框等。\n\n3、表单按钮\n\n## form标签的属性\n\n![](../image/pic03.png)\n\n### action\n\naction属性用来规定当提交表单时，向何处发送表单数据\n\n当form表单在未指定action属性值的情况下，action的默认值为当前页面的url地址\n\n当表单提交后，页面会立即跳转到指定的url地址\n\n### target\n\ntarget属性规定在何处打开action url\n\n他的可选参数有5个，默认情况下，target的值是_self\n\n![](../image/pic04.png)\n\n### method\n\nmethod属性用来规定是以get方式还是post方式提交到action url\n\n默认情况下，method值为get，表示通过url的形式提交数据，就是说你的数据会显示在url里面，然后post是通过F12看才能看见的，比较隐秘，一般用这个方式进行数据提交\n\nget方式适合用来提交少量的，简单的数据\n\npost方式适合用来提交大量的，复杂的，或包含文件上传的数据\n\n### enctype\n\n![](../image/pic05.png)\n\n不涉及文件上传用默认值就行\n## 通过ajax提交表单数据\n\n### 监听表单提交事件\n```\n$('#form1').submit(function(e){\n\nalert('叭叭叭');\n\n})\n\n法2：\n\n$('form1').on('submit',function(){\n\nalert('巴拉啊');\n\n})\n```\n### 阻止表单默认提交行为\n```\n$('#form1').submit(function(e){\n\ne.preventDefault();\n\n})\n\n$('form1').on('submit',function(e){\n\ne.preventDefault();\n\n})\n```\n\n### 快速获取表单中的数据\n\nserializa()函数\n```\n$(具体选择器).serilize()\n```\n好处：可以一次性获取所有表单的数据\n\n注意：在使用这个方法时，必须为每个表单元素添加name属性\n\n\n# xhr\n\n## 基于xhr发起get请求\n\n![](../image/pic06.png)\n\n如果需要传递参数，则在open的路径后面?参数名=参数值\n\n## url编码和解码\n\nencodeURI() 编码的函数，就是中文变成三个%英文\n\ndecodeURI() 解码的函数，就是英文变成中文\n\n##  使用xhr发起post请求\n\n![](../image/pic07.png)\n\n## 数据交换格式\n\n### XML\n```\n<note>\n\n​\t<to>ls</to>\n\n​\t<from>zs</from>\n\n​\t<heading>通知</heading>\n\n​\t<body>晚上开会</body>\n\n</node>\n```\n### JSON\n\n本质：字符串\n\n#### 两种结构\n\n对象结构：对象结构用{}括起来，{key:value,key:value}的键值对结构。其中，key必须使用英文的双引号包裹的字符串，value的数据类型可以是数字、字符串、布尔值、null、数组、对象六种类型\n\n不允许出现undefined和function\n\n数组结构：数据结构在接送中表示为[]括起来的内容，数据结构为[\"\",\"\",\"\"]数组中的数据类型可以是数字、字符串、布尔值、null、数组、对象六种类型\n\n注：json中不能写注释，不允许使用单引号来表示字符串\n\n## JSON和js对象的互相转换\n\n1、实现json转换为js，用 JSON.parse()方法\n\n2、实现js转换为json，用 JSON.stringify()方法\n\n## xhr新功能\n\n1、可以设置http请求的时限\n\nxhr.timeout = xxx (单位是毫秒)\n\ntimeout事件\n\nxhr.ontimeout = function(event){\n\n函数体\n\n}\n\n2、可以使用FormData对象管理表单数据\n\n(1)模拟表单操作，提交数据\n\n```js\nvar fd = new FormData();\n        fd.append('uname','haoye');\n        fd.append('pwd','buhaole');\n        var xhr = new XMLHttpRequest();\n        xhr.open('POST','http://www.liulongbin.top:3006/api/formdata');\n        xhr.send(fd);\n\n        xhr.onreadystatechange = function(){\n            if(xhr.readyState === 4 && xhr.status === 200){\n                console.log(JSON.parse(xhr.responseText));\n            }\n        }\n```\n\n(2)也可以用来获取网页表单的值\n\n详见37.html\n\n3、可以上传文件\n\n步骤：\n\n（1）定义UI结构\n\n![](../image/pic08.png)\n\n（2）验证是否选择了文件\n\n![](../image/pic09.png)\n\n（3）向formdata追加文件\n\n![](../image/pic10.png)\n\n（4）发请求并监听\n\n![](../image/pic11.png)\n\n4、可以获得数据传输的进度信息\n\n![](../image/pic12.png)\n\n# axios\n\n## 使用axios发起get请求\n\n```js\nvar btn = document.querySelector('#btn1');\nbtn.addEventListener('click',function(){\nvar url = 'http://www.liulongbin.top:3006/api/get';\nvar data = {name:'zhanhu',age:20};\naxios.get(url,{params:data}).then(function(res){\n     console.log(res.data);\n   })\n })\n```\n\n\n\n## 使用axios发起post请求\n\n```js\nvar btn = document.querySelector('#btn2');\nbtn.addEventListener('click',function(){\nvar url = 'http://www.liulongbin.top:3006/api/post';\n var data = {address:'北京',location:'朝阳区'};\naxios.post(url,data).then(function(res){\n      console.log(res.data);\n    })\n })\n```\n\n## 直接使用axios发起请求\n\n详见41.html\n\n\n\n只要调用某个方法的返回值是Promise示例，则前面可以添加await\n\nawait只能用在被async修饰的方法中\n\n![](../image/pic13.png)\n","source":"_posts/ajax学习笔记.md","raw":"---\ntitle: ajax学习笔记\ndate: 2022-08-30 15:39:36\ntags: \n  - 学习笔记\n  - ajax\n  - 前端\ncategories: 学习笔记\nlabel: 这是一篇ajax的知识点总结\ntop_img: \"../image/无风险05.png\"\ncover: \"../image/无风险05.png\"\ndescription: 这是一篇ajax的知识点总结\n---\n\n# ajax\n\n网页请求数据的方法： var xhrObj = new XMLHttpRequest()\n\n最常见的两种请求方式 get和post请求\n\nget请求通常用于获取服务端资源（向服务器要资源）\n\n例如：根据URL地址，从服务器获取HTML文件，css文件，js文件，图片文件，数据资源等\n\npost请求常用于向服务器提交数据（往服务器发送资源）\n\n例如：登录时向服务器提交的登录信息，注册时向服务器提交的注册信息，添加用户时向服务器提交的用户信息等各种数据提交操作\n\n## jq中发起ajax请求的3个方法\n\n$.get() 向服务器获取数据\n\n$.post()  向服务器提交数据\n\n$.ajax() 既可以向服务器获取数据又可以向服务器提交数据\n\n### $.get()发起不带参数的请求\n```\n$.get(url,[data],[callback])\n```\n![](../image/pic01.png)\n\n直接提供请求的url地址和请求成功的回调函数即可\n\n```js\n//这个代码的意思就是点击按钮就发起请求\n$(function(){\n            $('.btnGet').on('click',function(){\n                $.get('http://www.liulongbin.top:3006/api/getbooks',function(res){\n                    console.log(res);\n                })\n            })\n        })\n```\n\n看结果在F12那边点network，切换为Feach/XHR就能看见请求结果\n\n### $.get()发起带参数的请求\n\n```js\n$(function(){\n            $('.btnGet').on('click',function(){\n                $.get('http://www.liulongbin.top:3006/api/getbooks',{id:1},function(res){\n                    console.log(res);\n                })\n            })\n        })\n```\n### $.post()向服务器提交数据\n\n```$.post(url,[data],[callback])```\n\n![](../image/pic02.png)\n\n```js\n\n    $(function(){\n        $('.submit').on('click',function(){\n                $.post('http://www.liulongbin.top:3006/api/addbook',{bookname:\"海底两万里\",author:\"凡尔纳\",publisher:\"长江文艺出版社\"},function(res){\n                    console.log(res);\n                })\n        })\n    })\n\n```\n\najax 发请求\n\n```js\n{% raw %}\n    $.ajax({\n\n        type: ' ',    //请求的方式，例如GET或者POST(大写啊！！！)\n\n        url: ' ',      //请求的url地址\n\n        data: { },   //这次请求要携带的数据\n\n        success:function(res){ }      //请求成功之后的回调函数\n\n    })\n{% endraw %}\n```\n如果你不需要携带参数，那么那个data就可以省略不写了，指的是整个都不要\n# 表单\n\n用于发送用户请求的\n\n## 表单的组成部分\n\n由三部分组成\n\n1、表单标签 ```<form> </form>```\n\n2、表单域 就是那些input框\n\n包含了文本框，密码框，隐藏框，多行文本框，复选框，单选框，下拉选择框和文件上传框等。\n\n3、表单按钮\n\n## form标签的属性\n\n![](../image/pic03.png)\n\n### action\n\naction属性用来规定当提交表单时，向何处发送表单数据\n\n当form表单在未指定action属性值的情况下，action的默认值为当前页面的url地址\n\n当表单提交后，页面会立即跳转到指定的url地址\n\n### target\n\ntarget属性规定在何处打开action url\n\n他的可选参数有5个，默认情况下，target的值是_self\n\n![](../image/pic04.png)\n\n### method\n\nmethod属性用来规定是以get方式还是post方式提交到action url\n\n默认情况下，method值为get，表示通过url的形式提交数据，就是说你的数据会显示在url里面，然后post是通过F12看才能看见的，比较隐秘，一般用这个方式进行数据提交\n\nget方式适合用来提交少量的，简单的数据\n\npost方式适合用来提交大量的，复杂的，或包含文件上传的数据\n\n### enctype\n\n![](../image/pic05.png)\n\n不涉及文件上传用默认值就行\n## 通过ajax提交表单数据\n\n### 监听表单提交事件\n```\n$('#form1').submit(function(e){\n\nalert('叭叭叭');\n\n})\n\n法2：\n\n$('form1').on('submit',function(){\n\nalert('巴拉啊');\n\n})\n```\n### 阻止表单默认提交行为\n```\n$('#form1').submit(function(e){\n\ne.preventDefault();\n\n})\n\n$('form1').on('submit',function(e){\n\ne.preventDefault();\n\n})\n```\n\n### 快速获取表单中的数据\n\nserializa()函数\n```\n$(具体选择器).serilize()\n```\n好处：可以一次性获取所有表单的数据\n\n注意：在使用这个方法时，必须为每个表单元素添加name属性\n\n\n# xhr\n\n## 基于xhr发起get请求\n\n![](../image/pic06.png)\n\n如果需要传递参数，则在open的路径后面?参数名=参数值\n\n## url编码和解码\n\nencodeURI() 编码的函数，就是中文变成三个%英文\n\ndecodeURI() 解码的函数，就是英文变成中文\n\n##  使用xhr发起post请求\n\n![](../image/pic07.png)\n\n## 数据交换格式\n\n### XML\n```\n<note>\n\n​\t<to>ls</to>\n\n​\t<from>zs</from>\n\n​\t<heading>通知</heading>\n\n​\t<body>晚上开会</body>\n\n</node>\n```\n### JSON\n\n本质：字符串\n\n#### 两种结构\n\n对象结构：对象结构用{}括起来，{key:value,key:value}的键值对结构。其中，key必须使用英文的双引号包裹的字符串，value的数据类型可以是数字、字符串、布尔值、null、数组、对象六种类型\n\n不允许出现undefined和function\n\n数组结构：数据结构在接送中表示为[]括起来的内容，数据结构为[\"\",\"\",\"\"]数组中的数据类型可以是数字、字符串、布尔值、null、数组、对象六种类型\n\n注：json中不能写注释，不允许使用单引号来表示字符串\n\n## JSON和js对象的互相转换\n\n1、实现json转换为js，用 JSON.parse()方法\n\n2、实现js转换为json，用 JSON.stringify()方法\n\n## xhr新功能\n\n1、可以设置http请求的时限\n\nxhr.timeout = xxx (单位是毫秒)\n\ntimeout事件\n\nxhr.ontimeout = function(event){\n\n函数体\n\n}\n\n2、可以使用FormData对象管理表单数据\n\n(1)模拟表单操作，提交数据\n\n```js\nvar fd = new FormData();\n        fd.append('uname','haoye');\n        fd.append('pwd','buhaole');\n        var xhr = new XMLHttpRequest();\n        xhr.open('POST','http://www.liulongbin.top:3006/api/formdata');\n        xhr.send(fd);\n\n        xhr.onreadystatechange = function(){\n            if(xhr.readyState === 4 && xhr.status === 200){\n                console.log(JSON.parse(xhr.responseText));\n            }\n        }\n```\n\n(2)也可以用来获取网页表单的值\n\n详见37.html\n\n3、可以上传文件\n\n步骤：\n\n（1）定义UI结构\n\n![](../image/pic08.png)\n\n（2）验证是否选择了文件\n\n![](../image/pic09.png)\n\n（3）向formdata追加文件\n\n![](../image/pic10.png)\n\n（4）发请求并监听\n\n![](../image/pic11.png)\n\n4、可以获得数据传输的进度信息\n\n![](../image/pic12.png)\n\n# axios\n\n## 使用axios发起get请求\n\n```js\nvar btn = document.querySelector('#btn1');\nbtn.addEventListener('click',function(){\nvar url = 'http://www.liulongbin.top:3006/api/get';\nvar data = {name:'zhanhu',age:20};\naxios.get(url,{params:data}).then(function(res){\n     console.log(res.data);\n   })\n })\n```\n\n\n\n## 使用axios发起post请求\n\n```js\nvar btn = document.querySelector('#btn2');\nbtn.addEventListener('click',function(){\nvar url = 'http://www.liulongbin.top:3006/api/post';\n var data = {address:'北京',location:'朝阳区'};\naxios.post(url,data).then(function(res){\n      console.log(res.data);\n    })\n })\n```\n\n## 直接使用axios发起请求\n\n详见41.html\n\n\n\n只要调用某个方法的返回值是Promise示例，则前面可以添加await\n\nawait只能用在被async修饰的方法中\n\n![](../image/pic13.png)\n","slug":"ajax学习笔记","published":1,"updated":"2022-10-04T12:50:10.616Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyn4scht0007ecvz5ccdddmw","content":"<h1 id=\"ajax\"><a href=\"#ajax\" class=\"headerlink\" title=\"ajax\"></a>ajax</h1><p>网页请求数据的方法： var xhrObj = new XMLHttpRequest()</p>\n<p>最常见的两种请求方式 get和post请求</p>\n<p>get请求通常用于获取服务端资源（向服务器要资源）</p>\n<p>例如：根据URL地址，从服务器获取HTML文件，css文件，js文件，图片文件，数据资源等</p>\n<p>post请求常用于向服务器提交数据（往服务器发送资源）</p>\n<p>例如：登录时向服务器提交的登录信息，注册时向服务器提交的注册信息，添加用户时向服务器提交的用户信息等各种数据提交操作</p>\n<h2 id=\"jq中发起ajax请求的3个方法\"><a href=\"#jq中发起ajax请求的3个方法\" class=\"headerlink\" title=\"jq中发起ajax请求的3个方法\"></a>jq中发起ajax请求的3个方法</h2><p>$.get() 向服务器获取数据</p>\n<p>$.post()  向服务器提交数据</p>\n<p>$.ajax() 既可以向服务器获取数据又可以向服务器提交数据</p>\n<h3 id=\"get-发起不带参数的请求\"><a href=\"#get-发起不带参数的请求\" class=\"headerlink\" title=\"$.get()发起不带参数的请求\"></a>$.get()发起不带参数的请求</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.get(url,[data],[callback])</span><br></pre></td></tr></table></figure>\n<p><img src=\"/../image/pic01.png\"></p>\n<p>直接提供请求的url地址和请求成功的回调函数即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这个代码的意思就是点击按钮就发起请求</span></span><br><span class=\"line\">$(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            $(<span class=\"string\">&#x27;.btnGet&#x27;</span>).<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                $.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">res</span>)&#123;</span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>看结果在F12那边点network，切换为Feach/XHR就能看见请求结果</p>\n<h3 id=\"get-发起带参数的请求\"><a href=\"#get-发起带参数的请求\" class=\"headerlink\" title=\"$.get()发起带参数的请求\"></a>$.get()发起带参数的请求</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            $(<span class=\"string\">&#x27;.btnGet&#x27;</span>).<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                $.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>,&#123;<span class=\"attr\">id</span>:<span class=\"number\">1</span>&#125;,<span class=\"keyword\">function</span>(<span class=\"params\">res</span>)&#123;</span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"post-向服务器提交数据\"><a href=\"#post-向服务器提交数据\" class=\"headerlink\" title=\"$.post()向服务器提交数据\"></a>$.post()向服务器提交数据</h3><p><code>$.post(url,[data],[callback])</code></p>\n<p><img src=\"/../image/pic02.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;.submit&#x27;</span>).<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            $.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;</span>,&#123;<span class=\"attr\">bookname</span>:<span class=\"string\">&quot;海底两万里&quot;</span>,<span class=\"attr\">author</span>:<span class=\"string\">&quot;凡尔纳&quot;</span>,<span class=\"attr\">publisher</span>:<span class=\"string\">&quot;长江文艺出版社&quot;</span>&#125;,<span class=\"keyword\">function</span>(<span class=\"params\">res</span>)&#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>ajax 发请求</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% raw %&#125;</span><br><span class=\"line\">    $.<span class=\"title function_\">ajax</span>(<span class=\"params\">&#123;</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        type: <span class=\"string\">&#x27; &#x27;</span>,    //请求的方式，例如GET或者POST(大写啊！！！)</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        url: <span class=\"string\">&#x27; &#x27;</span>,      //请求的url地址</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        data: &#123; &#125;,   //这次请求要携带的数据</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        success:<span class=\"keyword\">function</span>(res)&#123; &#125;      //请求成功之后的回调函数</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    &#125;</span>)</span><br><span class=\"line\">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>\n<p>如果你不需要携带参数，那么那个data就可以省略不写了，指的是整个都不要</p>\n<h1 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h1><p>用于发送用户请求的</p>\n<h2 id=\"表单的组成部分\"><a href=\"#表单的组成部分\" class=\"headerlink\" title=\"表单的组成部分\"></a>表单的组成部分</h2><p>由三部分组成</p>\n<p>1、表单标签 <code>&lt;form&gt; &lt;/form&gt;</code></p>\n<p>2、表单域 就是那些input框</p>\n<p>包含了文本框，密码框，隐藏框，多行文本框，复选框，单选框，下拉选择框和文件上传框等。</p>\n<p>3、表单按钮</p>\n<h2 id=\"form标签的属性\"><a href=\"#form标签的属性\" class=\"headerlink\" title=\"form标签的属性\"></a>form标签的属性</h2><p><img src=\"/../image/pic03.png\"></p>\n<h3 id=\"action\"><a href=\"#action\" class=\"headerlink\" title=\"action\"></a>action</h3><p>action属性用来规定当提交表单时，向何处发送表单数据</p>\n<p>当form表单在未指定action属性值的情况下，action的默认值为当前页面的url地址</p>\n<p>当表单提交后，页面会立即跳转到指定的url地址</p>\n<h3 id=\"target\"><a href=\"#target\" class=\"headerlink\" title=\"target\"></a>target</h3><p>target属性规定在何处打开action url</p>\n<p>他的可选参数有5个，默认情况下，target的值是_self</p>\n<p><img src=\"/../image/pic04.png\"></p>\n<h3 id=\"method\"><a href=\"#method\" class=\"headerlink\" title=\"method\"></a>method</h3><p>method属性用来规定是以get方式还是post方式提交到action url</p>\n<p>默认情况下，method值为get，表示通过url的形式提交数据，就是说你的数据会显示在url里面，然后post是通过F12看才能看见的，比较隐秘，一般用这个方式进行数据提交</p>\n<p>get方式适合用来提交少量的，简单的数据</p>\n<p>post方式适合用来提交大量的，复杂的，或包含文件上传的数据</p>\n<h3 id=\"enctype\"><a href=\"#enctype\" class=\"headerlink\" title=\"enctype\"></a>enctype</h3><p><img src=\"/../image/pic05.png\"></p>\n<p>不涉及文件上传用默认值就行</p>\n<h2 id=\"通过ajax提交表单数据\"><a href=\"#通过ajax提交表单数据\" class=\"headerlink\" title=\"通过ajax提交表单数据\"></a>通过ajax提交表单数据</h2><h3 id=\"监听表单提交事件\"><a href=\"#监听表单提交事件\" class=\"headerlink\" title=\"监听表单提交事件\"></a>监听表单提交事件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&#x27;#form1&#x27;).submit(function(e)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">alert(&#x27;叭叭叭&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">法2：</span><br><span class=\"line\"></span><br><span class=\"line\">$(&#x27;form1&#x27;).on(&#x27;submit&#x27;,function()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">alert(&#x27;巴拉啊&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"阻止表单默认提交行为\"><a href=\"#阻止表单默认提交行为\" class=\"headerlink\" title=\"阻止表单默认提交行为\"></a>阻止表单默认提交行为</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&#x27;#form1&#x27;).submit(function(e)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">e.preventDefault();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">$(&#x27;form1&#x27;).on(&#x27;submit&#x27;,function(e)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">e.preventDefault();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"快速获取表单中的数据\"><a href=\"#快速获取表单中的数据\" class=\"headerlink\" title=\"快速获取表单中的数据\"></a>快速获取表单中的数据</h3><p>serializa()函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(具体选择器).serilize()</span><br></pre></td></tr></table></figure>\n<p>好处：可以一次性获取所有表单的数据</p>\n<p>注意：在使用这个方法时，必须为每个表单元素添加name属性</p>\n<h1 id=\"xhr\"><a href=\"#xhr\" class=\"headerlink\" title=\"xhr\"></a>xhr</h1><h2 id=\"基于xhr发起get请求\"><a href=\"#基于xhr发起get请求\" class=\"headerlink\" title=\"基于xhr发起get请求\"></a>基于xhr发起get请求</h2><p><img src=\"/../image/pic06.png\"></p>\n<p>如果需要传递参数，则在open的路径后面?参数名=参数值</p>\n<h2 id=\"url编码和解码\"><a href=\"#url编码和解码\" class=\"headerlink\" title=\"url编码和解码\"></a>url编码和解码</h2><p>encodeURI() 编码的函数，就是中文变成三个%英文</p>\n<p>decodeURI() 解码的函数，就是英文变成中文</p>\n<h2 id=\"使用xhr发起post请求\"><a href=\"#使用xhr发起post请求\" class=\"headerlink\" title=\"使用xhr发起post请求\"></a>使用xhr发起post请求</h2><p><img src=\"/../image/pic07.png\"></p>\n<h2 id=\"数据交换格式\"><a href=\"#数据交换格式\" class=\"headerlink\" title=\"数据交换格式\"></a>数据交换格式</h2><h3 id=\"XML\"><a href=\"#XML\" class=\"headerlink\" title=\"XML\"></a>XML</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;note&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">​\t&lt;to&gt;ls&lt;/to&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">​\t&lt;from&gt;zs&lt;/from&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">​\t&lt;heading&gt;通知&lt;/heading&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">​\t&lt;body&gt;晚上开会&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/node&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h3><p>本质：字符串</p>\n<h4 id=\"两种结构\"><a href=\"#两种结构\" class=\"headerlink\" title=\"两种结构\"></a>两种结构</h4><p>对象结构：对象结构用{}括起来，{key:value,key:value}的键值对结构。其中，key必须使用英文的双引号包裹的字符串，value的数据类型可以是数字、字符串、布尔值、null、数组、对象六种类型</p>\n<p>不允许出现undefined和function</p>\n<p>数组结构：数据结构在接送中表示为[]括起来的内容，数据结构为[“”,””,””]数组中的数据类型可以是数字、字符串、布尔值、null、数组、对象六种类型</p>\n<p>注：json中不能写注释，不允许使用单引号来表示字符串</p>\n<h2 id=\"JSON和js对象的互相转换\"><a href=\"#JSON和js对象的互相转换\" class=\"headerlink\" title=\"JSON和js对象的互相转换\"></a>JSON和js对象的互相转换</h2><p>1、实现json转换为js，用 JSON.parse()方法</p>\n<p>2、实现js转换为json，用 JSON.stringify()方法</p>\n<h2 id=\"xhr新功能\"><a href=\"#xhr新功能\" class=\"headerlink\" title=\"xhr新功能\"></a>xhr新功能</h2><p>1、可以设置http请求的时限</p>\n<p>xhr.timeout = xxx (单位是毫秒)</p>\n<p>timeout事件</p>\n<p>xhr.ontimeout = function(event){</p>\n<p>函数体</p>\n<p>}</p>\n<p>2、可以使用FormData对象管理表单数据</p>\n<p>(1)模拟表单操作，提交数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fd = <span class=\"keyword\">new</span> <span class=\"title class_\">FormData</span>();</span><br><span class=\"line\">        fd.<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;uname&#x27;</span>,<span class=\"string\">&#x27;haoye&#x27;</span>);</span><br><span class=\"line\">        fd.<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;pwd&#x27;</span>,<span class=\"string\">&#x27;buhaole&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">        xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;POST&#x27;</span>,<span class=\"string\">&#x27;http://www.liulongbin.top:3006/api/formdata&#x27;</span>);</span><br><span class=\"line\">        xhr.<span class=\"title function_\">send</span>(fd);</span><br><span class=\"line\"></span><br><span class=\"line\">        xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span> &amp;&amp; xhr.<span class=\"property\">status</span> === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(xhr.<span class=\"property\">responseText</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>(2)也可以用来获取网页表单的值</p>\n<p>详见37.html</p>\n<p>3、可以上传文件</p>\n<p>步骤：</p>\n<p>（1）定义UI结构</p>\n<p><img src=\"/../image/pic08.png\"></p>\n<p>（2）验证是否选择了文件</p>\n<p><img src=\"/../image/pic09.png\"></p>\n<p>（3）向formdata追加文件</p>\n<p><img src=\"/../image/pic10.png\"></p>\n<p>（4）发请求并监听</p>\n<p><img src=\"/../image/pic11.png\"></p>\n<p>4、可以获得数据传输的进度信息</p>\n<p><img src=\"/../image/pic12.png\"></p>\n<h1 id=\"axios\"><a href=\"#axios\" class=\"headerlink\" title=\"axios\"></a>axios</h1><h2 id=\"使用axios发起get请求\"><a href=\"#使用axios发起get请求\" class=\"headerlink\" title=\"使用axios发起get请求\"></a>使用axios发起get请求</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#btn1&#x27;</span>);</span><br><span class=\"line\">btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">&#x27;http://www.liulongbin.top:3006/api/get&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;zhanhu&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">20</span>&#125;;</span><br><span class=\"line\">axios.<span class=\"title function_\">get</span>(url,&#123;<span class=\"attr\">params</span>:data&#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">res</span>)&#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res.<span class=\"property\">data</span>);</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"使用axios发起post请求\"><a href=\"#使用axios发起post请求\" class=\"headerlink\" title=\"使用axios发起post请求\"></a>使用axios发起post请求</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#btn2&#x27;</span>);</span><br><span class=\"line\">btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">&#x27;http://www.liulongbin.top:3006/api/post&#x27;</span>;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> data = &#123;<span class=\"attr\">address</span>:<span class=\"string\">&#x27;北京&#x27;</span>,<span class=\"attr\">location</span>:<span class=\"string\">&#x27;朝阳区&#x27;</span>&#125;;</span><br><span class=\"line\">axios.<span class=\"title function_\">post</span>(url,data).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">res</span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res.<span class=\"property\">data</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"直接使用axios发起请求\"><a href=\"#直接使用axios发起请求\" class=\"headerlink\" title=\"直接使用axios发起请求\"></a>直接使用axios发起请求</h2><p>详见41.html</p>\n<p>只要调用某个方法的返回值是Promise示例，则前面可以添加await</p>\n<p>await只能用在被async修饰的方法中</p>\n<p><img src=\"/../image/pic13.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ajax\"><a href=\"#ajax\" class=\"headerlink\" title=\"ajax\"></a>ajax</h1><p>网页请求数据的方法： var xhrObj = new XMLHttpRequest()</p>\n<p>最常见的两种请求方式 get和post请求</p>\n<p>get请求通常用于获取服务端资源（向服务器要资源）</p>\n<p>例如：根据URL地址，从服务器获取HTML文件，css文件，js文件，图片文件，数据资源等</p>\n<p>post请求常用于向服务器提交数据（往服务器发送资源）</p>\n<p>例如：登录时向服务器提交的登录信息，注册时向服务器提交的注册信息，添加用户时向服务器提交的用户信息等各种数据提交操作</p>\n<h2 id=\"jq中发起ajax请求的3个方法\"><a href=\"#jq中发起ajax请求的3个方法\" class=\"headerlink\" title=\"jq中发起ajax请求的3个方法\"></a>jq中发起ajax请求的3个方法</h2><p>$.get() 向服务器获取数据</p>\n<p>$.post()  向服务器提交数据</p>\n<p>$.ajax() 既可以向服务器获取数据又可以向服务器提交数据</p>\n<h3 id=\"get-发起不带参数的请求\"><a href=\"#get-发起不带参数的请求\" class=\"headerlink\" title=\"$.get()发起不带参数的请求\"></a>$.get()发起不带参数的请求</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.get(url,[data],[callback])</span><br></pre></td></tr></table></figure>\n<p><img src=\"/../image/pic01.png\"></p>\n<p>直接提供请求的url地址和请求成功的回调函数即可</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这个代码的意思就是点击按钮就发起请求</span></span><br><span class=\"line\">$(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            $(<span class=\"string\">&#x27;.btnGet&#x27;</span>).<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                $.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">res</span>)&#123;</span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>看结果在F12那边点network，切换为Feach/XHR就能看见请求结果</p>\n<h3 id=\"get-发起带参数的请求\"><a href=\"#get-发起带参数的请求\" class=\"headerlink\" title=\"$.get()发起带参数的请求\"></a>$.get()发起带参数的请求</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            $(<span class=\"string\">&#x27;.btnGet&#x27;</span>).<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">                $.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>,&#123;<span class=\"attr\">id</span>:<span class=\"number\">1</span>&#125;,<span class=\"keyword\">function</span>(<span class=\"params\">res</span>)&#123;</span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"post-向服务器提交数据\"><a href=\"#post-向服务器提交数据\" class=\"headerlink\" title=\"$.post()向服务器提交数据\"></a>$.post()向服务器提交数据</h3><p><code>$.post(url,[data],[callback])</code></p>\n<p><img src=\"/../image/pic02.png\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;.submit&#x27;</span>).<span class=\"title function_\">on</span>(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            $.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;</span>,&#123;<span class=\"attr\">bookname</span>:<span class=\"string\">&quot;海底两万里&quot;</span>,<span class=\"attr\">author</span>:<span class=\"string\">&quot;凡尔纳&quot;</span>,<span class=\"attr\">publisher</span>:<span class=\"string\">&quot;长江文艺出版社&quot;</span>&#125;,<span class=\"keyword\">function</span>(<span class=\"params\">res</span>)&#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>ajax 发请求</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% raw %&#125;</span><br><span class=\"line\">    $.<span class=\"title function_\">ajax</span>(<span class=\"params\">&#123;</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        type: <span class=\"string\">&#x27; &#x27;</span>,    //请求的方式，例如GET或者POST(大写啊！！！)</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        url: <span class=\"string\">&#x27; &#x27;</span>,      //请求的url地址</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        data: &#123; &#125;,   //这次请求要携带的数据</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">        success:<span class=\"keyword\">function</span>(res)&#123; &#125;      //请求成功之后的回调函数</span></span><br><span class=\"line\"><span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    &#125;</span>)</span><br><span class=\"line\">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>\n<p>如果你不需要携带参数，那么那个data就可以省略不写了，指的是整个都不要</p>\n<h1 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h1><p>用于发送用户请求的</p>\n<h2 id=\"表单的组成部分\"><a href=\"#表单的组成部分\" class=\"headerlink\" title=\"表单的组成部分\"></a>表单的组成部分</h2><p>由三部分组成</p>\n<p>1、表单标签 <code>&lt;form&gt; &lt;/form&gt;</code></p>\n<p>2、表单域 就是那些input框</p>\n<p>包含了文本框，密码框，隐藏框，多行文本框，复选框，单选框，下拉选择框和文件上传框等。</p>\n<p>3、表单按钮</p>\n<h2 id=\"form标签的属性\"><a href=\"#form标签的属性\" class=\"headerlink\" title=\"form标签的属性\"></a>form标签的属性</h2><p><img src=\"/../image/pic03.png\"></p>\n<h3 id=\"action\"><a href=\"#action\" class=\"headerlink\" title=\"action\"></a>action</h3><p>action属性用来规定当提交表单时，向何处发送表单数据</p>\n<p>当form表单在未指定action属性值的情况下，action的默认值为当前页面的url地址</p>\n<p>当表单提交后，页面会立即跳转到指定的url地址</p>\n<h3 id=\"target\"><a href=\"#target\" class=\"headerlink\" title=\"target\"></a>target</h3><p>target属性规定在何处打开action url</p>\n<p>他的可选参数有5个，默认情况下，target的值是_self</p>\n<p><img src=\"/../image/pic04.png\"></p>\n<h3 id=\"method\"><a href=\"#method\" class=\"headerlink\" title=\"method\"></a>method</h3><p>method属性用来规定是以get方式还是post方式提交到action url</p>\n<p>默认情况下，method值为get，表示通过url的形式提交数据，就是说你的数据会显示在url里面，然后post是通过F12看才能看见的，比较隐秘，一般用这个方式进行数据提交</p>\n<p>get方式适合用来提交少量的，简单的数据</p>\n<p>post方式适合用来提交大量的，复杂的，或包含文件上传的数据</p>\n<h3 id=\"enctype\"><a href=\"#enctype\" class=\"headerlink\" title=\"enctype\"></a>enctype</h3><p><img src=\"/../image/pic05.png\"></p>\n<p>不涉及文件上传用默认值就行</p>\n<h2 id=\"通过ajax提交表单数据\"><a href=\"#通过ajax提交表单数据\" class=\"headerlink\" title=\"通过ajax提交表单数据\"></a>通过ajax提交表单数据</h2><h3 id=\"监听表单提交事件\"><a href=\"#监听表单提交事件\" class=\"headerlink\" title=\"监听表单提交事件\"></a>监听表单提交事件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&#x27;#form1&#x27;).submit(function(e)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">alert(&#x27;叭叭叭&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">法2：</span><br><span class=\"line\"></span><br><span class=\"line\">$(&#x27;form1&#x27;).on(&#x27;submit&#x27;,function()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">alert(&#x27;巴拉啊&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"阻止表单默认提交行为\"><a href=\"#阻止表单默认提交行为\" class=\"headerlink\" title=\"阻止表单默认提交行为\"></a>阻止表单默认提交行为</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&#x27;#form1&#x27;).submit(function(e)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">e.preventDefault();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">$(&#x27;form1&#x27;).on(&#x27;submit&#x27;,function(e)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">e.preventDefault();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"快速获取表单中的数据\"><a href=\"#快速获取表单中的数据\" class=\"headerlink\" title=\"快速获取表单中的数据\"></a>快速获取表单中的数据</h3><p>serializa()函数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(具体选择器).serilize()</span><br></pre></td></tr></table></figure>\n<p>好处：可以一次性获取所有表单的数据</p>\n<p>注意：在使用这个方法时，必须为每个表单元素添加name属性</p>\n<h1 id=\"xhr\"><a href=\"#xhr\" class=\"headerlink\" title=\"xhr\"></a>xhr</h1><h2 id=\"基于xhr发起get请求\"><a href=\"#基于xhr发起get请求\" class=\"headerlink\" title=\"基于xhr发起get请求\"></a>基于xhr发起get请求</h2><p><img src=\"/../image/pic06.png\"></p>\n<p>如果需要传递参数，则在open的路径后面?参数名=参数值</p>\n<h2 id=\"url编码和解码\"><a href=\"#url编码和解码\" class=\"headerlink\" title=\"url编码和解码\"></a>url编码和解码</h2><p>encodeURI() 编码的函数，就是中文变成三个%英文</p>\n<p>decodeURI() 解码的函数，就是英文变成中文</p>\n<h2 id=\"使用xhr发起post请求\"><a href=\"#使用xhr发起post请求\" class=\"headerlink\" title=\"使用xhr发起post请求\"></a>使用xhr发起post请求</h2><p><img src=\"/../image/pic07.png\"></p>\n<h2 id=\"数据交换格式\"><a href=\"#数据交换格式\" class=\"headerlink\" title=\"数据交换格式\"></a>数据交换格式</h2><h3 id=\"XML\"><a href=\"#XML\" class=\"headerlink\" title=\"XML\"></a>XML</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;note&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">​\t&lt;to&gt;ls&lt;/to&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">​\t&lt;from&gt;zs&lt;/from&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">​\t&lt;heading&gt;通知&lt;/heading&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">​\t&lt;body&gt;晚上开会&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/node&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h3><p>本质：字符串</p>\n<h4 id=\"两种结构\"><a href=\"#两种结构\" class=\"headerlink\" title=\"两种结构\"></a>两种结构</h4><p>对象结构：对象结构用{}括起来，{key:value,key:value}的键值对结构。其中，key必须使用英文的双引号包裹的字符串，value的数据类型可以是数字、字符串、布尔值、null、数组、对象六种类型</p>\n<p>不允许出现undefined和function</p>\n<p>数组结构：数据结构在接送中表示为[]括起来的内容，数据结构为[“”,””,””]数组中的数据类型可以是数字、字符串、布尔值、null、数组、对象六种类型</p>\n<p>注：json中不能写注释，不允许使用单引号来表示字符串</p>\n<h2 id=\"JSON和js对象的互相转换\"><a href=\"#JSON和js对象的互相转换\" class=\"headerlink\" title=\"JSON和js对象的互相转换\"></a>JSON和js对象的互相转换</h2><p>1、实现json转换为js，用 JSON.parse()方法</p>\n<p>2、实现js转换为json，用 JSON.stringify()方法</p>\n<h2 id=\"xhr新功能\"><a href=\"#xhr新功能\" class=\"headerlink\" title=\"xhr新功能\"></a>xhr新功能</h2><p>1、可以设置http请求的时限</p>\n<p>xhr.timeout = xxx (单位是毫秒)</p>\n<p>timeout事件</p>\n<p>xhr.ontimeout = function(event){</p>\n<p>函数体</p>\n<p>}</p>\n<p>2、可以使用FormData对象管理表单数据</p>\n<p>(1)模拟表单操作，提交数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fd = <span class=\"keyword\">new</span> <span class=\"title class_\">FormData</span>();</span><br><span class=\"line\">        fd.<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;uname&#x27;</span>,<span class=\"string\">&#x27;haoye&#x27;</span>);</span><br><span class=\"line\">        fd.<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;pwd&#x27;</span>,<span class=\"string\">&#x27;buhaole&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">        xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;POST&#x27;</span>,<span class=\"string\">&#x27;http://www.liulongbin.top:3006/api/formdata&#x27;</span>);</span><br><span class=\"line\">        xhr.<span class=\"title function_\">send</span>(fd);</span><br><span class=\"line\"></span><br><span class=\"line\">        xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(xhr.<span class=\"property\">readyState</span> === <span class=\"number\">4</span> &amp;&amp; xhr.<span class=\"property\">status</span> === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(xhr.<span class=\"property\">responseText</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>(2)也可以用来获取网页表单的值</p>\n<p>详见37.html</p>\n<p>3、可以上传文件</p>\n<p>步骤：</p>\n<p>（1）定义UI结构</p>\n<p><img src=\"/../image/pic08.png\"></p>\n<p>（2）验证是否选择了文件</p>\n<p><img src=\"/../image/pic09.png\"></p>\n<p>（3）向formdata追加文件</p>\n<p><img src=\"/../image/pic10.png\"></p>\n<p>（4）发请求并监听</p>\n<p><img src=\"/../image/pic11.png\"></p>\n<p>4、可以获得数据传输的进度信息</p>\n<p><img src=\"/../image/pic12.png\"></p>\n<h1 id=\"axios\"><a href=\"#axios\" class=\"headerlink\" title=\"axios\"></a>axios</h1><h2 id=\"使用axios发起get请求\"><a href=\"#使用axios发起get请求\" class=\"headerlink\" title=\"使用axios发起get请求\"></a>使用axios发起get请求</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#btn1&#x27;</span>);</span><br><span class=\"line\">btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">&#x27;http://www.liulongbin.top:3006/api/get&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;zhanhu&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"number\">20</span>&#125;;</span><br><span class=\"line\">axios.<span class=\"title function_\">get</span>(url,&#123;<span class=\"attr\">params</span>:data&#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">res</span>)&#123;</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res.<span class=\"property\">data</span>);</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"使用axios发起post请求\"><a href=\"#使用axios发起post请求\" class=\"headerlink\" title=\"使用axios发起post请求\"></a>使用axios发起post请求</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#btn2&#x27;</span>);</span><br><span class=\"line\">btn.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">&#x27;http://www.liulongbin.top:3006/api/post&#x27;</span>;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> data = &#123;<span class=\"attr\">address</span>:<span class=\"string\">&#x27;北京&#x27;</span>,<span class=\"attr\">location</span>:<span class=\"string\">&#x27;朝阳区&#x27;</span>&#125;;</span><br><span class=\"line\">axios.<span class=\"title function_\">post</span>(url,data).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\">res</span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res.<span class=\"property\">data</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"直接使用axios发起请求\"><a href=\"#直接使用axios发起请求\" class=\"headerlink\" title=\"直接使用axios发起请求\"></a>直接使用axios发起请求</h2><p>详见41.html</p>\n<p>只要调用某个方法的返回值是Promise示例，则前面可以添加await</p>\n<p>await只能用在被async修饰的方法中</p>\n<p><img src=\"/../image/pic13.png\"></p>\n"},{"title":"error  Newline required at end of file but not found  eol-last的解决方案","date":"2022-09-03T07:52:09.000Z","top_img":"../image/无风险06.jpg","cover":"../image/无风险06.jpg","description":"有关eslint报错信息及其解决方案","_content":"\n今天在做项目的时候开了eslint，删掉初始化的欢迎界面后报了个错\n**error  Newline required at end of file but not found  eol-last**\n这个错误信息的意思就是在文件的末尾需要空一行\n所以只需要在他报错的文件的最后面敲个回车键空上一行就可以了\n同时，再解决这个问题的时候发现了网上有人发了另一种解决方法，在此表示亲测无效，还是照样报错！！！\n他的解决方案是这样的：\n1、把项目中有个配置文件.editorconfig，insert_final_newline=true改成false\n2、.eslintrc.js中取消最后该规则的校验'eol-last': 0","source":"_posts/error-Newline-required-at-end-of-file-but-not-found-eol-last的解决方案.md","raw":"---\ntitle: error  Newline required at end of file but not found  eol-last的解决方案\ndate: 2022-09-03 15:52:09\ntags: \n  - 经验\n  - vue2\n  - eslint\n  - 前端\ncategories: 经验\ntop_img: \"../image/无风险06.jpg\"\ncover: \"../image/无风险06.jpg\"\ndescription: 有关eslint报错信息及其解决方案\n---\n\n今天在做项目的时候开了eslint，删掉初始化的欢迎界面后报了个错\n**error  Newline required at end of file but not found  eol-last**\n这个错误信息的意思就是在文件的末尾需要空一行\n所以只需要在他报错的文件的最后面敲个回车键空上一行就可以了\n同时，再解决这个问题的时候发现了网上有人发了另一种解决方法，在此表示亲测无效，还是照样报错！！！\n他的解决方案是这样的：\n1、把项目中有个配置文件.editorconfig，insert_final_newline=true改成false\n2、.eslintrc.js中取消最后该规则的校验'eol-last': 0","slug":"error-Newline-required-at-end-of-file-but-not-found-eol-last的解决方案","published":1,"updated":"2022-10-04T12:50:27.250Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyn4schv0009ecvzd2467c7g","content":"<p>今天在做项目的时候开了eslint，删掉初始化的欢迎界面后报了个错<br><strong>error  Newline required at end of file but not found  eol-last</strong><br>这个错误信息的意思就是在文件的末尾需要空一行<br>所以只需要在他报错的文件的最后面敲个回车键空上一行就可以了<br>同时，再解决这个问题的时候发现了网上有人发了另一种解决方法，在此表示亲测无效，还是照样报错！！！<br>他的解决方案是这样的：<br>1、把项目中有个配置文件.editorconfig，insert_final_newline=true改成false<br>2、.eslintrc.js中取消最后该规则的校验’eol-last’: 0</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天在做项目的时候开了eslint，删掉初始化的欢迎界面后报了个错<br><strong>error  Newline required at end of file but not found  eol-last</strong><br>这个错误信息的意思就是在文件的末尾需要空一行<br>所以只需要在他报错的文件的最后面敲个回车键空上一行就可以了<br>同时，再解决这个问题的时候发现了网上有人发了另一种解决方法，在此表示亲测无效，还是照样报错！！！<br>他的解决方案是这样的：<br>1、把项目中有个配置文件.editorconfig，insert_final_newline=true改成false<br>2、.eslintrc.js中取消最后该规则的校验’eol-last’: 0</p>\n"},{"title":"git学习笔记","date":"2022-08-30T07:29:37.000Z","label":"这是一篇关于git的知识点总结","top_img":"../image/无风险07.jpg","cover":"../image/无风险07.jpg","description":"这是一篇关于git的知识点总结","_content":"\n# git\n\n## git bash窗口两种方法快速粘贴\n\n第一种方法：\n\n  右键 -> 点击 Paste。即可粘贴已复制的内容\n\n第二种方法：点击鼠标中间的滚轮。\n\n## 配置用户信息\n```\ngit config --global user.name \"zhanhu\"\n\ngit config --global user.email \"邮箱地址\"\n```\n用了global选项，只需要运行一次，永久生效\n\n## 检查配置信息\n\n查看所有的全局配置项\n```\ngit config --list --global\n```\n查看指定的全局配置项\n```\ngit config user.name\n\ngit config user.email\n```\n## 获取帮助信息\n```\ngit help 命令名\n```\n这个命令是在无需联网状态下就可以在浏览器打开帮助手册\n\n如果不想要查看完整的手册，可以用-h选项在终端里面获得帮助\n```\ngit 命令名 -h\n```\n## 获取git仓库的两种方式\n\n1、将尚未进行版本控制的本地目录转换为git仓库\n\n步骤：（1）在项目目录中，通过鼠标右键打开git bash\n\n（2）执行git init命令将当前的目录转化为git仓库\n\n这时你可以在里面看见一个.git的隐藏目录，如果你发现没有，俺么点击上面的查看，勾选显示隐藏目录选项即可\n\n2、从其他服务器克隆一个已存在的git仓库\n\n## 检查文件的状态\n\n可以使用 git status命令查看文件处于什么状态\n\n以精简的方式显示文件状态：\n```\ngit status -s\n\n或者\n\ngit status --short\n```\n这时，未跟踪文件前面会有红色的？？标记\n\n新添加到暂存区的文件前面有绿色的A标记\n\n修改过的，没有放入暂存区的文件前面有红色的M标记\n\n绿色大写的D表示该文件已被移除\n\n## 跟踪新文件\n```\ngit add 文件名\n```\n## 提交更新\n```\ngit comit -m \"新建了一个index.html文件\"\n```\n-m后面那个是本次的提交信息，用来对提交的内容做进一步的描述\n\n## 对已提交的文件进行修改\n\n如果你修改了原来已经提交了的文件的内容，那么他的文件状态就会变成modified。\n\n## 暂存已修改的文件\n\n如果要暂存修改，需要再次运行git add 命令，这个命令是个多功能的命令，这个命令主要有3个功效：1、可以用它开始跟踪新文件\n\n2、把已跟踪的，且已修改的文件放到暂存区\n\n3、把有冲突的文件标记为已解决的状态\n\n## 提交已暂存的文件\n\n再次运行``` git commit -m \"提交消息\"```命令，就可以将暂存区中记录的index.html的快照，提交到git仓库进行保存\n\n## 撤销对文件的修改\n\n把对工作区中对应文件的修改，还原成git仓库中所保存的版本\n\n操作的结果：所有的修改会丢失，且无法恢复，危险性比较高，请慎重操作\n\n```git checkout -- 要撤销的文件名```\n\n撤销操作的本质：用git仓库中保存的文件，覆盖工作区指定的文件\n\n## 向暂存区中一次性添加多个文件\n```\nget add .   \n```\n注意那个.是英文的\n\n这个很常用\n\n## 取消暂存的文件\n```\ngit reset HEAD 要移除的文件名称\n```\n如果要把所有的都移除，那么就是```git reset HEAD . ```\n\n## 跳过使用暂存区\n\ngit标准的工作流程：工作区——暂存区——git仓库，跳过之后变成\n\n工作区——git仓库\n\n方法是只要在提交的时候，给git commit加上-a选项，就会自动把已经跟踪过的文件暂存起来一并提交\n```\ngit commit -a -m \"描述信息\"\n```\n## 移除文件\n\n从git仓库中移除文件的方式有两种：\n\n1、从git仓库和工作区中同时移除对应的文件\n```\ngit rm -f 文件名\n```\n2、只从git仓库中移除指定的文件，但保留工作区中对应的文件\n```\ngit rm --cached 文件名\n```\n## git忽略文件\n\n一般我们总会有些文件无需纳入git的管理，也不希望他们总出现在未跟踪文件列表，在这种情况下，我们可以创建一个名为.gitignore的配置文件，列出要忽略的文件的匹配模式\n\n格式规范如下\n\n以#开头的是注释\n\n以/结尾的是目录\n\n以/开头防止递归\n\n以！开头表示取反\n\n可以使用glob模式进行文件和文件夹的匹配（glob指简化了的正则表达式）\n\nglob模式：\n\n*匹配零个或多个任意字符\n\n[abc]匹配任何一个列在方括号中的字符\n\n？只匹配一个任意字符\n\n在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如[0-9]表示匹配所有0-9的数字）\n\n**表示匹配任意中间字符（比如a/ * */z可以匹配a/z\\a/b/z或者a/b/c/z等）\n\n## 查看提交历史\n```\ngit log\n```\n按时间先后顺序列出所有的提交历史，最近的提交排在最上面\n```\ngit log -2\n```\n只显示最新的两条提交历史，数字可以按需进行填写\n```\ngit log -2 --pretty=oneline\n```\n在一行上展示最近两条提交的历史，并自定义输出的格式\n\n%h 提交的简写哈希值 %an 作者名字 %ar 作者修订时间，按多久以前的方式显示  %s 提交说明 |自定义分隔符，写什么符号都可以\n```\ngit log -2 --pretty=format:\"%h |%an | %ar | %s\"\n```\n## 回退到指定的版本\n\n在一行上展示所有的提交历史\n```\ngit log -2 --pretty=oneline\n```\n使用git reet --hard 命令，根据指定的提交ID回退到指定的版本\n```\ngit reset --hard <CommitID> 其中这里面的id可以复制粘贴上面历史显示出来的\n```\n在旧版本中使用 ```git reflog --pretty=oneline```命令，查看命令操作的历史\n```\ngit reflog --pretty=oneline\n```\n再次根据最新的提交ID，跳转到最新的版本\n```\ngit reset --hard <CommitID>\n```\n# github\n\n## 创建空白远程仓库\n\n比如在github中，先点击右上角的+号新建一个仓库，然后填入仓库名称和仓库描述，点击创建即可\n\n## 远程仓库的两种访问方式\n\nHTTPS：零配置，但是每次访问仓库时，需要重复输入github账号和密码才能访问成功\n\nSSH：需要进行额外的配置，但是配置成功之后，每次访问仓库时，不需要重复输入github的账号和密码\n\n在实际开发中，推荐ssh的方式访问仓库\n\n## 基于https将本地仓库上传到github\n\n1、本地没有现成的Git仓库\n```\ngit init\ngit commit -m \"提交描述\"\ngit remote add origin github上面仓库的地址\ngit push -u origin master\n```\n2、本地现有Git仓库\n直接执行上述的倒数2个语句即可\n\n首先在github里面点击https方式，然后在电脑本地的那个项目里面打开git bash here，然后把下面的对应命令一行一行粘贴进去运行就可以了\n\n## 修改了本地项目的文件后怎么将最新版本上传到github\n\n首先，先在本地项目里面打开 git bash，然后依次输入命令\n\ngit status -s  发现他的红色的？？\n\ngit add .\n\ngit status -s 发现他的绿色的A\n\ngit commit -m \"新增了巴拉巴拉\"\n\n然后运行 git push命令就可以了\n\n## 配置ssh并将远程仓库克隆到本地\n\n打开git bash\n\n输入以下命令，邮箱要写成注册github的邮箱\n\nssh-keygen -t rsa -b 4096 -C \"github的邮箱\"\n\n连续敲击3次回车\n\n会存在自己c盘，用户，asua，里面的.ssh文件\n\n我们需要把里面pub结尾的那个文件里面的内容配置到github里面\n\n使用记事本打开这个pub结尾的文件，复制里面的文本内容\n\n在github里面点击头像，settings，ssh and GPG Keys new SSH key\n\n将刚刚文件中的内容，粘贴到key对应的文本框中\n\n在title文本框里任意填写一个名称，用来标识这个key从何而来\n\n## 检测github里面的ssh key是否配置成功\n\n打开git bash ，输入如下的命令并回车执行\n\nssh -T git@github.com\n\n输入yes之后如果能看见自己的用户名和successfully说明配置成功了\n\n## 使用ssh的方式将项目上传到github\n\n首先在当前项目的根目录中打开 git bash\n\ngit init\n\ngit status -s\n\ngit add .\n\ngit status -s\n\ngit commit -m \"初始化项目\"\n\n创建一个新的空白仓库\n\n运行里面提示的3行代码\n\n运行完刷新就能看见上传成功了\n\n## 将远程仓库克隆到本地\n\n打开git bash,输入以下命令并执行\n\ngit clone 远程仓库的地址\n\n## 查看分支列表\n\ngit branch\n\n可以看见当前git仓库中所有的分支列表，*表示当前所处的分支\n\n## 创建新分支\n\ngit branch 分支名称\n\n使用这个命令，可以基于当前分支，创建一个新的分支，此时，新分支中的代码和当前分支完全一样\n\n注意：执行完创建分支的命令之后，用户当前所处的位置还是master分支\n\n## 切换分支\n\ngit checkout 新分支名\n\n## 快速创建并切换分支\n\ngit checkout -b 新分支名称\n\n## 合并分支\n\n功能分支的代码开发并测试完毕后，使用以下命令，将完成后的代码合并到master分支上\n\ngit add .\n\ngit commit -m \"描述\"\n\ngit checked master\n\ngit merge 要合并的分支名\n\n注意合并的方式：比如你要把C分支的代码合并到A分支，那么你就必须先切换到A分支，在运行merge命令来合并C分支\n\n## 如何在功能分支上进行代码开发\n\n这个只需要在git bash里面把当前的分支切换成对应的功能分支，这时，本地的代码就会变成对应功能分支里面的代码，然后你用vscode打开并进行开发即可。\n\n## 删除分支\n\n当把功能分支的代码合并到master主分支上以后，就可以使用如下的命令，删除对应的分支：\n\ngit branch -d 分支名称\n\n注意：比如我要删除A分支，那么我不能处于A分支上面\n\n## 遇到冲突时的分支合并\n\n如果在两个不同的分支中，对同一个文件进行了不同的修改，git就没办法干净的合并他们，此时，我们需要打开这些包含冲突的文件然后手动解决冲突","source":"_posts/git学习笔记.md","raw":"---\ntitle: git学习笔记\ndate: 2022-08-30 15:29:37\ntags: \n  - 学习笔记\n  - git\ncategories: 学习笔记\nlabel: 这是一篇关于git的知识点总结\ntop_img: \"../image/无风险07.jpg\"\ncover: \"../image/无风险07.jpg\"\ndescription: 这是一篇关于git的知识点总结\n---\n\n# git\n\n## git bash窗口两种方法快速粘贴\n\n第一种方法：\n\n  右键 -> 点击 Paste。即可粘贴已复制的内容\n\n第二种方法：点击鼠标中间的滚轮。\n\n## 配置用户信息\n```\ngit config --global user.name \"zhanhu\"\n\ngit config --global user.email \"邮箱地址\"\n```\n用了global选项，只需要运行一次，永久生效\n\n## 检查配置信息\n\n查看所有的全局配置项\n```\ngit config --list --global\n```\n查看指定的全局配置项\n```\ngit config user.name\n\ngit config user.email\n```\n## 获取帮助信息\n```\ngit help 命令名\n```\n这个命令是在无需联网状态下就可以在浏览器打开帮助手册\n\n如果不想要查看完整的手册，可以用-h选项在终端里面获得帮助\n```\ngit 命令名 -h\n```\n## 获取git仓库的两种方式\n\n1、将尚未进行版本控制的本地目录转换为git仓库\n\n步骤：（1）在项目目录中，通过鼠标右键打开git bash\n\n（2）执行git init命令将当前的目录转化为git仓库\n\n这时你可以在里面看见一个.git的隐藏目录，如果你发现没有，俺么点击上面的查看，勾选显示隐藏目录选项即可\n\n2、从其他服务器克隆一个已存在的git仓库\n\n## 检查文件的状态\n\n可以使用 git status命令查看文件处于什么状态\n\n以精简的方式显示文件状态：\n```\ngit status -s\n\n或者\n\ngit status --short\n```\n这时，未跟踪文件前面会有红色的？？标记\n\n新添加到暂存区的文件前面有绿色的A标记\n\n修改过的，没有放入暂存区的文件前面有红色的M标记\n\n绿色大写的D表示该文件已被移除\n\n## 跟踪新文件\n```\ngit add 文件名\n```\n## 提交更新\n```\ngit comit -m \"新建了一个index.html文件\"\n```\n-m后面那个是本次的提交信息，用来对提交的内容做进一步的描述\n\n## 对已提交的文件进行修改\n\n如果你修改了原来已经提交了的文件的内容，那么他的文件状态就会变成modified。\n\n## 暂存已修改的文件\n\n如果要暂存修改，需要再次运行git add 命令，这个命令是个多功能的命令，这个命令主要有3个功效：1、可以用它开始跟踪新文件\n\n2、把已跟踪的，且已修改的文件放到暂存区\n\n3、把有冲突的文件标记为已解决的状态\n\n## 提交已暂存的文件\n\n再次运行``` git commit -m \"提交消息\"```命令，就可以将暂存区中记录的index.html的快照，提交到git仓库进行保存\n\n## 撤销对文件的修改\n\n把对工作区中对应文件的修改，还原成git仓库中所保存的版本\n\n操作的结果：所有的修改会丢失，且无法恢复，危险性比较高，请慎重操作\n\n```git checkout -- 要撤销的文件名```\n\n撤销操作的本质：用git仓库中保存的文件，覆盖工作区指定的文件\n\n## 向暂存区中一次性添加多个文件\n```\nget add .   \n```\n注意那个.是英文的\n\n这个很常用\n\n## 取消暂存的文件\n```\ngit reset HEAD 要移除的文件名称\n```\n如果要把所有的都移除，那么就是```git reset HEAD . ```\n\n## 跳过使用暂存区\n\ngit标准的工作流程：工作区——暂存区——git仓库，跳过之后变成\n\n工作区——git仓库\n\n方法是只要在提交的时候，给git commit加上-a选项，就会自动把已经跟踪过的文件暂存起来一并提交\n```\ngit commit -a -m \"描述信息\"\n```\n## 移除文件\n\n从git仓库中移除文件的方式有两种：\n\n1、从git仓库和工作区中同时移除对应的文件\n```\ngit rm -f 文件名\n```\n2、只从git仓库中移除指定的文件，但保留工作区中对应的文件\n```\ngit rm --cached 文件名\n```\n## git忽略文件\n\n一般我们总会有些文件无需纳入git的管理，也不希望他们总出现在未跟踪文件列表，在这种情况下，我们可以创建一个名为.gitignore的配置文件，列出要忽略的文件的匹配模式\n\n格式规范如下\n\n以#开头的是注释\n\n以/结尾的是目录\n\n以/开头防止递归\n\n以！开头表示取反\n\n可以使用glob模式进行文件和文件夹的匹配（glob指简化了的正则表达式）\n\nglob模式：\n\n*匹配零个或多个任意字符\n\n[abc]匹配任何一个列在方括号中的字符\n\n？只匹配一个任意字符\n\n在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如[0-9]表示匹配所有0-9的数字）\n\n**表示匹配任意中间字符（比如a/ * */z可以匹配a/z\\a/b/z或者a/b/c/z等）\n\n## 查看提交历史\n```\ngit log\n```\n按时间先后顺序列出所有的提交历史，最近的提交排在最上面\n```\ngit log -2\n```\n只显示最新的两条提交历史，数字可以按需进行填写\n```\ngit log -2 --pretty=oneline\n```\n在一行上展示最近两条提交的历史，并自定义输出的格式\n\n%h 提交的简写哈希值 %an 作者名字 %ar 作者修订时间，按多久以前的方式显示  %s 提交说明 |自定义分隔符，写什么符号都可以\n```\ngit log -2 --pretty=format:\"%h |%an | %ar | %s\"\n```\n## 回退到指定的版本\n\n在一行上展示所有的提交历史\n```\ngit log -2 --pretty=oneline\n```\n使用git reet --hard 命令，根据指定的提交ID回退到指定的版本\n```\ngit reset --hard <CommitID> 其中这里面的id可以复制粘贴上面历史显示出来的\n```\n在旧版本中使用 ```git reflog --pretty=oneline```命令，查看命令操作的历史\n```\ngit reflog --pretty=oneline\n```\n再次根据最新的提交ID，跳转到最新的版本\n```\ngit reset --hard <CommitID>\n```\n# github\n\n## 创建空白远程仓库\n\n比如在github中，先点击右上角的+号新建一个仓库，然后填入仓库名称和仓库描述，点击创建即可\n\n## 远程仓库的两种访问方式\n\nHTTPS：零配置，但是每次访问仓库时，需要重复输入github账号和密码才能访问成功\n\nSSH：需要进行额外的配置，但是配置成功之后，每次访问仓库时，不需要重复输入github的账号和密码\n\n在实际开发中，推荐ssh的方式访问仓库\n\n## 基于https将本地仓库上传到github\n\n1、本地没有现成的Git仓库\n```\ngit init\ngit commit -m \"提交描述\"\ngit remote add origin github上面仓库的地址\ngit push -u origin master\n```\n2、本地现有Git仓库\n直接执行上述的倒数2个语句即可\n\n首先在github里面点击https方式，然后在电脑本地的那个项目里面打开git bash here，然后把下面的对应命令一行一行粘贴进去运行就可以了\n\n## 修改了本地项目的文件后怎么将最新版本上传到github\n\n首先，先在本地项目里面打开 git bash，然后依次输入命令\n\ngit status -s  发现他的红色的？？\n\ngit add .\n\ngit status -s 发现他的绿色的A\n\ngit commit -m \"新增了巴拉巴拉\"\n\n然后运行 git push命令就可以了\n\n## 配置ssh并将远程仓库克隆到本地\n\n打开git bash\n\n输入以下命令，邮箱要写成注册github的邮箱\n\nssh-keygen -t rsa -b 4096 -C \"github的邮箱\"\n\n连续敲击3次回车\n\n会存在自己c盘，用户，asua，里面的.ssh文件\n\n我们需要把里面pub结尾的那个文件里面的内容配置到github里面\n\n使用记事本打开这个pub结尾的文件，复制里面的文本内容\n\n在github里面点击头像，settings，ssh and GPG Keys new SSH key\n\n将刚刚文件中的内容，粘贴到key对应的文本框中\n\n在title文本框里任意填写一个名称，用来标识这个key从何而来\n\n## 检测github里面的ssh key是否配置成功\n\n打开git bash ，输入如下的命令并回车执行\n\nssh -T git@github.com\n\n输入yes之后如果能看见自己的用户名和successfully说明配置成功了\n\n## 使用ssh的方式将项目上传到github\n\n首先在当前项目的根目录中打开 git bash\n\ngit init\n\ngit status -s\n\ngit add .\n\ngit status -s\n\ngit commit -m \"初始化项目\"\n\n创建一个新的空白仓库\n\n运行里面提示的3行代码\n\n运行完刷新就能看见上传成功了\n\n## 将远程仓库克隆到本地\n\n打开git bash,输入以下命令并执行\n\ngit clone 远程仓库的地址\n\n## 查看分支列表\n\ngit branch\n\n可以看见当前git仓库中所有的分支列表，*表示当前所处的分支\n\n## 创建新分支\n\ngit branch 分支名称\n\n使用这个命令，可以基于当前分支，创建一个新的分支，此时，新分支中的代码和当前分支完全一样\n\n注意：执行完创建分支的命令之后，用户当前所处的位置还是master分支\n\n## 切换分支\n\ngit checkout 新分支名\n\n## 快速创建并切换分支\n\ngit checkout -b 新分支名称\n\n## 合并分支\n\n功能分支的代码开发并测试完毕后，使用以下命令，将完成后的代码合并到master分支上\n\ngit add .\n\ngit commit -m \"描述\"\n\ngit checked master\n\ngit merge 要合并的分支名\n\n注意合并的方式：比如你要把C分支的代码合并到A分支，那么你就必须先切换到A分支，在运行merge命令来合并C分支\n\n## 如何在功能分支上进行代码开发\n\n这个只需要在git bash里面把当前的分支切换成对应的功能分支，这时，本地的代码就会变成对应功能分支里面的代码，然后你用vscode打开并进行开发即可。\n\n## 删除分支\n\n当把功能分支的代码合并到master主分支上以后，就可以使用如下的命令，删除对应的分支：\n\ngit branch -d 分支名称\n\n注意：比如我要删除A分支，那么我不能处于A分支上面\n\n## 遇到冲突时的分支合并\n\n如果在两个不同的分支中，对同一个文件进行了不同的修改，git就没办法干净的合并他们，此时，我们需要打开这些包含冲突的文件然后手动解决冲突","slug":"git学习笔记","published":1,"updated":"2022-10-04T12:50:40.940Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyn4schw000aecvzeiqe60l3","content":"<h1 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h1><h2 id=\"git-bash窗口两种方法快速粘贴\"><a href=\"#git-bash窗口两种方法快速粘贴\" class=\"headerlink\" title=\"git bash窗口两种方法快速粘贴\"></a>git bash窗口两种方法快速粘贴</h2><p>第一种方法：</p>\n<p>  右键 -&gt; 点击 Paste。即可粘贴已复制的内容</p>\n<p>第二种方法：点击鼠标中间的滚轮。</p>\n<h2 id=\"配置用户信息\"><a href=\"#配置用户信息\" class=\"headerlink\" title=\"配置用户信息\"></a>配置用户信息</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;zhanhu&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global user.email &quot;邮箱地址&quot;</span><br></pre></td></tr></table></figure>\n<p>用了global选项，只需要运行一次，永久生效</p>\n<h2 id=\"检查配置信息\"><a href=\"#检查配置信息\" class=\"headerlink\" title=\"检查配置信息\"></a>检查配置信息</h2><p>查看所有的全局配置项</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --list --global</span><br></pre></td></tr></table></figure>\n<p>查看指定的全局配置项</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name</span><br><span class=\"line\"></span><br><span class=\"line\">git config user.email</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取帮助信息\"><a href=\"#获取帮助信息\" class=\"headerlink\" title=\"获取帮助信息\"></a>获取帮助信息</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git help 命令名</span><br></pre></td></tr></table></figure>\n<p>这个命令是在无需联网状态下就可以在浏览器打开帮助手册</p>\n<p>如果不想要查看完整的手册，可以用-h选项在终端里面获得帮助</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git 命令名 -h</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取git仓库的两种方式\"><a href=\"#获取git仓库的两种方式\" class=\"headerlink\" title=\"获取git仓库的两种方式\"></a>获取git仓库的两种方式</h2><p>1、将尚未进行版本控制的本地目录转换为git仓库</p>\n<p>步骤：（1）在项目目录中，通过鼠标右键打开git bash</p>\n<p>（2）执行git init命令将当前的目录转化为git仓库</p>\n<p>这时你可以在里面看见一个.git的隐藏目录，如果你发现没有，俺么点击上面的查看，勾选显示隐藏目录选项即可</p>\n<p>2、从其他服务器克隆一个已存在的git仓库</p>\n<h2 id=\"检查文件的状态\"><a href=\"#检查文件的状态\" class=\"headerlink\" title=\"检查文件的状态\"></a>检查文件的状态</h2><p>可以使用 git status命令查看文件处于什么状态</p>\n<p>以精简的方式显示文件状态：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status -s</span><br><span class=\"line\"></span><br><span class=\"line\">或者</span><br><span class=\"line\"></span><br><span class=\"line\">git status --short</span><br></pre></td></tr></table></figure>\n<p>这时，未跟踪文件前面会有红色的？？标记</p>\n<p>新添加到暂存区的文件前面有绿色的A标记</p>\n<p>修改过的，没有放入暂存区的文件前面有红色的M标记</p>\n<p>绿色大写的D表示该文件已被移除</p>\n<h2 id=\"跟踪新文件\"><a href=\"#跟踪新文件\" class=\"headerlink\" title=\"跟踪新文件\"></a>跟踪新文件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add 文件名</span><br></pre></td></tr></table></figure>\n<h2 id=\"提交更新\"><a href=\"#提交更新\" class=\"headerlink\" title=\"提交更新\"></a>提交更新</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git comit -m &quot;新建了一个index.html文件&quot;</span><br></pre></td></tr></table></figure>\n<p>-m后面那个是本次的提交信息，用来对提交的内容做进一步的描述</p>\n<h2 id=\"对已提交的文件进行修改\"><a href=\"#对已提交的文件进行修改\" class=\"headerlink\" title=\"对已提交的文件进行修改\"></a>对已提交的文件进行修改</h2><p>如果你修改了原来已经提交了的文件的内容，那么他的文件状态就会变成modified。</p>\n<h2 id=\"暂存已修改的文件\"><a href=\"#暂存已修改的文件\" class=\"headerlink\" title=\"暂存已修改的文件\"></a>暂存已修改的文件</h2><p>如果要暂存修改，需要再次运行git add 命令，这个命令是个多功能的命令，这个命令主要有3个功效：1、可以用它开始跟踪新文件</p>\n<p>2、把已跟踪的，且已修改的文件放到暂存区</p>\n<p>3、把有冲突的文件标记为已解决的状态</p>\n<h2 id=\"提交已暂存的文件\"><a href=\"#提交已暂存的文件\" class=\"headerlink\" title=\"提交已暂存的文件\"></a>提交已暂存的文件</h2><p>再次运行<code> git commit -m &quot;提交消息&quot;</code>命令，就可以将暂存区中记录的index.html的快照，提交到git仓库进行保存</p>\n<h2 id=\"撤销对文件的修改\"><a href=\"#撤销对文件的修改\" class=\"headerlink\" title=\"撤销对文件的修改\"></a>撤销对文件的修改</h2><p>把对工作区中对应文件的修改，还原成git仓库中所保存的版本</p>\n<p>操作的结果：所有的修改会丢失，且无法恢复，危险性比较高，请慎重操作</p>\n<p><code>git checkout -- 要撤销的文件名</code></p>\n<p>撤销操作的本质：用git仓库中保存的文件，覆盖工作区指定的文件</p>\n<h2 id=\"向暂存区中一次性添加多个文件\"><a href=\"#向暂存区中一次性添加多个文件\" class=\"headerlink\" title=\"向暂存区中一次性添加多个文件\"></a>向暂存区中一次性添加多个文件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get add .   </span><br></pre></td></tr></table></figure>\n<p>注意那个.是英文的</p>\n<p>这个很常用</p>\n<h2 id=\"取消暂存的文件\"><a href=\"#取消暂存的文件\" class=\"headerlink\" title=\"取消暂存的文件\"></a>取消暂存的文件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset HEAD 要移除的文件名称</span><br></pre></td></tr></table></figure>\n<p>如果要把所有的都移除，那么就是<code>git reset HEAD . </code></p>\n<h2 id=\"跳过使用暂存区\"><a href=\"#跳过使用暂存区\" class=\"headerlink\" title=\"跳过使用暂存区\"></a>跳过使用暂存区</h2><p>git标准的工作流程：工作区——暂存区——git仓库，跳过之后变成</p>\n<p>工作区——git仓库</p>\n<p>方法是只要在提交的时候，给git commit加上-a选项，就会自动把已经跟踪过的文件暂存起来一并提交</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -a -m &quot;描述信息&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"移除文件\"><a href=\"#移除文件\" class=\"headerlink\" title=\"移除文件\"></a>移除文件</h2><p>从git仓库中移除文件的方式有两种：</p>\n<p>1、从git仓库和工作区中同时移除对应的文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm -f 文件名</span><br></pre></td></tr></table></figure>\n<p>2、只从git仓库中移除指定的文件，但保留工作区中对应的文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm --cached 文件名</span><br></pre></td></tr></table></figure>\n<h2 id=\"git忽略文件\"><a href=\"#git忽略文件\" class=\"headerlink\" title=\"git忽略文件\"></a>git忽略文件</h2><p>一般我们总会有些文件无需纳入git的管理，也不希望他们总出现在未跟踪文件列表，在这种情况下，我们可以创建一个名为.gitignore的配置文件，列出要忽略的文件的匹配模式</p>\n<p>格式规范如下</p>\n<p>以#开头的是注释</p>\n<p>以/结尾的是目录</p>\n<p>以/开头防止递归</p>\n<p>以！开头表示取反</p>\n<p>可以使用glob模式进行文件和文件夹的匹配（glob指简化了的正则表达式）</p>\n<p>glob模式：</p>\n<p>*匹配零个或多个任意字符</p>\n<p>[abc]匹配任何一个列在方括号中的字符</p>\n<p>？只匹配一个任意字符</p>\n<p>在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如[0-9]表示匹配所有0-9的数字）</p>\n<p>**表示匹配任意中间字符（比如a/ * */z可以匹配a/z\\a/b/z或者a/b/c/z等）</p>\n<h2 id=\"查看提交历史\"><a href=\"#查看提交历史\" class=\"headerlink\" title=\"查看提交历史\"></a>查看提交历史</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log</span><br></pre></td></tr></table></figure>\n<p>按时间先后顺序列出所有的提交历史，最近的提交排在最上面</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log -2</span><br></pre></td></tr></table></figure>\n<p>只显示最新的两条提交历史，数字可以按需进行填写</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log -2 --pretty=oneline</span><br></pre></td></tr></table></figure>\n<p>在一行上展示最近两条提交的历史，并自定义输出的格式</p>\n<p>%h 提交的简写哈希值 %an 作者名字 %ar 作者修订时间，按多久以前的方式显示  %s 提交说明 |自定义分隔符，写什么符号都可以</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log -2 --pretty=format:&quot;%h |%an | %ar | %s&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"回退到指定的版本\"><a href=\"#回退到指定的版本\" class=\"headerlink\" title=\"回退到指定的版本\"></a>回退到指定的版本</h2><p>在一行上展示所有的提交历史</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log -2 --pretty=oneline</span><br></pre></td></tr></table></figure>\n<p>使用git reet –hard 命令，根据指定的提交ID回退到指定的版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard &lt;CommitID&gt; 其中这里面的id可以复制粘贴上面历史显示出来的</span><br></pre></td></tr></table></figure>\n<p>在旧版本中使用 <code>git reflog --pretty=oneline</code>命令，查看命令操作的历史</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog --pretty=oneline</span><br></pre></td></tr></table></figure>\n<p>再次根据最新的提交ID，跳转到最新的版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard &lt;CommitID&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"github\"><a href=\"#github\" class=\"headerlink\" title=\"github\"></a>github</h1><h2 id=\"创建空白远程仓库\"><a href=\"#创建空白远程仓库\" class=\"headerlink\" title=\"创建空白远程仓库\"></a>创建空白远程仓库</h2><p>比如在github中，先点击右上角的+号新建一个仓库，然后填入仓库名称和仓库描述，点击创建即可</p>\n<h2 id=\"远程仓库的两种访问方式\"><a href=\"#远程仓库的两种访问方式\" class=\"headerlink\" title=\"远程仓库的两种访问方式\"></a>远程仓库的两种访问方式</h2><p>HTTPS：零配置，但是每次访问仓库时，需要重复输入github账号和密码才能访问成功</p>\n<p>SSH：需要进行额外的配置，但是配置成功之后，每次访问仓库时，不需要重复输入github的账号和密码</p>\n<p>在实际开发中，推荐ssh的方式访问仓库</p>\n<h2 id=\"基于https将本地仓库上传到github\"><a href=\"#基于https将本地仓库上传到github\" class=\"headerlink\" title=\"基于https将本地仓库上传到github\"></a>基于https将本地仓库上传到github</h2><p>1、本地没有现成的Git仓库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git commit -m &quot;提交描述&quot;</span><br><span class=\"line\">git remote add origin github上面仓库的地址</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n<p>2、本地现有Git仓库<br>直接执行上述的倒数2个语句即可</p>\n<p>首先在github里面点击https方式，然后在电脑本地的那个项目里面打开git bash here，然后把下面的对应命令一行一行粘贴进去运行就可以了</p>\n<h2 id=\"修改了本地项目的文件后怎么将最新版本上传到github\"><a href=\"#修改了本地项目的文件后怎么将最新版本上传到github\" class=\"headerlink\" title=\"修改了本地项目的文件后怎么将最新版本上传到github\"></a>修改了本地项目的文件后怎么将最新版本上传到github</h2><p>首先，先在本地项目里面打开 git bash，然后依次输入命令</p>\n<p>git status -s  发现他的红色的？？</p>\n<p>git add .</p>\n<p>git status -s 发现他的绿色的A</p>\n<p>git commit -m “新增了巴拉巴拉”</p>\n<p>然后运行 git push命令就可以了</p>\n<h2 id=\"配置ssh并将远程仓库克隆到本地\"><a href=\"#配置ssh并将远程仓库克隆到本地\" class=\"headerlink\" title=\"配置ssh并将远程仓库克隆到本地\"></a>配置ssh并将远程仓库克隆到本地</h2><p>打开git bash</p>\n<p>输入以下命令，邮箱要写成注册github的邮箱</p>\n<p>ssh-keygen -t rsa -b 4096 -C “github的邮箱”</p>\n<p>连续敲击3次回车</p>\n<p>会存在自己c盘，用户，asua，里面的.ssh文件</p>\n<p>我们需要把里面pub结尾的那个文件里面的内容配置到github里面</p>\n<p>使用记事本打开这个pub结尾的文件，复制里面的文本内容</p>\n<p>在github里面点击头像，settings，ssh and GPG Keys new SSH key</p>\n<p>将刚刚文件中的内容，粘贴到key对应的文本框中</p>\n<p>在title文本框里任意填写一个名称，用来标识这个key从何而来</p>\n<h2 id=\"检测github里面的ssh-key是否配置成功\"><a href=\"#检测github里面的ssh-key是否配置成功\" class=\"headerlink\" title=\"检测github里面的ssh key是否配置成功\"></a>检测github里面的ssh key是否配置成功</h2><p>打开git bash ，输入如下的命令并回车执行</p>\n<p>ssh -T <a href=\"mailto:&#103;&#x69;&#116;&#64;&#x67;&#105;&#116;&#104;&#x75;&#x62;&#46;&#99;&#x6f;&#x6d;\">&#103;&#x69;&#116;&#64;&#x67;&#105;&#116;&#104;&#x75;&#x62;&#46;&#99;&#x6f;&#x6d;</a></p>\n<p>输入yes之后如果能看见自己的用户名和successfully说明配置成功了</p>\n<h2 id=\"使用ssh的方式将项目上传到github\"><a href=\"#使用ssh的方式将项目上传到github\" class=\"headerlink\" title=\"使用ssh的方式将项目上传到github\"></a>使用ssh的方式将项目上传到github</h2><p>首先在当前项目的根目录中打开 git bash</p>\n<p>git init</p>\n<p>git status -s</p>\n<p>git add .</p>\n<p>git status -s</p>\n<p>git commit -m “初始化项目”</p>\n<p>创建一个新的空白仓库</p>\n<p>运行里面提示的3行代码</p>\n<p>运行完刷新就能看见上传成功了</p>\n<h2 id=\"将远程仓库克隆到本地\"><a href=\"#将远程仓库克隆到本地\" class=\"headerlink\" title=\"将远程仓库克隆到本地\"></a>将远程仓库克隆到本地</h2><p>打开git bash,输入以下命令并执行</p>\n<p>git clone 远程仓库的地址</p>\n<h2 id=\"查看分支列表\"><a href=\"#查看分支列表\" class=\"headerlink\" title=\"查看分支列表\"></a>查看分支列表</h2><p>git branch</p>\n<p>可以看见当前git仓库中所有的分支列表，*表示当前所处的分支</p>\n<h2 id=\"创建新分支\"><a href=\"#创建新分支\" class=\"headerlink\" title=\"创建新分支\"></a>创建新分支</h2><p>git branch 分支名称</p>\n<p>使用这个命令，可以基于当前分支，创建一个新的分支，此时，新分支中的代码和当前分支完全一样</p>\n<p>注意：执行完创建分支的命令之后，用户当前所处的位置还是master分支</p>\n<h2 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h2><p>git checkout 新分支名</p>\n<h2 id=\"快速创建并切换分支\"><a href=\"#快速创建并切换分支\" class=\"headerlink\" title=\"快速创建并切换分支\"></a>快速创建并切换分支</h2><p>git checkout -b 新分支名称</p>\n<h2 id=\"合并分支\"><a href=\"#合并分支\" class=\"headerlink\" title=\"合并分支\"></a>合并分支</h2><p>功能分支的代码开发并测试完毕后，使用以下命令，将完成后的代码合并到master分支上</p>\n<p>git add .</p>\n<p>git commit -m “描述”</p>\n<p>git checked master</p>\n<p>git merge 要合并的分支名</p>\n<p>注意合并的方式：比如你要把C分支的代码合并到A分支，那么你就必须先切换到A分支，在运行merge命令来合并C分支</p>\n<h2 id=\"如何在功能分支上进行代码开发\"><a href=\"#如何在功能分支上进行代码开发\" class=\"headerlink\" title=\"如何在功能分支上进行代码开发\"></a>如何在功能分支上进行代码开发</h2><p>这个只需要在git bash里面把当前的分支切换成对应的功能分支，这时，本地的代码就会变成对应功能分支里面的代码，然后你用vscode打开并进行开发即可。</p>\n<h2 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h2><p>当把功能分支的代码合并到master主分支上以后，就可以使用如下的命令，删除对应的分支：</p>\n<p>git branch -d 分支名称</p>\n<p>注意：比如我要删除A分支，那么我不能处于A分支上面</p>\n<h2 id=\"遇到冲突时的分支合并\"><a href=\"#遇到冲突时的分支合并\" class=\"headerlink\" title=\"遇到冲突时的分支合并\"></a>遇到冲突时的分支合并</h2><p>如果在两个不同的分支中，对同一个文件进行了不同的修改，git就没办法干净的合并他们，此时，我们需要打开这些包含冲突的文件然后手动解决冲突</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h1><h2 id=\"git-bash窗口两种方法快速粘贴\"><a href=\"#git-bash窗口两种方法快速粘贴\" class=\"headerlink\" title=\"git bash窗口两种方法快速粘贴\"></a>git bash窗口两种方法快速粘贴</h2><p>第一种方法：</p>\n<p>  右键 -&gt; 点击 Paste。即可粘贴已复制的内容</p>\n<p>第二种方法：点击鼠标中间的滚轮。</p>\n<h2 id=\"配置用户信息\"><a href=\"#配置用户信息\" class=\"headerlink\" title=\"配置用户信息\"></a>配置用户信息</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;zhanhu&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global user.email &quot;邮箱地址&quot;</span><br></pre></td></tr></table></figure>\n<p>用了global选项，只需要运行一次，永久生效</p>\n<h2 id=\"检查配置信息\"><a href=\"#检查配置信息\" class=\"headerlink\" title=\"检查配置信息\"></a>检查配置信息</h2><p>查看所有的全局配置项</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --list --global</span><br></pre></td></tr></table></figure>\n<p>查看指定的全局配置项</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name</span><br><span class=\"line\"></span><br><span class=\"line\">git config user.email</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取帮助信息\"><a href=\"#获取帮助信息\" class=\"headerlink\" title=\"获取帮助信息\"></a>获取帮助信息</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git help 命令名</span><br></pre></td></tr></table></figure>\n<p>这个命令是在无需联网状态下就可以在浏览器打开帮助手册</p>\n<p>如果不想要查看完整的手册，可以用-h选项在终端里面获得帮助</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git 命令名 -h</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取git仓库的两种方式\"><a href=\"#获取git仓库的两种方式\" class=\"headerlink\" title=\"获取git仓库的两种方式\"></a>获取git仓库的两种方式</h2><p>1、将尚未进行版本控制的本地目录转换为git仓库</p>\n<p>步骤：（1）在项目目录中，通过鼠标右键打开git bash</p>\n<p>（2）执行git init命令将当前的目录转化为git仓库</p>\n<p>这时你可以在里面看见一个.git的隐藏目录，如果你发现没有，俺么点击上面的查看，勾选显示隐藏目录选项即可</p>\n<p>2、从其他服务器克隆一个已存在的git仓库</p>\n<h2 id=\"检查文件的状态\"><a href=\"#检查文件的状态\" class=\"headerlink\" title=\"检查文件的状态\"></a>检查文件的状态</h2><p>可以使用 git status命令查看文件处于什么状态</p>\n<p>以精简的方式显示文件状态：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status -s</span><br><span class=\"line\"></span><br><span class=\"line\">或者</span><br><span class=\"line\"></span><br><span class=\"line\">git status --short</span><br></pre></td></tr></table></figure>\n<p>这时，未跟踪文件前面会有红色的？？标记</p>\n<p>新添加到暂存区的文件前面有绿色的A标记</p>\n<p>修改过的，没有放入暂存区的文件前面有红色的M标记</p>\n<p>绿色大写的D表示该文件已被移除</p>\n<h2 id=\"跟踪新文件\"><a href=\"#跟踪新文件\" class=\"headerlink\" title=\"跟踪新文件\"></a>跟踪新文件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add 文件名</span><br></pre></td></tr></table></figure>\n<h2 id=\"提交更新\"><a href=\"#提交更新\" class=\"headerlink\" title=\"提交更新\"></a>提交更新</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git comit -m &quot;新建了一个index.html文件&quot;</span><br></pre></td></tr></table></figure>\n<p>-m后面那个是本次的提交信息，用来对提交的内容做进一步的描述</p>\n<h2 id=\"对已提交的文件进行修改\"><a href=\"#对已提交的文件进行修改\" class=\"headerlink\" title=\"对已提交的文件进行修改\"></a>对已提交的文件进行修改</h2><p>如果你修改了原来已经提交了的文件的内容，那么他的文件状态就会变成modified。</p>\n<h2 id=\"暂存已修改的文件\"><a href=\"#暂存已修改的文件\" class=\"headerlink\" title=\"暂存已修改的文件\"></a>暂存已修改的文件</h2><p>如果要暂存修改，需要再次运行git add 命令，这个命令是个多功能的命令，这个命令主要有3个功效：1、可以用它开始跟踪新文件</p>\n<p>2、把已跟踪的，且已修改的文件放到暂存区</p>\n<p>3、把有冲突的文件标记为已解决的状态</p>\n<h2 id=\"提交已暂存的文件\"><a href=\"#提交已暂存的文件\" class=\"headerlink\" title=\"提交已暂存的文件\"></a>提交已暂存的文件</h2><p>再次运行<code> git commit -m &quot;提交消息&quot;</code>命令，就可以将暂存区中记录的index.html的快照，提交到git仓库进行保存</p>\n<h2 id=\"撤销对文件的修改\"><a href=\"#撤销对文件的修改\" class=\"headerlink\" title=\"撤销对文件的修改\"></a>撤销对文件的修改</h2><p>把对工作区中对应文件的修改，还原成git仓库中所保存的版本</p>\n<p>操作的结果：所有的修改会丢失，且无法恢复，危险性比较高，请慎重操作</p>\n<p><code>git checkout -- 要撤销的文件名</code></p>\n<p>撤销操作的本质：用git仓库中保存的文件，覆盖工作区指定的文件</p>\n<h2 id=\"向暂存区中一次性添加多个文件\"><a href=\"#向暂存区中一次性添加多个文件\" class=\"headerlink\" title=\"向暂存区中一次性添加多个文件\"></a>向暂存区中一次性添加多个文件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">get add .   </span><br></pre></td></tr></table></figure>\n<p>注意那个.是英文的</p>\n<p>这个很常用</p>\n<h2 id=\"取消暂存的文件\"><a href=\"#取消暂存的文件\" class=\"headerlink\" title=\"取消暂存的文件\"></a>取消暂存的文件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset HEAD 要移除的文件名称</span><br></pre></td></tr></table></figure>\n<p>如果要把所有的都移除，那么就是<code>git reset HEAD . </code></p>\n<h2 id=\"跳过使用暂存区\"><a href=\"#跳过使用暂存区\" class=\"headerlink\" title=\"跳过使用暂存区\"></a>跳过使用暂存区</h2><p>git标准的工作流程：工作区——暂存区——git仓库，跳过之后变成</p>\n<p>工作区——git仓库</p>\n<p>方法是只要在提交的时候，给git commit加上-a选项，就会自动把已经跟踪过的文件暂存起来一并提交</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -a -m &quot;描述信息&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"移除文件\"><a href=\"#移除文件\" class=\"headerlink\" title=\"移除文件\"></a>移除文件</h2><p>从git仓库中移除文件的方式有两种：</p>\n<p>1、从git仓库和工作区中同时移除对应的文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm -f 文件名</span><br></pre></td></tr></table></figure>\n<p>2、只从git仓库中移除指定的文件，但保留工作区中对应的文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm --cached 文件名</span><br></pre></td></tr></table></figure>\n<h2 id=\"git忽略文件\"><a href=\"#git忽略文件\" class=\"headerlink\" title=\"git忽略文件\"></a>git忽略文件</h2><p>一般我们总会有些文件无需纳入git的管理，也不希望他们总出现在未跟踪文件列表，在这种情况下，我们可以创建一个名为.gitignore的配置文件，列出要忽略的文件的匹配模式</p>\n<p>格式规范如下</p>\n<p>以#开头的是注释</p>\n<p>以/结尾的是目录</p>\n<p>以/开头防止递归</p>\n<p>以！开头表示取反</p>\n<p>可以使用glob模式进行文件和文件夹的匹配（glob指简化了的正则表达式）</p>\n<p>glob模式：</p>\n<p>*匹配零个或多个任意字符</p>\n<p>[abc]匹配任何一个列在方括号中的字符</p>\n<p>？只匹配一个任意字符</p>\n<p>在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如[0-9]表示匹配所有0-9的数字）</p>\n<p>**表示匹配任意中间字符（比如a/ * */z可以匹配a/z\\a/b/z或者a/b/c/z等）</p>\n<h2 id=\"查看提交历史\"><a href=\"#查看提交历史\" class=\"headerlink\" title=\"查看提交历史\"></a>查看提交历史</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log</span><br></pre></td></tr></table></figure>\n<p>按时间先后顺序列出所有的提交历史，最近的提交排在最上面</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log -2</span><br></pre></td></tr></table></figure>\n<p>只显示最新的两条提交历史，数字可以按需进行填写</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log -2 --pretty=oneline</span><br></pre></td></tr></table></figure>\n<p>在一行上展示最近两条提交的历史，并自定义输出的格式</p>\n<p>%h 提交的简写哈希值 %an 作者名字 %ar 作者修订时间，按多久以前的方式显示  %s 提交说明 |自定义分隔符，写什么符号都可以</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log -2 --pretty=format:&quot;%h |%an | %ar | %s&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"回退到指定的版本\"><a href=\"#回退到指定的版本\" class=\"headerlink\" title=\"回退到指定的版本\"></a>回退到指定的版本</h2><p>在一行上展示所有的提交历史</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log -2 --pretty=oneline</span><br></pre></td></tr></table></figure>\n<p>使用git reet –hard 命令，根据指定的提交ID回退到指定的版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard &lt;CommitID&gt; 其中这里面的id可以复制粘贴上面历史显示出来的</span><br></pre></td></tr></table></figure>\n<p>在旧版本中使用 <code>git reflog --pretty=oneline</code>命令，查看命令操作的历史</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog --pretty=oneline</span><br></pre></td></tr></table></figure>\n<p>再次根据最新的提交ID，跳转到最新的版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard &lt;CommitID&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"github\"><a href=\"#github\" class=\"headerlink\" title=\"github\"></a>github</h1><h2 id=\"创建空白远程仓库\"><a href=\"#创建空白远程仓库\" class=\"headerlink\" title=\"创建空白远程仓库\"></a>创建空白远程仓库</h2><p>比如在github中，先点击右上角的+号新建一个仓库，然后填入仓库名称和仓库描述，点击创建即可</p>\n<h2 id=\"远程仓库的两种访问方式\"><a href=\"#远程仓库的两种访问方式\" class=\"headerlink\" title=\"远程仓库的两种访问方式\"></a>远程仓库的两种访问方式</h2><p>HTTPS：零配置，但是每次访问仓库时，需要重复输入github账号和密码才能访问成功</p>\n<p>SSH：需要进行额外的配置，但是配置成功之后，每次访问仓库时，不需要重复输入github的账号和密码</p>\n<p>在实际开发中，推荐ssh的方式访问仓库</p>\n<h2 id=\"基于https将本地仓库上传到github\"><a href=\"#基于https将本地仓库上传到github\" class=\"headerlink\" title=\"基于https将本地仓库上传到github\"></a>基于https将本地仓库上传到github</h2><p>1、本地没有现成的Git仓库</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git commit -m &quot;提交描述&quot;</span><br><span class=\"line\">git remote add origin github上面仓库的地址</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n<p>2、本地现有Git仓库<br>直接执行上述的倒数2个语句即可</p>\n<p>首先在github里面点击https方式，然后在电脑本地的那个项目里面打开git bash here，然后把下面的对应命令一行一行粘贴进去运行就可以了</p>\n<h2 id=\"修改了本地项目的文件后怎么将最新版本上传到github\"><a href=\"#修改了本地项目的文件后怎么将最新版本上传到github\" class=\"headerlink\" title=\"修改了本地项目的文件后怎么将最新版本上传到github\"></a>修改了本地项目的文件后怎么将最新版本上传到github</h2><p>首先，先在本地项目里面打开 git bash，然后依次输入命令</p>\n<p>git status -s  发现他的红色的？？</p>\n<p>git add .</p>\n<p>git status -s 发现他的绿色的A</p>\n<p>git commit -m “新增了巴拉巴拉”</p>\n<p>然后运行 git push命令就可以了</p>\n<h2 id=\"配置ssh并将远程仓库克隆到本地\"><a href=\"#配置ssh并将远程仓库克隆到本地\" class=\"headerlink\" title=\"配置ssh并将远程仓库克隆到本地\"></a>配置ssh并将远程仓库克隆到本地</h2><p>打开git bash</p>\n<p>输入以下命令，邮箱要写成注册github的邮箱</p>\n<p>ssh-keygen -t rsa -b 4096 -C “github的邮箱”</p>\n<p>连续敲击3次回车</p>\n<p>会存在自己c盘，用户，asua，里面的.ssh文件</p>\n<p>我们需要把里面pub结尾的那个文件里面的内容配置到github里面</p>\n<p>使用记事本打开这个pub结尾的文件，复制里面的文本内容</p>\n<p>在github里面点击头像，settings，ssh and GPG Keys new SSH key</p>\n<p>将刚刚文件中的内容，粘贴到key对应的文本框中</p>\n<p>在title文本框里任意填写一个名称，用来标识这个key从何而来</p>\n<h2 id=\"检测github里面的ssh-key是否配置成功\"><a href=\"#检测github里面的ssh-key是否配置成功\" class=\"headerlink\" title=\"检测github里面的ssh key是否配置成功\"></a>检测github里面的ssh key是否配置成功</h2><p>打开git bash ，输入如下的命令并回车执行</p>\n<p>ssh -T <a href=\"mailto:&#103;&#x69;&#116;&#64;&#x67;&#105;&#116;&#104;&#x75;&#x62;&#46;&#99;&#x6f;&#x6d;\">&#103;&#x69;&#116;&#64;&#x67;&#105;&#116;&#104;&#x75;&#x62;&#46;&#99;&#x6f;&#x6d;</a></p>\n<p>输入yes之后如果能看见自己的用户名和successfully说明配置成功了</p>\n<h2 id=\"使用ssh的方式将项目上传到github\"><a href=\"#使用ssh的方式将项目上传到github\" class=\"headerlink\" title=\"使用ssh的方式将项目上传到github\"></a>使用ssh的方式将项目上传到github</h2><p>首先在当前项目的根目录中打开 git bash</p>\n<p>git init</p>\n<p>git status -s</p>\n<p>git add .</p>\n<p>git status -s</p>\n<p>git commit -m “初始化项目”</p>\n<p>创建一个新的空白仓库</p>\n<p>运行里面提示的3行代码</p>\n<p>运行完刷新就能看见上传成功了</p>\n<h2 id=\"将远程仓库克隆到本地\"><a href=\"#将远程仓库克隆到本地\" class=\"headerlink\" title=\"将远程仓库克隆到本地\"></a>将远程仓库克隆到本地</h2><p>打开git bash,输入以下命令并执行</p>\n<p>git clone 远程仓库的地址</p>\n<h2 id=\"查看分支列表\"><a href=\"#查看分支列表\" class=\"headerlink\" title=\"查看分支列表\"></a>查看分支列表</h2><p>git branch</p>\n<p>可以看见当前git仓库中所有的分支列表，*表示当前所处的分支</p>\n<h2 id=\"创建新分支\"><a href=\"#创建新分支\" class=\"headerlink\" title=\"创建新分支\"></a>创建新分支</h2><p>git branch 分支名称</p>\n<p>使用这个命令，可以基于当前分支，创建一个新的分支，此时，新分支中的代码和当前分支完全一样</p>\n<p>注意：执行完创建分支的命令之后，用户当前所处的位置还是master分支</p>\n<h2 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h2><p>git checkout 新分支名</p>\n<h2 id=\"快速创建并切换分支\"><a href=\"#快速创建并切换分支\" class=\"headerlink\" title=\"快速创建并切换分支\"></a>快速创建并切换分支</h2><p>git checkout -b 新分支名称</p>\n<h2 id=\"合并分支\"><a href=\"#合并分支\" class=\"headerlink\" title=\"合并分支\"></a>合并分支</h2><p>功能分支的代码开发并测试完毕后，使用以下命令，将完成后的代码合并到master分支上</p>\n<p>git add .</p>\n<p>git commit -m “描述”</p>\n<p>git checked master</p>\n<p>git merge 要合并的分支名</p>\n<p>注意合并的方式：比如你要把C分支的代码合并到A分支，那么你就必须先切换到A分支，在运行merge命令来合并C分支</p>\n<h2 id=\"如何在功能分支上进行代码开发\"><a href=\"#如何在功能分支上进行代码开发\" class=\"headerlink\" title=\"如何在功能分支上进行代码开发\"></a>如何在功能分支上进行代码开发</h2><p>这个只需要在git bash里面把当前的分支切换成对应的功能分支，这时，本地的代码就会变成对应功能分支里面的代码，然后你用vscode打开并进行开发即可。</p>\n<h2 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h2><p>当把功能分支的代码合并到master主分支上以后，就可以使用如下的命令，删除对应的分支：</p>\n<p>git branch -d 分支名称</p>\n<p>注意：比如我要删除A分支，那么我不能处于A分支上面</p>\n<h2 id=\"遇到冲突时的分支合并\"><a href=\"#遇到冲突时的分支合并\" class=\"headerlink\" title=\"遇到冲突时的分支合并\"></a>遇到冲突时的分支合并</h2><p>如果在两个不同的分支中，对同一个文件进行了不同的修改，git就没办法干净的合并他们，此时，我们需要打开这些包含冲突的文件然后手动解决冲突</p>\n"},{"title":"js学习笔记","date":"2022-08-30T09:06:09.000Z","label":"这是一篇js的知识点总结","top_img":"../image/无风险01.jpg","cover":"../image/无风险01.jpg","description":"这是一篇js的知识点总结","_content":"\n# DOM\n\n<!--终于到这里了，好开心哈哈哈-->\n\n## 获取页面元素\n\n### 1、根据ID获取\n\n`getElementById（'id名'）`：如果id是大小写敏感的DOM对象，若在当前Document下没有找到，则返回null\n\n*ps：得现有元素，才有获取id选项，所以这个`getElementById（'id名'）`得写到标签的下面*\n\n```javascript\n<body>\n    <div id=\"time\">2019-9-9</div>\n\t<script>\n        var timer = document.getElementById('time');\n\t\tconsole.log(timer);\n\t</script>\n</body>\n```\n\n打印返回的元素对象：`console.dir(对象名)`\n\n### 2、根据标签名获取\n\n`getElementsByTagName('标签名')`:返回带有指定标签名对象的**集合**，以伪数组的形式存储。\n\n如果想要依次打印里面的元素对象我们可以采取遍历的方式。\n\n如果页面中只有一个目标标签，则返回一个伪数组，里面只有一个元素。\n\n如果页面中没有目标标签，则返回一个空的伪数组。\n\n得到的元素是动态的，就是说如果你原文的内容发生改变，获取到的内容也会相对应发生变化。\n\n#### 2.1获取整个页面中所有的指定标签的元素\n\n `document.getElementsByTagName('标签名')；`\n\n```javascript\nvar lis = document.getElementsByTagName('li');\nconsole.log(lis);\nconsole.log(lis[0]);\nfor(var i = 0;i<lis.length;i++)\n{\n\tconsole.log(lis[i]);\n}`\n```\n\n#### 2.2获取页面中某个元素内部所有指定标签的子元素\n\n`element.getElementsByTagName('标签名')；`\n\n*ps：父元素必须是单个对象，必须指明是哪一个元素对象，获取的时候不包括父元素自己*\n\n```JavaScript\n//代码功能：获取ol标签中所有li标签的内容\nvar ol = document.getElementsByTagName('ol');\nconsole.log(ol[0].getElementsByTagName('li'));// 这个就是所谓必须指明哪一个元素对象\n//一般如果要这么麻烦，还不如直接使用id法\n```\n\n### 3、通过html5新增的方法获取\n\n#### 3.1通过类名来返回元素对象集合\n\n`document.getElementsByClassName('类名')；`\n\n#### 3.2根据指定选择器返回第一个元素对象\n\n`document.querySelector('选择器')`：返回指定选择器的第一个元素对象\n\n如何判断是什么选择器呢，用类加 .  id加 # 等能够区分出这是个什么标签的。\n\n#### 3.3根据指定选择器返回所有的元素对象\n\n`document.querySelectorAll('选择器')`:返回指定选择器的所有元素对象集合\n\n```javascript\nvar a1 = document.getElementsByClassName('hei');\nconsole.log('a1');\nvar b1 = document.querySelector('.box');\nconsole.log('b1');\nvar c1 = document.querySelectorAll('.head');\nconsole.log('c1');\n```\n\n### 4、特殊元素获取\n\n#### 4.1 获取body元素\n\n`document.body` :返回body元素对象\n\n```JavaScript\nvar bodyEle = document.body;\nconsole.log(bodyEle);\n```\n\n#### 4.2 获取html元素\n\n`document.documentElement` ：返回html元素对象\n\n```javascript\nvar htmlEle = document.documentElement;\nconsole.log(htmlEle);\n```\n\n## 事件基础\n\n事件三要素：事件源、事件类型、事件处理程序\n\n事件源：获取元素\n\n事件类型：鼠标点击，鼠标经过，键盘输入等\n\n事件处理程序：通过一个函数赋值的方式\n\n```javascript\n//基本格式\nvar btn = document.getElementById('btn');\nbtn.onclick = function(){\n\t//你要执行的内容\n}\n```\n\n常见的鼠标事件\n\n![](../image/jspic01.png)\n\n### 禁止鼠标右键菜单\n\ncontextmenu主要控制应该何时显示上下文菜单，主要用于程序员取消默认的上下文菜单\n\n```js\n document.addEventListener('contextmenu',function(e){\n            e.preventDefault();\n        })\n```\n\n虽然但是，你禁用了右键菜单我还是可以照常cv来复制文字啊\n\n### 禁止鼠标选中\n\n用selectstart\n\n```js\n document.addEventListener('selectstart',function(e){\n            e.preventDefault();\n        })\n```\n\n嘿嘿，这下子你就cv不了了\n\n\n\n## 获取元素\n\n### 改变元素内容\n\nelement（某个元素名).innerText\n\n从起始位置到终止位置的内容，但它去除html标签，同时空格和换行也会去除\n\nelement.innerHTML（用的多）\n\n起始位置到终止位置的全部内容，包括html标签，同时保留空格和换行\n\n这些是普通盒子，比如说div里面的标签才能用，input里面的value没办法通过这个获取\n\n用法：如果是要让他点击按钮之后修改内容就写一个点击事件，element（某个元素名).innerText = 某个内容或者某个函数；如果是要让他页面一开始的时候就改变元素内容，就不用写事件了，直接获取变量然后写一个变量名.innerText = 某个变量或者函数 即可。\n\n#### innerText和innerHTML的区别\n\n1、innerText不识别html标签，如果你在里面写了<strong></strong>那么他会直接给你打印到屏幕上，去除空格和换行\n\n2、innerHTML是识别html标签的，保留空格和换行\n\n### 修改元素属性\n\n1、先获取元素，然后注册事件，在事件里面改就行了，比如你想让图片切换，你就写img.src = '新路径';想改变图片标题就写img.title = '新标题'，以此类推\n\n2、element.getAttribute('属性')  ps：element在实际应用中要改成你要修改的东西的名字\n\n#### element属性和element.getAttribute的区别\n\n前者获取内置属性值(元素本身自带的属性)\n\n后者主要获得自定义的属性（标准），我们程序员自定义的属性\n\n### 修改表单属性\n\n所谓表单，指input框要改变他的value，或者value，checked，selected，disabled\n\n表单里面的值，是通过value来修改的\n\ninput.value = '巴拉巴拉'；\n\n让按钮禁用：btn.disabled = true;\n\n### 修改样式属性\n\nelement.style 行内样式操作\n\nelement.className 类名样式操作\n\nps：element在实际应用中要改成你要修改的东西的名字\n\n注意：js里面的样式采用驼峰命名法，js修改style样式操作，产生的是行内样式，css权重比较高\n如果样式修改比较多，可以采取操作类名的方式更改元素样式。class因为是个保留字，因此使用className来操作元素类名属性。className会直接更改元素的类名，会覆盖原先的类名。如果想要保留原来的类名，就this.className = '原来的类名 新类名';\n\n用法：第一种就很直接，在事件函数里面直接用，并且说明你要改变style里面的哪一块就行，第二个就是你得在css那边写一个样式，然后在事件函数里面让某个函数拥有这个类名。\n\n### 设置属性值\n\nelement.属性 = ‘值’  //设置内置属性值\n\nelement.setAttribute('属性'，‘值’)  //主要针对自定义属性\n\n注意：修改class属性的话，第一个要写className，第二个写class\n\nps：element在实际应用中要改成你要设置的东西的名字\n\n### 移除属性\n\nelement.removeAttribute('属性')；\n\nps：element在实际应用中要改成你要移除的东西的名字\n\n### H5自定义属性\n\n自定义属性目的:为了保存并使用数据，有些数据可以保存在网页中而不需要保存到数据库中\n\n#### 1、设置H5自定义属性\n\nH5规定自定义属性用data-开头作为属性名并且赋值\n\ne.g. <div data-index=\"1\"></div>\n\n或者用js来设置\n\ne.g. element.setAttribute('data-index'.2)\n\nps：element在实际应用中要改成你要设置的东西的名字\n\n#### 2、获取H5自定义属性的值\n\n1）element.getAttribute('data-什么')\n\n2）H5新增element.dataset.属性名或者element.dataset['属性名']\n\n（用这种方法属性名不用加data-了）且只能用data-开头的，ie11以后才能用\n\ndataset是一个集合，里面存放了所有以data-开头的自定义属性\n\n注意：如果你是这么写的<div data-list-name=\"andy\"></div>\n\n那么你最后获取元素必须这么写： div.dataset.listName(必须驼峰命名法)\n\n## 节点操作\n\n——用于获取元素\n\n节点的基本属性：nodeType（节点类型）、nodeName（节点名称）、nodeValue（节点值）\n\n元素节点的nodeType为1\n\n属性节点的nodeType为2\n\n文本节点的nodeType为3（文本节点包含文字、空格、换行等）\n\n在实际开发中，节点操作主要操作的是元素节点。\n\n#### 节点层次\n\n![](../image/jspic02.png)\n\n#### 父节点\n\nparentNode\n\n注意：得到的是离元素最近的父节点，如果找不到父节点就返回为null\n\n#### 子节点\n\nparentNode.childNodes\n\n返回包含指定节点的子节点的集合，该集合为即时更新的集合，得到的是所有的子节点，包含元素节点和文本节点等，如果只想要得到里面的元素节点，则需要专门处理（for循环遍历，然后通过nodeType来判断是什么节点然后打印你想要的类型的节点），所以一般不推荐使用childNodes。\n\nparentNode.children(重点，常用)\n\n它是一个只读属性，返回所有的子元素节点，它只返回子元素节点，其余节点不返回。\n\nps：parentNode在实际应用中要改成具体的父节点名称\n\n#### 获取第一个子元素或者最后一个子元素\n\n法一\n\nparentNode.firstChild //获取的是第一个子节点，不管是文本节点还是个元素节点\n\nparentNode.lastChild //获取的是最后一个子节点，不管是文本节点还是元素节点\n\n法二、\n\nparentNode.firstElementChild //返回第一个子元素节点，找不到则返回null\n\nparenNode.lastElementChild //返回最后一个子元素节点，找不到则返回null\n\n注意：有兼容性问题，ie9以上才支持。\n\n法三：（实际开发用这个）\n\nparentNode.children[0] //得到第一个子元素节点\n\nparentNode.children[parentNode.chileren.length - 1]\n\n ps：parentNode在实际应用中要改成具体的父节点名称 \n\n![](../image/jspic03.png)\n\n下拉菜单的基本布局如上图所示\n\n\n\n#### 兄弟节点\n\nnode.nextSibling //返回当前元素的下一个兄弟节点，找不到则返回null，同样，也是包含所有的节点\n\n（node在实际开发中要换成你要的那个名字）\n\nnode.previousSibling //返回当前元素的上一个兄弟节点，找不到则返回null，同样，也是包含所有的节点\n\nnode.nextElementSibling //返回当前元素的下一个兄弟元素节点，找不到则返回null\n\nnode.previousElementSibling//返回当前元素的上一个兄弟元素节点，找不到则返回null\n\n ps：node在实际应用中要改成具体的节点名称 \n\n上面两个都有兼容性问题，ie9以上才支持\n\n解决兼容性问题的方法：自己封装一个兼容性函数\n\n```JavaScript\nfunction getNextElementSibling(element){\n    var el = element;\n    while(el=el.nextSibling){\n        if(el.nodeType === 1){\n            return el;\n        }\n    }\n    return null;\n}\n```\n\n#### 创建节点\n\ndocument.createElement('tagName') //动态创建元素节点\n\n#### 添加节点\n\nnode.appendChild(child) //将一个节点添加到指定父节点的子节点列表末尾，即为node添加一个孩子\n\nnode：父节点名 child：子节点名\n\nnode.insertBefore(child,指定元素) //将一个节点添加到指定父节点的子节点列表前面\n\n ps：node在实际应用中要改成具体的节点名称 \n\n#### 删除节点\n\nnode.removeChild(child) //删除一个子节点，返回删除的节点\n\n ps：node在实际应用中要改成具体的节点名称 \n\n#### 复制节点\n\nnode.cloneNode() //方法返回调用该方法的节点的一个副本，也称为克隆节点/拷贝节点\n\n注：如果括号参数为空或者false，则为浅拷贝，即只克隆复制节点本身，不可隆里面的子节点（只获取标签，不复制里面的值）\n\n深拷贝：复制标签包括复制里面的值node.cloneNode(true)\n\n你复制完之后要告诉它把复制过来的标签放在哪里他才能显示出来。 \n\n ps：node在实际应用中要改成具体的节点名称 \n\n#### 三种动态创建元素区别\n\ndocument.write()（用的很少，了解）\n\nelement.innerHTML\n\ndocument.createElement()\n\n第一个是直接将内容写入页面的内容流，但是文档流执行完毕，则会导致页面全部重绘(即创建一个新页面写入你write的内容然后原先的东西全没了)\n\n第二个是将内容写入某个dom节点，不会导致页面重绘，而且创建多个元素效率更高（不要拼接字符串，采取数组形式拼接），结构稍微复杂\n\n第三个是创建多个元素效率稍低一点但是结构更清晰\n\n总结：不同浏览器下，innerHTML效率要比createElement高\n\n## 注册事件的两种操作\n\n传统方式和方法监听注册方式\n\n前者的特点是注册事件的唯一性，即同一个元素同一个事件只能设置一个处理函数，最后注册的处理函数将会覆盖前面注册的处理函数\n\n后者，w3c标准，推荐方法，特点：同一个元素可以注册多个监听器，按注册事件以此执行\n\n用法：\n\naddEventListener()它是一个方法，IE9之前不支持，可用attachEvent()代替\n\neventTarget.addEventListener(type,listener[,useCapture]) //将指定的监听器注册到目标对象（eventTarget）上，当该对象触发指定的事件时，就会执行事件处理函数.\n\ntype：事件类型字符串，比如clink，mouseover，注意这里不要带on\n\nlistener：事件处理函数，事件发生时，会调用该监听函数\n\nuseCapture:可选参数，是一个布尔值，默认是false\n\n ps：eventTarget在实际应用中要改成具体的对象名称 \n\n## 删除事件\n\n1、传统方式\n\neventTarget.onclick=null;\n\n2、方法监听注册方式\n\neventTarget.removeEventListener(type,listener[,useCapture]) ;\n\n注：如果你想用法2去删除事件，那么你注册事件的函数不能是个匿名函数\n\n## DOM事件流\n\n事件流描述的是从页面中接收事件的顺序\n\n3个阶段：1、捕获阶段 2、当前目标阶段 3、冒泡阶段\n\n事件冒泡：事件开始时由最具体的元素接收，然后逐级向上传播到DOM最顶层节点的过程\n\n事件捕获：由dom最顶层节点开始，然后逐级向下传播到最具体的元素接收的过程\n\n注：js代码中只能执行捕获或者冒泡其中一个阶段\n\nonclick和attachEvent只能得到冒泡阶段\n\naddEventListener(type,listener[,useCapture])  第三个参数如果是true，表示在事件捕获阶段调用事件处理程序；如果是false，表示在事件冒泡阶段调用事件处理程序。\n\n有些事件是没有冒泡的：onblur,onfocus,onmouseenter,onmouseleave\n\n## 事件对象\n\nevent就是一个事件对象，写到我们侦听函数的小括号里面，当形参来看，事件对象只有有了事件才会存在，它是统给我们自动创建的，不需要我们传递参数，事件对象，是我们事件的一系列相关数据的集合。这个事件对象我们可以自己命名，事件对象也有兼容性问题，ie678使用window.event\n\n常见事件对象的属性和方法\n\ne.target //返回的是**触发事件**的对象（元素） e是事件对象的名称，即点击了哪个元素就返回哪个元素\n\nthis返回的是**绑定事件**的对象（元素），谁绑定了这个点击事件就返回谁\n\n兼容处理方法，把新方法和老方法用或连接起来就可以了\n\n![](../image/jspic04.png)\n\n阻止默认事件发生：e（事件名）.preventDefault() \n\n低版本的用e.returnValue 还可以使用return false；\n阻止事件冒泡（重，面试问）\n\n标准写法：e.stopPropagation() //有兼容性问题\n\n比如我点击son，只想要son的事件，不想要father和document的事件，那么我就在son那个函数里面的最后写入上面这句话，这样他就只给你son的不给你其他的了\n\n在低版本浏览器用的是： e.cancelBubble = true;\n\n解决兼容性解决方案\n\n```js\nif(e && e.stopPropagation){\n    e.stopPropagation();\n}\nelse{\n    window.event.cancelBubble = true;\n}\n```\n\n## 事件委托\n\n——面试要会口述原理\n\n原理：不是每个子节点单独设置事件监听器，而是事件监听器设置在父节点上，然后利用冒泡原理影响设置每个子节点\n\ne.g.给ul注册点击事件，然后利用事件对象的target来找到当前点击的li，因为点击li，事件会冒泡到ul上，ul有注册事件，就会触发事件监听器。\n\n作用：只操作一次dom，提高了程序的性能\n\n## 鼠标事件对象\n\n![](../image/jspic05.png)\n\n注：clientX和clientY永远以可视窗口为主，拉动滚动条都不变\n\npageX和pageY得到的是距离文档最上面的距离，拉动滚动条数据会改变（重点记住这个）\n\n## 常用的键盘事件\n\n![](../image/jspic06.png)\n\n常规写法：\n\n```js\ndocument.onkeyup = function(){\n            console.log('嘿嘿嘿');\n        }\n```\n\n事件写法：\n\n```js\ndocument.addEventListener('keyup',function(){\n            console.log('来了');\n        })\n```\n\n注意：那个键盘按下时触发，如果你按住一直不放他就会一直触发，如果两个都存在，先执行keydown，再执行keypress\n\n## 键盘事件对象\n\n键盘事件对象中的keyCode属性可以得到相对应键的ASCII\n\n我们的keyup和keydown事件不区分大小写，所以你按大写还是小写都返回的是大写的那个的阿斯克码值\n\nkeypress事件是区分大小写的\n\nkeydown和keypress在文本框里面的特点：他们两个事件触发的时候，文字还没有落入文本框中\n\nkeyup事件触发时，文字已经落入文本框内\n\n# BOM\n\nBOM是浏览器对象模型，他提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是window\n\nBOM由一系列相关的对象构成，并且每个对象都提供了很多方法和属性\n\nBOM的构成：BOM比DOM大，它包含DOM\n\nwindow对象是浏览器的顶级对象，他具有双重角色\n\n1、它是js访问浏览器窗口的一个接口\n\n2、它是一个全局对象，定义在全局作用域中的变量，函数都会变成window对象的属性和方法\n\n注：window下的一个特殊属性window.name\n\n## window对象常用的事件\n\n### 窗口加载事件\n\nwindow.onload=function(){}\n\n或者\n\nwindow.addEventListener(\"load\",function(){});\n\nwindow.load是窗口加载事件，当文档内容**完全加载完成**会触发该事件，就调用的处理函数\n\n有了这个函数，可以把script放在任何地方\n\n注：window.onload传统注册事件只能写一次，如果有多个，会以最后一个window.onload为准，使用window.addEventListener则没有限制\n\ndocument.addEventListener('DOMContentLoaded',function(){})\n\nDOMContentLoaded事件触发时，仅当DOM加载完成时，不包括样式表，图片，flash等，ie9以上才支持\n\n如果页面的图片很多，从用户访问到onload触发可能需要较长的时间，交互效果就不能实现，必然影响用户的体验，此时用DOMContentLoaded事件比较合适。\n\n### 调整窗口大小事件\n\nwindow.onresize=function(){}\n\nwindow.addEventListener('resize',function(){});\n\nwindow.onresize是调整窗口大小加载事件，当触发时就调用的处理函数\n\n只要窗口大小发生改变，就会触发\n\n经常用这个做响应式布局，window.innerWidth当前屏幕的宽度\n\n### 定时器\n\n#### 设置定时器\n\nsetTimeout()\n\nsetInterval()\n\nwindow.setTimeout(调用函数，[延迟的毫秒数]); //用于设置一个定时器，该定时器在定时器到期后执行调用函数，调用函数又叫回调函数。\n\n这里的window可以省略，延迟的毫秒数可以省略，如果省略默认0\n\n这个调用函数可以直接写函数体或者函数名，但是有一点不同，之前addEventListener用的那种他也可以用。就是直接写一个函数名，区别在于他也可以写成字符串的形式，但是要加括号，比如setTimeout('callback()',3000); //这种形式不推荐\n\n页面中可能有很多定时器，我们经常给定时器加标识符（名字）\n\nwindow.setInterval(回调函数，[间隔的毫秒数]);\n\n这个方法重复调用一个函数，每隔这个时间，就去调用一次回调函数。\n\n注意：window可以省略。\n\n这个调用函数可以直接写函数，或者写函数名，或者采取‘函数名（）’三种形式。\n\n间隔的毫秒数省略就默认是0，表示每隔多少毫秒就自动调用这个函数。\n\n两种方法的区别:\n\n1、setTimeout()只调用一次，setInterval（）可以无限次调用\n\n#### 停止定时器\n\nwindow.clearTimeout(timeout ID)\n\n注：window可以省略\n\nwindow.clearInterval(interval ID);\n\n取消了先前通过调用setInterval（）建立的定时器。\n\n## this的指向\n\n全局作用域或者普通函数中this指向全局变量window（定时器里面的this也是指向window）\n\n方法调用中的this指向调用者，谁调用它就指向谁\n\n构造函数中this指向构造函数的实例\n\n##  js同步和异步\n\nhtml5中添加新特性，让js可以异步执行\n\n同步任务：同步任务都在主线程上执行，形成一个执行栈。\n\n异步任务：js异步是通过回调函数实现的。一般而言，异步任务有以下三种类型：\n\n1、普通事件，如click，resize等\n\n2、资源加载，如load，error等\n\n3、定时器，包括setInterval、setTimeout等\n\n异步任务是放在任务队列（消息队列）里面的\n\njs的执行机制：\n\n1、先执行执行栈中的同步任务\n\n2、异步任务（回调函数）放入任务队列中（准确的说法应该是提交给处理器，处理器等待响应事件发生时再放入队列中）\n\n3、一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈，开始执行。\n\n虽然同步任务执行完成了，但是他还是会返回任务队列去看看有没有新的任务产生，这种机制叫做事件循环。\n\n## location对象（重点）\n\nwindow对象给我们提供了一个location属性用于获取或设置窗体的URL，并且可以用于解析URL，因为这个属性返回的是一个对象，所以叫做location对象。\n\n### location对象的属性\n\n![](../image/jspic07.png)\n\n重点记住href和search\n\n注意：如果你用的是location.href='网站'这种方式进行页面跳转，那么你没办法回退到刚刚的页面。\n\n### location对象的方法\n\n![](../image/jspic08.png)\n\n注：用第一种方法进行页面跳转，他会记录之前访问过的页面，所以可以实现回退功能。\n\n## navigator对象\n\nnavigator对象包含有关浏览器的信息，他有很多属性，我们最常用的是userAgent，该属性可以返回由客户端发送服务器的user-agent头部的值。\n\n## history对象\n\nwindow对象给我们提供了一个history对象，与浏览器历史记录进行交互，该对象包含用户访问过的URL\n\n![history对象](../image/jspic09.png)\n\n## 消息框\n\n### 警告框\n\nalert(\"警告！\")\n\n### 确认框\n\nconfirm(\"你确定吗？\")\n\n如果用户点确认，返回值是true，如果用户点取消，返回值是false\n\n### 提示框\n\nprompt(\"请在下方输入\",\"你的答案\")\n\n如果用户点确认，那么返回值是输入的值，如果点取消，返回值是null\n\n","source":"_posts/js学习笔记.md","raw":"---\ntitle: js学习笔记\ndate: 2022-08-30 17:06:09\ntags: \n  - 学习笔记\n  - javascript\n  - 前端\ncategories: 学习笔记\nlabel: 这是一篇js的知识点总结\ntop_img: \"../image/无风险01.jpg\"\ncover: \"../image/无风险01.jpg\"\ndescription: 这是一篇js的知识点总结\n---\n\n# DOM\n\n<!--终于到这里了，好开心哈哈哈-->\n\n## 获取页面元素\n\n### 1、根据ID获取\n\n`getElementById（'id名'）`：如果id是大小写敏感的DOM对象，若在当前Document下没有找到，则返回null\n\n*ps：得现有元素，才有获取id选项，所以这个`getElementById（'id名'）`得写到标签的下面*\n\n```javascript\n<body>\n    <div id=\"time\">2019-9-9</div>\n\t<script>\n        var timer = document.getElementById('time');\n\t\tconsole.log(timer);\n\t</script>\n</body>\n```\n\n打印返回的元素对象：`console.dir(对象名)`\n\n### 2、根据标签名获取\n\n`getElementsByTagName('标签名')`:返回带有指定标签名对象的**集合**，以伪数组的形式存储。\n\n如果想要依次打印里面的元素对象我们可以采取遍历的方式。\n\n如果页面中只有一个目标标签，则返回一个伪数组，里面只有一个元素。\n\n如果页面中没有目标标签，则返回一个空的伪数组。\n\n得到的元素是动态的，就是说如果你原文的内容发生改变，获取到的内容也会相对应发生变化。\n\n#### 2.1获取整个页面中所有的指定标签的元素\n\n `document.getElementsByTagName('标签名')；`\n\n```javascript\nvar lis = document.getElementsByTagName('li');\nconsole.log(lis);\nconsole.log(lis[0]);\nfor(var i = 0;i<lis.length;i++)\n{\n\tconsole.log(lis[i]);\n}`\n```\n\n#### 2.2获取页面中某个元素内部所有指定标签的子元素\n\n`element.getElementsByTagName('标签名')；`\n\n*ps：父元素必须是单个对象，必须指明是哪一个元素对象，获取的时候不包括父元素自己*\n\n```JavaScript\n//代码功能：获取ol标签中所有li标签的内容\nvar ol = document.getElementsByTagName('ol');\nconsole.log(ol[0].getElementsByTagName('li'));// 这个就是所谓必须指明哪一个元素对象\n//一般如果要这么麻烦，还不如直接使用id法\n```\n\n### 3、通过html5新增的方法获取\n\n#### 3.1通过类名来返回元素对象集合\n\n`document.getElementsByClassName('类名')；`\n\n#### 3.2根据指定选择器返回第一个元素对象\n\n`document.querySelector('选择器')`：返回指定选择器的第一个元素对象\n\n如何判断是什么选择器呢，用类加 .  id加 # 等能够区分出这是个什么标签的。\n\n#### 3.3根据指定选择器返回所有的元素对象\n\n`document.querySelectorAll('选择器')`:返回指定选择器的所有元素对象集合\n\n```javascript\nvar a1 = document.getElementsByClassName('hei');\nconsole.log('a1');\nvar b1 = document.querySelector('.box');\nconsole.log('b1');\nvar c1 = document.querySelectorAll('.head');\nconsole.log('c1');\n```\n\n### 4、特殊元素获取\n\n#### 4.1 获取body元素\n\n`document.body` :返回body元素对象\n\n```JavaScript\nvar bodyEle = document.body;\nconsole.log(bodyEle);\n```\n\n#### 4.2 获取html元素\n\n`document.documentElement` ：返回html元素对象\n\n```javascript\nvar htmlEle = document.documentElement;\nconsole.log(htmlEle);\n```\n\n## 事件基础\n\n事件三要素：事件源、事件类型、事件处理程序\n\n事件源：获取元素\n\n事件类型：鼠标点击，鼠标经过，键盘输入等\n\n事件处理程序：通过一个函数赋值的方式\n\n```javascript\n//基本格式\nvar btn = document.getElementById('btn');\nbtn.onclick = function(){\n\t//你要执行的内容\n}\n```\n\n常见的鼠标事件\n\n![](../image/jspic01.png)\n\n### 禁止鼠标右键菜单\n\ncontextmenu主要控制应该何时显示上下文菜单，主要用于程序员取消默认的上下文菜单\n\n```js\n document.addEventListener('contextmenu',function(e){\n            e.preventDefault();\n        })\n```\n\n虽然但是，你禁用了右键菜单我还是可以照常cv来复制文字啊\n\n### 禁止鼠标选中\n\n用selectstart\n\n```js\n document.addEventListener('selectstart',function(e){\n            e.preventDefault();\n        })\n```\n\n嘿嘿，这下子你就cv不了了\n\n\n\n## 获取元素\n\n### 改变元素内容\n\nelement（某个元素名).innerText\n\n从起始位置到终止位置的内容，但它去除html标签，同时空格和换行也会去除\n\nelement.innerHTML（用的多）\n\n起始位置到终止位置的全部内容，包括html标签，同时保留空格和换行\n\n这些是普通盒子，比如说div里面的标签才能用，input里面的value没办法通过这个获取\n\n用法：如果是要让他点击按钮之后修改内容就写一个点击事件，element（某个元素名).innerText = 某个内容或者某个函数；如果是要让他页面一开始的时候就改变元素内容，就不用写事件了，直接获取变量然后写一个变量名.innerText = 某个变量或者函数 即可。\n\n#### innerText和innerHTML的区别\n\n1、innerText不识别html标签，如果你在里面写了<strong></strong>那么他会直接给你打印到屏幕上，去除空格和换行\n\n2、innerHTML是识别html标签的，保留空格和换行\n\n### 修改元素属性\n\n1、先获取元素，然后注册事件，在事件里面改就行了，比如你想让图片切换，你就写img.src = '新路径';想改变图片标题就写img.title = '新标题'，以此类推\n\n2、element.getAttribute('属性')  ps：element在实际应用中要改成你要修改的东西的名字\n\n#### element属性和element.getAttribute的区别\n\n前者获取内置属性值(元素本身自带的属性)\n\n后者主要获得自定义的属性（标准），我们程序员自定义的属性\n\n### 修改表单属性\n\n所谓表单，指input框要改变他的value，或者value，checked，selected，disabled\n\n表单里面的值，是通过value来修改的\n\ninput.value = '巴拉巴拉'；\n\n让按钮禁用：btn.disabled = true;\n\n### 修改样式属性\n\nelement.style 行内样式操作\n\nelement.className 类名样式操作\n\nps：element在实际应用中要改成你要修改的东西的名字\n\n注意：js里面的样式采用驼峰命名法，js修改style样式操作，产生的是行内样式，css权重比较高\n如果样式修改比较多，可以采取操作类名的方式更改元素样式。class因为是个保留字，因此使用className来操作元素类名属性。className会直接更改元素的类名，会覆盖原先的类名。如果想要保留原来的类名，就this.className = '原来的类名 新类名';\n\n用法：第一种就很直接，在事件函数里面直接用，并且说明你要改变style里面的哪一块就行，第二个就是你得在css那边写一个样式，然后在事件函数里面让某个函数拥有这个类名。\n\n### 设置属性值\n\nelement.属性 = ‘值’  //设置内置属性值\n\nelement.setAttribute('属性'，‘值’)  //主要针对自定义属性\n\n注意：修改class属性的话，第一个要写className，第二个写class\n\nps：element在实际应用中要改成你要设置的东西的名字\n\n### 移除属性\n\nelement.removeAttribute('属性')；\n\nps：element在实际应用中要改成你要移除的东西的名字\n\n### H5自定义属性\n\n自定义属性目的:为了保存并使用数据，有些数据可以保存在网页中而不需要保存到数据库中\n\n#### 1、设置H5自定义属性\n\nH5规定自定义属性用data-开头作为属性名并且赋值\n\ne.g. <div data-index=\"1\"></div>\n\n或者用js来设置\n\ne.g. element.setAttribute('data-index'.2)\n\nps：element在实际应用中要改成你要设置的东西的名字\n\n#### 2、获取H5自定义属性的值\n\n1）element.getAttribute('data-什么')\n\n2）H5新增element.dataset.属性名或者element.dataset['属性名']\n\n（用这种方法属性名不用加data-了）且只能用data-开头的，ie11以后才能用\n\ndataset是一个集合，里面存放了所有以data-开头的自定义属性\n\n注意：如果你是这么写的<div data-list-name=\"andy\"></div>\n\n那么你最后获取元素必须这么写： div.dataset.listName(必须驼峰命名法)\n\n## 节点操作\n\n——用于获取元素\n\n节点的基本属性：nodeType（节点类型）、nodeName（节点名称）、nodeValue（节点值）\n\n元素节点的nodeType为1\n\n属性节点的nodeType为2\n\n文本节点的nodeType为3（文本节点包含文字、空格、换行等）\n\n在实际开发中，节点操作主要操作的是元素节点。\n\n#### 节点层次\n\n![](../image/jspic02.png)\n\n#### 父节点\n\nparentNode\n\n注意：得到的是离元素最近的父节点，如果找不到父节点就返回为null\n\n#### 子节点\n\nparentNode.childNodes\n\n返回包含指定节点的子节点的集合，该集合为即时更新的集合，得到的是所有的子节点，包含元素节点和文本节点等，如果只想要得到里面的元素节点，则需要专门处理（for循环遍历，然后通过nodeType来判断是什么节点然后打印你想要的类型的节点），所以一般不推荐使用childNodes。\n\nparentNode.children(重点，常用)\n\n它是一个只读属性，返回所有的子元素节点，它只返回子元素节点，其余节点不返回。\n\nps：parentNode在实际应用中要改成具体的父节点名称\n\n#### 获取第一个子元素或者最后一个子元素\n\n法一\n\nparentNode.firstChild //获取的是第一个子节点，不管是文本节点还是个元素节点\n\nparentNode.lastChild //获取的是最后一个子节点，不管是文本节点还是元素节点\n\n法二、\n\nparentNode.firstElementChild //返回第一个子元素节点，找不到则返回null\n\nparenNode.lastElementChild //返回最后一个子元素节点，找不到则返回null\n\n注意：有兼容性问题，ie9以上才支持。\n\n法三：（实际开发用这个）\n\nparentNode.children[0] //得到第一个子元素节点\n\nparentNode.children[parentNode.chileren.length - 1]\n\n ps：parentNode在实际应用中要改成具体的父节点名称 \n\n![](../image/jspic03.png)\n\n下拉菜单的基本布局如上图所示\n\n\n\n#### 兄弟节点\n\nnode.nextSibling //返回当前元素的下一个兄弟节点，找不到则返回null，同样，也是包含所有的节点\n\n（node在实际开发中要换成你要的那个名字）\n\nnode.previousSibling //返回当前元素的上一个兄弟节点，找不到则返回null，同样，也是包含所有的节点\n\nnode.nextElementSibling //返回当前元素的下一个兄弟元素节点，找不到则返回null\n\nnode.previousElementSibling//返回当前元素的上一个兄弟元素节点，找不到则返回null\n\n ps：node在实际应用中要改成具体的节点名称 \n\n上面两个都有兼容性问题，ie9以上才支持\n\n解决兼容性问题的方法：自己封装一个兼容性函数\n\n```JavaScript\nfunction getNextElementSibling(element){\n    var el = element;\n    while(el=el.nextSibling){\n        if(el.nodeType === 1){\n            return el;\n        }\n    }\n    return null;\n}\n```\n\n#### 创建节点\n\ndocument.createElement('tagName') //动态创建元素节点\n\n#### 添加节点\n\nnode.appendChild(child) //将一个节点添加到指定父节点的子节点列表末尾，即为node添加一个孩子\n\nnode：父节点名 child：子节点名\n\nnode.insertBefore(child,指定元素) //将一个节点添加到指定父节点的子节点列表前面\n\n ps：node在实际应用中要改成具体的节点名称 \n\n#### 删除节点\n\nnode.removeChild(child) //删除一个子节点，返回删除的节点\n\n ps：node在实际应用中要改成具体的节点名称 \n\n#### 复制节点\n\nnode.cloneNode() //方法返回调用该方法的节点的一个副本，也称为克隆节点/拷贝节点\n\n注：如果括号参数为空或者false，则为浅拷贝，即只克隆复制节点本身，不可隆里面的子节点（只获取标签，不复制里面的值）\n\n深拷贝：复制标签包括复制里面的值node.cloneNode(true)\n\n你复制完之后要告诉它把复制过来的标签放在哪里他才能显示出来。 \n\n ps：node在实际应用中要改成具体的节点名称 \n\n#### 三种动态创建元素区别\n\ndocument.write()（用的很少，了解）\n\nelement.innerHTML\n\ndocument.createElement()\n\n第一个是直接将内容写入页面的内容流，但是文档流执行完毕，则会导致页面全部重绘(即创建一个新页面写入你write的内容然后原先的东西全没了)\n\n第二个是将内容写入某个dom节点，不会导致页面重绘，而且创建多个元素效率更高（不要拼接字符串，采取数组形式拼接），结构稍微复杂\n\n第三个是创建多个元素效率稍低一点但是结构更清晰\n\n总结：不同浏览器下，innerHTML效率要比createElement高\n\n## 注册事件的两种操作\n\n传统方式和方法监听注册方式\n\n前者的特点是注册事件的唯一性，即同一个元素同一个事件只能设置一个处理函数，最后注册的处理函数将会覆盖前面注册的处理函数\n\n后者，w3c标准，推荐方法，特点：同一个元素可以注册多个监听器，按注册事件以此执行\n\n用法：\n\naddEventListener()它是一个方法，IE9之前不支持，可用attachEvent()代替\n\neventTarget.addEventListener(type,listener[,useCapture]) //将指定的监听器注册到目标对象（eventTarget）上，当该对象触发指定的事件时，就会执行事件处理函数.\n\ntype：事件类型字符串，比如clink，mouseover，注意这里不要带on\n\nlistener：事件处理函数，事件发生时，会调用该监听函数\n\nuseCapture:可选参数，是一个布尔值，默认是false\n\n ps：eventTarget在实际应用中要改成具体的对象名称 \n\n## 删除事件\n\n1、传统方式\n\neventTarget.onclick=null;\n\n2、方法监听注册方式\n\neventTarget.removeEventListener(type,listener[,useCapture]) ;\n\n注：如果你想用法2去删除事件，那么你注册事件的函数不能是个匿名函数\n\n## DOM事件流\n\n事件流描述的是从页面中接收事件的顺序\n\n3个阶段：1、捕获阶段 2、当前目标阶段 3、冒泡阶段\n\n事件冒泡：事件开始时由最具体的元素接收，然后逐级向上传播到DOM最顶层节点的过程\n\n事件捕获：由dom最顶层节点开始，然后逐级向下传播到最具体的元素接收的过程\n\n注：js代码中只能执行捕获或者冒泡其中一个阶段\n\nonclick和attachEvent只能得到冒泡阶段\n\naddEventListener(type,listener[,useCapture])  第三个参数如果是true，表示在事件捕获阶段调用事件处理程序；如果是false，表示在事件冒泡阶段调用事件处理程序。\n\n有些事件是没有冒泡的：onblur,onfocus,onmouseenter,onmouseleave\n\n## 事件对象\n\nevent就是一个事件对象，写到我们侦听函数的小括号里面，当形参来看，事件对象只有有了事件才会存在，它是统给我们自动创建的，不需要我们传递参数，事件对象，是我们事件的一系列相关数据的集合。这个事件对象我们可以自己命名，事件对象也有兼容性问题，ie678使用window.event\n\n常见事件对象的属性和方法\n\ne.target //返回的是**触发事件**的对象（元素） e是事件对象的名称，即点击了哪个元素就返回哪个元素\n\nthis返回的是**绑定事件**的对象（元素），谁绑定了这个点击事件就返回谁\n\n兼容处理方法，把新方法和老方法用或连接起来就可以了\n\n![](../image/jspic04.png)\n\n阻止默认事件发生：e（事件名）.preventDefault() \n\n低版本的用e.returnValue 还可以使用return false；\n阻止事件冒泡（重，面试问）\n\n标准写法：e.stopPropagation() //有兼容性问题\n\n比如我点击son，只想要son的事件，不想要father和document的事件，那么我就在son那个函数里面的最后写入上面这句话，这样他就只给你son的不给你其他的了\n\n在低版本浏览器用的是： e.cancelBubble = true;\n\n解决兼容性解决方案\n\n```js\nif(e && e.stopPropagation){\n    e.stopPropagation();\n}\nelse{\n    window.event.cancelBubble = true;\n}\n```\n\n## 事件委托\n\n——面试要会口述原理\n\n原理：不是每个子节点单独设置事件监听器，而是事件监听器设置在父节点上，然后利用冒泡原理影响设置每个子节点\n\ne.g.给ul注册点击事件，然后利用事件对象的target来找到当前点击的li，因为点击li，事件会冒泡到ul上，ul有注册事件，就会触发事件监听器。\n\n作用：只操作一次dom，提高了程序的性能\n\n## 鼠标事件对象\n\n![](../image/jspic05.png)\n\n注：clientX和clientY永远以可视窗口为主，拉动滚动条都不变\n\npageX和pageY得到的是距离文档最上面的距离，拉动滚动条数据会改变（重点记住这个）\n\n## 常用的键盘事件\n\n![](../image/jspic06.png)\n\n常规写法：\n\n```js\ndocument.onkeyup = function(){\n            console.log('嘿嘿嘿');\n        }\n```\n\n事件写法：\n\n```js\ndocument.addEventListener('keyup',function(){\n            console.log('来了');\n        })\n```\n\n注意：那个键盘按下时触发，如果你按住一直不放他就会一直触发，如果两个都存在，先执行keydown，再执行keypress\n\n## 键盘事件对象\n\n键盘事件对象中的keyCode属性可以得到相对应键的ASCII\n\n我们的keyup和keydown事件不区分大小写，所以你按大写还是小写都返回的是大写的那个的阿斯克码值\n\nkeypress事件是区分大小写的\n\nkeydown和keypress在文本框里面的特点：他们两个事件触发的时候，文字还没有落入文本框中\n\nkeyup事件触发时，文字已经落入文本框内\n\n# BOM\n\nBOM是浏览器对象模型，他提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是window\n\nBOM由一系列相关的对象构成，并且每个对象都提供了很多方法和属性\n\nBOM的构成：BOM比DOM大，它包含DOM\n\nwindow对象是浏览器的顶级对象，他具有双重角色\n\n1、它是js访问浏览器窗口的一个接口\n\n2、它是一个全局对象，定义在全局作用域中的变量，函数都会变成window对象的属性和方法\n\n注：window下的一个特殊属性window.name\n\n## window对象常用的事件\n\n### 窗口加载事件\n\nwindow.onload=function(){}\n\n或者\n\nwindow.addEventListener(\"load\",function(){});\n\nwindow.load是窗口加载事件，当文档内容**完全加载完成**会触发该事件，就调用的处理函数\n\n有了这个函数，可以把script放在任何地方\n\n注：window.onload传统注册事件只能写一次，如果有多个，会以最后一个window.onload为准，使用window.addEventListener则没有限制\n\ndocument.addEventListener('DOMContentLoaded',function(){})\n\nDOMContentLoaded事件触发时，仅当DOM加载完成时，不包括样式表，图片，flash等，ie9以上才支持\n\n如果页面的图片很多，从用户访问到onload触发可能需要较长的时间，交互效果就不能实现，必然影响用户的体验，此时用DOMContentLoaded事件比较合适。\n\n### 调整窗口大小事件\n\nwindow.onresize=function(){}\n\nwindow.addEventListener('resize',function(){});\n\nwindow.onresize是调整窗口大小加载事件，当触发时就调用的处理函数\n\n只要窗口大小发生改变，就会触发\n\n经常用这个做响应式布局，window.innerWidth当前屏幕的宽度\n\n### 定时器\n\n#### 设置定时器\n\nsetTimeout()\n\nsetInterval()\n\nwindow.setTimeout(调用函数，[延迟的毫秒数]); //用于设置一个定时器，该定时器在定时器到期后执行调用函数，调用函数又叫回调函数。\n\n这里的window可以省略，延迟的毫秒数可以省略，如果省略默认0\n\n这个调用函数可以直接写函数体或者函数名，但是有一点不同，之前addEventListener用的那种他也可以用。就是直接写一个函数名，区别在于他也可以写成字符串的形式，但是要加括号，比如setTimeout('callback()',3000); //这种形式不推荐\n\n页面中可能有很多定时器，我们经常给定时器加标识符（名字）\n\nwindow.setInterval(回调函数，[间隔的毫秒数]);\n\n这个方法重复调用一个函数，每隔这个时间，就去调用一次回调函数。\n\n注意：window可以省略。\n\n这个调用函数可以直接写函数，或者写函数名，或者采取‘函数名（）’三种形式。\n\n间隔的毫秒数省略就默认是0，表示每隔多少毫秒就自动调用这个函数。\n\n两种方法的区别:\n\n1、setTimeout()只调用一次，setInterval（）可以无限次调用\n\n#### 停止定时器\n\nwindow.clearTimeout(timeout ID)\n\n注：window可以省略\n\nwindow.clearInterval(interval ID);\n\n取消了先前通过调用setInterval（）建立的定时器。\n\n## this的指向\n\n全局作用域或者普通函数中this指向全局变量window（定时器里面的this也是指向window）\n\n方法调用中的this指向调用者，谁调用它就指向谁\n\n构造函数中this指向构造函数的实例\n\n##  js同步和异步\n\nhtml5中添加新特性，让js可以异步执行\n\n同步任务：同步任务都在主线程上执行，形成一个执行栈。\n\n异步任务：js异步是通过回调函数实现的。一般而言，异步任务有以下三种类型：\n\n1、普通事件，如click，resize等\n\n2、资源加载，如load，error等\n\n3、定时器，包括setInterval、setTimeout等\n\n异步任务是放在任务队列（消息队列）里面的\n\njs的执行机制：\n\n1、先执行执行栈中的同步任务\n\n2、异步任务（回调函数）放入任务队列中（准确的说法应该是提交给处理器，处理器等待响应事件发生时再放入队列中）\n\n3、一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈，开始执行。\n\n虽然同步任务执行完成了，但是他还是会返回任务队列去看看有没有新的任务产生，这种机制叫做事件循环。\n\n## location对象（重点）\n\nwindow对象给我们提供了一个location属性用于获取或设置窗体的URL，并且可以用于解析URL，因为这个属性返回的是一个对象，所以叫做location对象。\n\n### location对象的属性\n\n![](../image/jspic07.png)\n\n重点记住href和search\n\n注意：如果你用的是location.href='网站'这种方式进行页面跳转，那么你没办法回退到刚刚的页面。\n\n### location对象的方法\n\n![](../image/jspic08.png)\n\n注：用第一种方法进行页面跳转，他会记录之前访问过的页面，所以可以实现回退功能。\n\n## navigator对象\n\nnavigator对象包含有关浏览器的信息，他有很多属性，我们最常用的是userAgent，该属性可以返回由客户端发送服务器的user-agent头部的值。\n\n## history对象\n\nwindow对象给我们提供了一个history对象，与浏览器历史记录进行交互，该对象包含用户访问过的URL\n\n![history对象](../image/jspic09.png)\n\n## 消息框\n\n### 警告框\n\nalert(\"警告！\")\n\n### 确认框\n\nconfirm(\"你确定吗？\")\n\n如果用户点确认，返回值是true，如果用户点取消，返回值是false\n\n### 提示框\n\nprompt(\"请在下方输入\",\"你的答案\")\n\n如果用户点确认，那么返回值是输入的值，如果点取消，返回值是null\n\n","slug":"js学习笔记","published":1,"updated":"2022-10-04T12:50:55.247Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyn4schy000eecvzcvsp5utf","content":"<h1 id=\"DOM\"><a href=\"#DOM\" class=\"headerlink\" title=\"DOM\"></a>DOM</h1><!--终于到这里了，好开心哈哈哈-->\n\n<h2 id=\"获取页面元素\"><a href=\"#获取页面元素\" class=\"headerlink\" title=\"获取页面元素\"></a>获取页面元素</h2><h3 id=\"1、根据ID获取\"><a href=\"#1、根据ID获取\" class=\"headerlink\" title=\"1、根据ID获取\"></a>1、根据ID获取</h3><p><code>getElementById（&#39;id名&#39;）</code>：如果id是大小写敏感的DOM对象，若在当前Document下没有找到，则返回null</p>\n<p><em>ps：得现有元素，才有获取id选项，所以这个<code>getElementById（&#39;id名&#39;）</code>得写到标签的下面</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;time&quot;</span>&gt;</span>2019-9-9<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"keyword\">var</span> timer = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;time&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(timer);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>打印返回的元素对象：<code>console.dir(对象名)</code></p>\n<h3 id=\"2、根据标签名获取\"><a href=\"#2、根据标签名获取\" class=\"headerlink\" title=\"2、根据标签名获取\"></a>2、根据标签名获取</h3><p><code>getElementsByTagName(&#39;标签名&#39;)</code>:返回带有指定标签名对象的<strong>集合</strong>，以伪数组的形式存储。</p>\n<p>如果想要依次打印里面的元素对象我们可以采取遍历的方式。</p>\n<p>如果页面中只有一个目标标签，则返回一个伪数组，里面只有一个元素。</p>\n<p>如果页面中没有目标标签，则返回一个空的伪数组。</p>\n<p>得到的元素是动态的，就是说如果你原文的内容发生改变，获取到的内容也会相对应发生变化。</p>\n<h4 id=\"2-1获取整个页面中所有的指定标签的元素\"><a href=\"#2-1获取整个页面中所有的指定标签的元素\" class=\"headerlink\" title=\"2.1获取整个页面中所有的指定标签的元素\"></a>2.1获取整个页面中所有的指定标签的元素</h4><p> <code>document.getElementsByTagName(&#39;标签名&#39;)；</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> lis = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;li&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(lis);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(lis[<span class=\"number\">0</span>]);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt;lis.<span class=\"property\">length</span>;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(lis[i]);</span><br><span class=\"line\">&#125;<span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2获取页面中某个元素内部所有指定标签的子元素\"><a href=\"#2-2获取页面中某个元素内部所有指定标签的子元素\" class=\"headerlink\" title=\"2.2获取页面中某个元素内部所有指定标签的子元素\"></a>2.2获取页面中某个元素内部所有指定标签的子元素</h4><p><code>element.getElementsByTagName(&#39;标签名&#39;)；</code></p>\n<p><em>ps：父元素必须是单个对象，必须指明是哪一个元素对象，获取的时候不包括父元素自己</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码功能：获取ol标签中所有li标签的内容</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ol = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;ol&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ol[<span class=\"number\">0</span>].<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;li&#x27;</span>));<span class=\"comment\">// 这个就是所谓必须指明哪一个元素对象</span></span><br><span class=\"line\"><span class=\"comment\">//一般如果要这么麻烦，还不如直接使用id法</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、通过html5新增的方法获取\"><a href=\"#3、通过html5新增的方法获取\" class=\"headerlink\" title=\"3、通过html5新增的方法获取\"></a>3、通过html5新增的方法获取</h3><h4 id=\"3-1通过类名来返回元素对象集合\"><a href=\"#3-1通过类名来返回元素对象集合\" class=\"headerlink\" title=\"3.1通过类名来返回元素对象集合\"></a>3.1通过类名来返回元素对象集合</h4><p><code>document.getElementsByClassName(&#39;类名&#39;)；</code></p>\n<h4 id=\"3-2根据指定选择器返回第一个元素对象\"><a href=\"#3-2根据指定选择器返回第一个元素对象\" class=\"headerlink\" title=\"3.2根据指定选择器返回第一个元素对象\"></a>3.2根据指定选择器返回第一个元素对象</h4><p><code>document.querySelector(&#39;选择器&#39;)</code>：返回指定选择器的第一个元素对象</p>\n<p>如何判断是什么选择器呢，用类加 .  id加 # 等能够区分出这是个什么标签的。</p>\n<h4 id=\"3-3根据指定选择器返回所有的元素对象\"><a href=\"#3-3根据指定选择器返回所有的元素对象\" class=\"headerlink\" title=\"3.3根据指定选择器返回所有的元素对象\"></a>3.3根据指定选择器返回所有的元素对象</h4><p><code>document.querySelectorAll(&#39;选择器&#39;)</code>:返回指定选择器的所有元素对象集合</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a1 = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByClassName</span>(<span class=\"string\">&#x27;hei&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a1&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> b1 = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.box&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;b1&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> c1 = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;.head&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;c1&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、特殊元素获取\"><a href=\"#4、特殊元素获取\" class=\"headerlink\" title=\"4、特殊元素获取\"></a>4、特殊元素获取</h3><h4 id=\"4-1-获取body元素\"><a href=\"#4-1-获取body元素\" class=\"headerlink\" title=\"4.1 获取body元素\"></a>4.1 获取body元素</h4><p><code>document.body</code> :返回body元素对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bodyEle = <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(bodyEle);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-2-获取html元素\"><a href=\"#4-2-获取html元素\" class=\"headerlink\" title=\"4.2 获取html元素\"></a>4.2 获取html元素</h4><p><code>document.documentElement</code> ：返回html元素对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> htmlEle = <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(htmlEle);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"事件基础\"><a href=\"#事件基础\" class=\"headerlink\" title=\"事件基础\"></a>事件基础</h2><p>事件三要素：事件源、事件类型、事件处理程序</p>\n<p>事件源：获取元素</p>\n<p>事件类型：鼠标点击，鼠标经过，键盘输入等</p>\n<p>事件处理程序：通过一个函数赋值的方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//基本格式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;btn&#x27;</span>);</span><br><span class=\"line\">btn.<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//你要执行的内容</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>常见的鼠标事件</p>\n<p><img src=\"/../image/jspic01.png\"></p>\n<h3 id=\"禁止鼠标右键菜单\"><a href=\"#禁止鼠标右键菜单\" class=\"headerlink\" title=\"禁止鼠标右键菜单\"></a>禁止鼠标右键菜单</h3><p>contextmenu主要控制应该何时显示上下文菜单，主要用于程序员取消默认的上下文菜单</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;contextmenu&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;</span><br><span class=\"line\">           e.<span class=\"title function_\">preventDefault</span>();</span><br><span class=\"line\">       &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>虽然但是，你禁用了右键菜单我还是可以照常cv来复制文字啊</p>\n<h3 id=\"禁止鼠标选中\"><a href=\"#禁止鼠标选中\" class=\"headerlink\" title=\"禁止鼠标选中\"></a>禁止鼠标选中</h3><p>用selectstart</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;selectstart&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;</span><br><span class=\"line\">           e.<span class=\"title function_\">preventDefault</span>();</span><br><span class=\"line\">       &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>嘿嘿，这下子你就cv不了了</p>\n<h2 id=\"获取元素\"><a href=\"#获取元素\" class=\"headerlink\" title=\"获取元素\"></a>获取元素</h2><h3 id=\"改变元素内容\"><a href=\"#改变元素内容\" class=\"headerlink\" title=\"改变元素内容\"></a>改变元素内容</h3><p>element（某个元素名).innerText</p>\n<p>从起始位置到终止位置的内容，但它去除html标签，同时空格和换行也会去除</p>\n<p>element.innerHTML（用的多）</p>\n<p>起始位置到终止位置的全部内容，包括html标签，同时保留空格和换行</p>\n<p>这些是普通盒子，比如说div里面的标签才能用，input里面的value没办法通过这个获取</p>\n<p>用法：如果是要让他点击按钮之后修改内容就写一个点击事件，element（某个元素名).innerText = 某个内容或者某个函数；如果是要让他页面一开始的时候就改变元素内容，就不用写事件了，直接获取变量然后写一个变量名.innerText = 某个变量或者函数 即可。</p>\n<h4 id=\"innerText和innerHTML的区别\"><a href=\"#innerText和innerHTML的区别\" class=\"headerlink\" title=\"innerText和innerHTML的区别\"></a>innerText和innerHTML的区别</h4><p>1、innerText不识别html标签，如果你在里面写了<strong></strong>那么他会直接给你打印到屏幕上，去除空格和换行</p>\n<p>2、innerHTML是识别html标签的，保留空格和换行</p>\n<h3 id=\"修改元素属性\"><a href=\"#修改元素属性\" class=\"headerlink\" title=\"修改元素属性\"></a>修改元素属性</h3><p>1、先获取元素，然后注册事件，在事件里面改就行了，比如你想让图片切换，你就写img.src = ‘新路径’;想改变图片标题就写img.title = ‘新标题’，以此类推</p>\n<p>2、element.getAttribute(‘属性’)  ps：element在实际应用中要改成你要修改的东西的名字</p>\n<h4 id=\"element属性和element-getAttribute的区别\"><a href=\"#element属性和element-getAttribute的区别\" class=\"headerlink\" title=\"element属性和element.getAttribute的区别\"></a>element属性和element.getAttribute的区别</h4><p>前者获取内置属性值(元素本身自带的属性)</p>\n<p>后者主要获得自定义的属性（标准），我们程序员自定义的属性</p>\n<h3 id=\"修改表单属性\"><a href=\"#修改表单属性\" class=\"headerlink\" title=\"修改表单属性\"></a>修改表单属性</h3><p>所谓表单，指input框要改变他的value，或者value，checked，selected，disabled</p>\n<p>表单里面的值，是通过value来修改的</p>\n<p>input.value = ‘巴拉巴拉’；</p>\n<p>让按钮禁用：btn.disabled = true;</p>\n<h3 id=\"修改样式属性\"><a href=\"#修改样式属性\" class=\"headerlink\" title=\"修改样式属性\"></a>修改样式属性</h3><p>element.style 行内样式操作</p>\n<p>element.className 类名样式操作</p>\n<p>ps：element在实际应用中要改成你要修改的东西的名字</p>\n<p>注意：js里面的样式采用驼峰命名法，js修改style样式操作，产生的是行内样式，css权重比较高<br>如果样式修改比较多，可以采取操作类名的方式更改元素样式。class因为是个保留字，因此使用className来操作元素类名属性。className会直接更改元素的类名，会覆盖原先的类名。如果想要保留原来的类名，就this.className = ‘原来的类名 新类名’;</p>\n<p>用法：第一种就很直接，在事件函数里面直接用，并且说明你要改变style里面的哪一块就行，第二个就是你得在css那边写一个样式，然后在事件函数里面让某个函数拥有这个类名。</p>\n<h3 id=\"设置属性值\"><a href=\"#设置属性值\" class=\"headerlink\" title=\"设置属性值\"></a>设置属性值</h3><p>element.属性 = ‘值’  //设置内置属性值</p>\n<p>element.setAttribute(‘属性’，‘值’)  //主要针对自定义属性</p>\n<p>注意：修改class属性的话，第一个要写className，第二个写class</p>\n<p>ps：element在实际应用中要改成你要设置的东西的名字</p>\n<h3 id=\"移除属性\"><a href=\"#移除属性\" class=\"headerlink\" title=\"移除属性\"></a>移除属性</h3><p>element.removeAttribute(‘属性’)；</p>\n<p>ps：element在实际应用中要改成你要移除的东西的名字</p>\n<h3 id=\"H5自定义属性\"><a href=\"#H5自定义属性\" class=\"headerlink\" title=\"H5自定义属性\"></a>H5自定义属性</h3><p>自定义属性目的:为了保存并使用数据，有些数据可以保存在网页中而不需要保存到数据库中</p>\n<h4 id=\"1、设置H5自定义属性\"><a href=\"#1、设置H5自定义属性\" class=\"headerlink\" title=\"1、设置H5自定义属性\"></a>1、设置H5自定义属性</h4><p>H5规定自定义属性用data-开头作为属性名并且赋值</p>\n<p>e.g. <div data-index=\"1\"></div></p>\n<p>或者用js来设置</p>\n<p>e.g. element.setAttribute(‘data-index’.2)</p>\n<p>ps：element在实际应用中要改成你要设置的东西的名字</p>\n<h4 id=\"2、获取H5自定义属性的值\"><a href=\"#2、获取H5自定义属性的值\" class=\"headerlink\" title=\"2、获取H5自定义属性的值\"></a>2、获取H5自定义属性的值</h4><p>1）element.getAttribute(‘data-什么’)</p>\n<p>2）H5新增element.dataset.属性名或者element.dataset[‘属性名’]</p>\n<p>（用这种方法属性名不用加data-了）且只能用data-开头的，ie11以后才能用</p>\n<p>dataset是一个集合，里面存放了所有以data-开头的自定义属性</p>\n<p>注意：如果你是这么写的<div data-list-name=\"andy\"></div></p>\n<p>那么你最后获取元素必须这么写： div.dataset.listName(必须驼峰命名法)</p>\n<h2 id=\"节点操作\"><a href=\"#节点操作\" class=\"headerlink\" title=\"节点操作\"></a>节点操作</h2><p>——用于获取元素</p>\n<p>节点的基本属性：nodeType（节点类型）、nodeName（节点名称）、nodeValue（节点值）</p>\n<p>元素节点的nodeType为1</p>\n<p>属性节点的nodeType为2</p>\n<p>文本节点的nodeType为3（文本节点包含文字、空格、换行等）</p>\n<p>在实际开发中，节点操作主要操作的是元素节点。</p>\n<h4 id=\"节点层次\"><a href=\"#节点层次\" class=\"headerlink\" title=\"节点层次\"></a>节点层次</h4><p><img src=\"/../image/jspic02.png\"></p>\n<h4 id=\"父节点\"><a href=\"#父节点\" class=\"headerlink\" title=\"父节点\"></a>父节点</h4><p>parentNode</p>\n<p>注意：得到的是离元素最近的父节点，如果找不到父节点就返回为null</p>\n<h4 id=\"子节点\"><a href=\"#子节点\" class=\"headerlink\" title=\"子节点\"></a>子节点</h4><p>parentNode.childNodes</p>\n<p>返回包含指定节点的子节点的集合，该集合为即时更新的集合，得到的是所有的子节点，包含元素节点和文本节点等，如果只想要得到里面的元素节点，则需要专门处理（for循环遍历，然后通过nodeType来判断是什么节点然后打印你想要的类型的节点），所以一般不推荐使用childNodes。</p>\n<p>parentNode.children(重点，常用)</p>\n<p>它是一个只读属性，返回所有的子元素节点，它只返回子元素节点，其余节点不返回。</p>\n<p>ps：parentNode在实际应用中要改成具体的父节点名称</p>\n<h4 id=\"获取第一个子元素或者最后一个子元素\"><a href=\"#获取第一个子元素或者最后一个子元素\" class=\"headerlink\" title=\"获取第一个子元素或者最后一个子元素\"></a>获取第一个子元素或者最后一个子元素</h4><p>法一</p>\n<p>parentNode.firstChild //获取的是第一个子节点，不管是文本节点还是个元素节点</p>\n<p>parentNode.lastChild //获取的是最后一个子节点，不管是文本节点还是元素节点</p>\n<p>法二、</p>\n<p>parentNode.firstElementChild //返回第一个子元素节点，找不到则返回null</p>\n<p>parenNode.lastElementChild //返回最后一个子元素节点，找不到则返回null</p>\n<p>注意：有兼容性问题，ie9以上才支持。</p>\n<p>法三：（实际开发用这个）</p>\n<p>parentNode.children[0] //得到第一个子元素节点</p>\n<p>parentNode.children[parentNode.chileren.length - 1]</p>\n<p> ps：parentNode在实际应用中要改成具体的父节点名称 </p>\n<p><img src=\"/../image/jspic03.png\"></p>\n<p>下拉菜单的基本布局如上图所示</p>\n<h4 id=\"兄弟节点\"><a href=\"#兄弟节点\" class=\"headerlink\" title=\"兄弟节点\"></a>兄弟节点</h4><p>node.nextSibling //返回当前元素的下一个兄弟节点，找不到则返回null，同样，也是包含所有的节点</p>\n<p>（node在实际开发中要换成你要的那个名字）</p>\n<p>node.previousSibling //返回当前元素的上一个兄弟节点，找不到则返回null，同样，也是包含所有的节点</p>\n<p>node.nextElementSibling //返回当前元素的下一个兄弟元素节点，找不到则返回null</p>\n<p>node.previousElementSibling//返回当前元素的上一个兄弟元素节点，找不到则返回null</p>\n<p> ps：node在实际应用中要改成具体的节点名称 </p>\n<p>上面两个都有兼容性问题，ie9以上才支持</p>\n<p>解决兼容性问题的方法：自己封装一个兼容性函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getNextElementSibling</span>(<span class=\"params\">element</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> el = element;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(el=el.<span class=\"property\">nextSibling</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(el.<span class=\"property\">nodeType</span> === <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> el;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建节点\"><a href=\"#创建节点\" class=\"headerlink\" title=\"创建节点\"></a>创建节点</h4><p>document.createElement(‘tagName’) //动态创建元素节点</p>\n<h4 id=\"添加节点\"><a href=\"#添加节点\" class=\"headerlink\" title=\"添加节点\"></a>添加节点</h4><p>node.appendChild(child) //将一个节点添加到指定父节点的子节点列表末尾，即为node添加一个孩子</p>\n<p>node：父节点名 child：子节点名</p>\n<p>node.insertBefore(child,指定元素) //将一个节点添加到指定父节点的子节点列表前面</p>\n<p> ps：node在实际应用中要改成具体的节点名称 </p>\n<h4 id=\"删除节点\"><a href=\"#删除节点\" class=\"headerlink\" title=\"删除节点\"></a>删除节点</h4><p>node.removeChild(child) //删除一个子节点，返回删除的节点</p>\n<p> ps：node在实际应用中要改成具体的节点名称 </p>\n<h4 id=\"复制节点\"><a href=\"#复制节点\" class=\"headerlink\" title=\"复制节点\"></a>复制节点</h4><p>node.cloneNode() //方法返回调用该方法的节点的一个副本，也称为克隆节点/拷贝节点</p>\n<p>注：如果括号参数为空或者false，则为浅拷贝，即只克隆复制节点本身，不可隆里面的子节点（只获取标签，不复制里面的值）</p>\n<p>深拷贝：复制标签包括复制里面的值node.cloneNode(true)</p>\n<p>你复制完之后要告诉它把复制过来的标签放在哪里他才能显示出来。 </p>\n<p> ps：node在实际应用中要改成具体的节点名称 </p>\n<h4 id=\"三种动态创建元素区别\"><a href=\"#三种动态创建元素区别\" class=\"headerlink\" title=\"三种动态创建元素区别\"></a>三种动态创建元素区别</h4><p>document.write()（用的很少，了解）</p>\n<p>element.innerHTML</p>\n<p>document.createElement()</p>\n<p>第一个是直接将内容写入页面的内容流，但是文档流执行完毕，则会导致页面全部重绘(即创建一个新页面写入你write的内容然后原先的东西全没了)</p>\n<p>第二个是将内容写入某个dom节点，不会导致页面重绘，而且创建多个元素效率更高（不要拼接字符串，采取数组形式拼接），结构稍微复杂</p>\n<p>第三个是创建多个元素效率稍低一点但是结构更清晰</p>\n<p>总结：不同浏览器下，innerHTML效率要比createElement高</p>\n<h2 id=\"注册事件的两种操作\"><a href=\"#注册事件的两种操作\" class=\"headerlink\" title=\"注册事件的两种操作\"></a>注册事件的两种操作</h2><p>传统方式和方法监听注册方式</p>\n<p>前者的特点是注册事件的唯一性，即同一个元素同一个事件只能设置一个处理函数，最后注册的处理函数将会覆盖前面注册的处理函数</p>\n<p>后者，w3c标准，推荐方法，特点：同一个元素可以注册多个监听器，按注册事件以此执行</p>\n<p>用法：</p>\n<p>addEventListener()它是一个方法，IE9之前不支持，可用attachEvent()代替</p>\n<p>eventTarget.addEventListener(type,listener[,useCapture]) //将指定的监听器注册到目标对象（eventTarget）上，当该对象触发指定的事件时，就会执行事件处理函数.</p>\n<p>type：事件类型字符串，比如clink，mouseover，注意这里不要带on</p>\n<p>listener：事件处理函数，事件发生时，会调用该监听函数</p>\n<p>useCapture:可选参数，是一个布尔值，默认是false</p>\n<p> ps：eventTarget在实际应用中要改成具体的对象名称 </p>\n<h2 id=\"删除事件\"><a href=\"#删除事件\" class=\"headerlink\" title=\"删除事件\"></a>删除事件</h2><p>1、传统方式</p>\n<p>eventTarget.onclick=null;</p>\n<p>2、方法监听注册方式</p>\n<p>eventTarget.removeEventListener(type,listener[,useCapture]) ;</p>\n<p>注：如果你想用法2去删除事件，那么你注册事件的函数不能是个匿名函数</p>\n<h2 id=\"DOM事件流\"><a href=\"#DOM事件流\" class=\"headerlink\" title=\"DOM事件流\"></a>DOM事件流</h2><p>事件流描述的是从页面中接收事件的顺序</p>\n<p>3个阶段：1、捕获阶段 2、当前目标阶段 3、冒泡阶段</p>\n<p>事件冒泡：事件开始时由最具体的元素接收，然后逐级向上传播到DOM最顶层节点的过程</p>\n<p>事件捕获：由dom最顶层节点开始，然后逐级向下传播到最具体的元素接收的过程</p>\n<p>注：js代码中只能执行捕获或者冒泡其中一个阶段</p>\n<p>onclick和attachEvent只能得到冒泡阶段</p>\n<p>addEventListener(type,listener[,useCapture])  第三个参数如果是true，表示在事件捕获阶段调用事件处理程序；如果是false，表示在事件冒泡阶段调用事件处理程序。</p>\n<p>有些事件是没有冒泡的：onblur,onfocus,onmouseenter,onmouseleave</p>\n<h2 id=\"事件对象\"><a href=\"#事件对象\" class=\"headerlink\" title=\"事件对象\"></a>事件对象</h2><p>event就是一个事件对象，写到我们侦听函数的小括号里面，当形参来看，事件对象只有有了事件才会存在，它是统给我们自动创建的，不需要我们传递参数，事件对象，是我们事件的一系列相关数据的集合。这个事件对象我们可以自己命名，事件对象也有兼容性问题，ie678使用window.event</p>\n<p>常见事件对象的属性和方法</p>\n<p>e.target //返回的是<strong>触发事件</strong>的对象（元素） e是事件对象的名称，即点击了哪个元素就返回哪个元素</p>\n<p>this返回的是<strong>绑定事件</strong>的对象（元素），谁绑定了这个点击事件就返回谁</p>\n<p>兼容处理方法，把新方法和老方法用或连接起来就可以了</p>\n<p><img src=\"/../image/jspic04.png\"></p>\n<p>阻止默认事件发生：e（事件名）.preventDefault() </p>\n<p>低版本的用e.returnValue 还可以使用return false；<br>阻止事件冒泡（重，面试问）</p>\n<p>标准写法：e.stopPropagation() //有兼容性问题</p>\n<p>比如我点击son，只想要son的事件，不想要father和document的事件，那么我就在son那个函数里面的最后写入上面这句话，这样他就只给你son的不给你其他的了</p>\n<p>在低版本浏览器用的是： e.cancelBubble = true;</p>\n<p>解决兼容性解决方案</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(e &amp;&amp; e.<span class=\"property\">stopPropagation</span>)&#123;</span><br><span class=\"line\">    e.<span class=\"title function_\">stopPropagation</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"property\">event</span>.<span class=\"property\">cancelBubble</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"事件委托\"><a href=\"#事件委托\" class=\"headerlink\" title=\"事件委托\"></a>事件委托</h2><p>——面试要会口述原理</p>\n<p>原理：不是每个子节点单独设置事件监听器，而是事件监听器设置在父节点上，然后利用冒泡原理影响设置每个子节点</p>\n<p>e.g.给ul注册点击事件，然后利用事件对象的target来找到当前点击的li，因为点击li，事件会冒泡到ul上，ul有注册事件，就会触发事件监听器。</p>\n<p>作用：只操作一次dom，提高了程序的性能</p>\n<h2 id=\"鼠标事件对象\"><a href=\"#鼠标事件对象\" class=\"headerlink\" title=\"鼠标事件对象\"></a>鼠标事件对象</h2><p><img src=\"/../image/jspic05.png\"></p>\n<p>注：clientX和clientY永远以可视窗口为主，拉动滚动条都不变</p>\n<p>pageX和pageY得到的是距离文档最上面的距离，拉动滚动条数据会改变（重点记住这个）</p>\n<h2 id=\"常用的键盘事件\"><a href=\"#常用的键盘事件\" class=\"headerlink\" title=\"常用的键盘事件\"></a>常用的键盘事件</h2><p><img src=\"/../image/jspic06.png\"></p>\n<p>常规写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">onkeyup</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;嘿嘿嘿&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>事件写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;keyup&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;来了&#x27;</span>);</span><br><span class=\"line\">        &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>注意：那个键盘按下时触发，如果你按住一直不放他就会一直触发，如果两个都存在，先执行keydown，再执行keypress</p>\n<h2 id=\"键盘事件对象\"><a href=\"#键盘事件对象\" class=\"headerlink\" title=\"键盘事件对象\"></a>键盘事件对象</h2><p>键盘事件对象中的keyCode属性可以得到相对应键的ASCII</p>\n<p>我们的keyup和keydown事件不区分大小写，所以你按大写还是小写都返回的是大写的那个的阿斯克码值</p>\n<p>keypress事件是区分大小写的</p>\n<p>keydown和keypress在文本框里面的特点：他们两个事件触发的时候，文字还没有落入文本框中</p>\n<p>keyup事件触发时，文字已经落入文本框内</p>\n<h1 id=\"BOM\"><a href=\"#BOM\" class=\"headerlink\" title=\"BOM\"></a>BOM</h1><p>BOM是浏览器对象模型，他提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是window</p>\n<p>BOM由一系列相关的对象构成，并且每个对象都提供了很多方法和属性</p>\n<p>BOM的构成：BOM比DOM大，它包含DOM</p>\n<p>window对象是浏览器的顶级对象，他具有双重角色</p>\n<p>1、它是js访问浏览器窗口的一个接口</p>\n<p>2、它是一个全局对象，定义在全局作用域中的变量，函数都会变成window对象的属性和方法</p>\n<p>注：window下的一个特殊属性window.name</p>\n<h2 id=\"window对象常用的事件\"><a href=\"#window对象常用的事件\" class=\"headerlink\" title=\"window对象常用的事件\"></a>window对象常用的事件</h2><h3 id=\"窗口加载事件\"><a href=\"#窗口加载事件\" class=\"headerlink\" title=\"窗口加载事件\"></a>窗口加载事件</h3><p>window.onload=function(){}</p>\n<p>或者</p>\n<p>window.addEventListener(“load”,function(){});</p>\n<p>window.load是窗口加载事件，当文档内容<strong>完全加载完成</strong>会触发该事件，就调用的处理函数</p>\n<p>有了这个函数，可以把script放在任何地方</p>\n<p>注：window.onload传统注册事件只能写一次，如果有多个，会以最后一个window.onload为准，使用window.addEventListener则没有限制</p>\n<p>document.addEventListener(‘DOMContentLoaded’,function(){})</p>\n<p>DOMContentLoaded事件触发时，仅当DOM加载完成时，不包括样式表，图片，flash等，ie9以上才支持</p>\n<p>如果页面的图片很多，从用户访问到onload触发可能需要较长的时间，交互效果就不能实现，必然影响用户的体验，此时用DOMContentLoaded事件比较合适。</p>\n<h3 id=\"调整窗口大小事件\"><a href=\"#调整窗口大小事件\" class=\"headerlink\" title=\"调整窗口大小事件\"></a>调整窗口大小事件</h3><p>window.onresize=function(){}</p>\n<p>window.addEventListener(‘resize’,function(){});</p>\n<p>window.onresize是调整窗口大小加载事件，当触发时就调用的处理函数</p>\n<p>只要窗口大小发生改变，就会触发</p>\n<p>经常用这个做响应式布局，window.innerWidth当前屏幕的宽度</p>\n<h3 id=\"定时器\"><a href=\"#定时器\" class=\"headerlink\" title=\"定时器\"></a>定时器</h3><h4 id=\"设置定时器\"><a href=\"#设置定时器\" class=\"headerlink\" title=\"设置定时器\"></a>设置定时器</h4><p>setTimeout()</p>\n<p>setInterval()</p>\n<p>window.setTimeout(调用函数，[延迟的毫秒数]); //用于设置一个定时器，该定时器在定时器到期后执行调用函数，调用函数又叫回调函数。</p>\n<p>这里的window可以省略，延迟的毫秒数可以省略，如果省略默认0</p>\n<p>这个调用函数可以直接写函数体或者函数名，但是有一点不同，之前addEventListener用的那种他也可以用。就是直接写一个函数名，区别在于他也可以写成字符串的形式，但是要加括号，比如setTimeout(‘callback()’,3000); //这种形式不推荐</p>\n<p>页面中可能有很多定时器，我们经常给定时器加标识符（名字）</p>\n<p>window.setInterval(回调函数，[间隔的毫秒数]);</p>\n<p>这个方法重复调用一个函数，每隔这个时间，就去调用一次回调函数。</p>\n<p>注意：window可以省略。</p>\n<p>这个调用函数可以直接写函数，或者写函数名，或者采取‘函数名（）’三种形式。</p>\n<p>间隔的毫秒数省略就默认是0，表示每隔多少毫秒就自动调用这个函数。</p>\n<p>两种方法的区别:</p>\n<p>1、setTimeout()只调用一次，setInterval（）可以无限次调用</p>\n<h4 id=\"停止定时器\"><a href=\"#停止定时器\" class=\"headerlink\" title=\"停止定时器\"></a>停止定时器</h4><p>window.clearTimeout(timeout ID)</p>\n<p>注：window可以省略</p>\n<p>window.clearInterval(interval ID);</p>\n<p>取消了先前通过调用setInterval（）建立的定时器。</p>\n<h2 id=\"this的指向\"><a href=\"#this的指向\" class=\"headerlink\" title=\"this的指向\"></a>this的指向</h2><p>全局作用域或者普通函数中this指向全局变量window（定时器里面的this也是指向window）</p>\n<p>方法调用中的this指向调用者，谁调用它就指向谁</p>\n<p>构造函数中this指向构造函数的实例</p>\n<h2 id=\"js同步和异步\"><a href=\"#js同步和异步\" class=\"headerlink\" title=\"js同步和异步\"></a>js同步和异步</h2><p>html5中添加新特性，让js可以异步执行</p>\n<p>同步任务：同步任务都在主线程上执行，形成一个执行栈。</p>\n<p>异步任务：js异步是通过回调函数实现的。一般而言，异步任务有以下三种类型：</p>\n<p>1、普通事件，如click，resize等</p>\n<p>2、资源加载，如load，error等</p>\n<p>3、定时器，包括setInterval、setTimeout等</p>\n<p>异步任务是放在任务队列（消息队列）里面的</p>\n<p>js的执行机制：</p>\n<p>1、先执行执行栈中的同步任务</p>\n<p>2、异步任务（回调函数）放入任务队列中（准确的说法应该是提交给处理器，处理器等待响应事件发生时再放入队列中）</p>\n<p>3、一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈，开始执行。</p>\n<p>虽然同步任务执行完成了，但是他还是会返回任务队列去看看有没有新的任务产生，这种机制叫做事件循环。</p>\n<h2 id=\"location对象（重点）\"><a href=\"#location对象（重点）\" class=\"headerlink\" title=\"location对象（重点）\"></a>location对象（重点）</h2><p>window对象给我们提供了一个location属性用于获取或设置窗体的URL，并且可以用于解析URL，因为这个属性返回的是一个对象，所以叫做location对象。</p>\n<h3 id=\"location对象的属性\"><a href=\"#location对象的属性\" class=\"headerlink\" title=\"location对象的属性\"></a>location对象的属性</h3><p><img src=\"/../image/jspic07.png\"></p>\n<p>重点记住href和search</p>\n<p>注意：如果你用的是location.href=’网站’这种方式进行页面跳转，那么你没办法回退到刚刚的页面。</p>\n<h3 id=\"location对象的方法\"><a href=\"#location对象的方法\" class=\"headerlink\" title=\"location对象的方法\"></a>location对象的方法</h3><p><img src=\"/../image/jspic08.png\"></p>\n<p>注：用第一种方法进行页面跳转，他会记录之前访问过的页面，所以可以实现回退功能。</p>\n<h2 id=\"navigator对象\"><a href=\"#navigator对象\" class=\"headerlink\" title=\"navigator对象\"></a>navigator对象</h2><p>navigator对象包含有关浏览器的信息，他有很多属性，我们最常用的是userAgent，该属性可以返回由客户端发送服务器的user-agent头部的值。</p>\n<h2 id=\"history对象\"><a href=\"#history对象\" class=\"headerlink\" title=\"history对象\"></a>history对象</h2><p>window对象给我们提供了一个history对象，与浏览器历史记录进行交互，该对象包含用户访问过的URL</p>\n<p><img src=\"/../image/jspic09.png\" alt=\"history对象\"></p>\n<h2 id=\"消息框\"><a href=\"#消息框\" class=\"headerlink\" title=\"消息框\"></a>消息框</h2><h3 id=\"警告框\"><a href=\"#警告框\" class=\"headerlink\" title=\"警告框\"></a>警告框</h3><p>alert(“警告！”)</p>\n<h3 id=\"确认框\"><a href=\"#确认框\" class=\"headerlink\" title=\"确认框\"></a>确认框</h3><p>confirm(“你确定吗？”)</p>\n<p>如果用户点确认，返回值是true，如果用户点取消，返回值是false</p>\n<h3 id=\"提示框\"><a href=\"#提示框\" class=\"headerlink\" title=\"提示框\"></a>提示框</h3><p>prompt(“请在下方输入”,”你的答案”)</p>\n<p>如果用户点确认，那么返回值是输入的值，如果点取消，返回值是null</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"DOM\"><a href=\"#DOM\" class=\"headerlink\" title=\"DOM\"></a>DOM</h1><!--终于到这里了，好开心哈哈哈-->\n\n<h2 id=\"获取页面元素\"><a href=\"#获取页面元素\" class=\"headerlink\" title=\"获取页面元素\"></a>获取页面元素</h2><h3 id=\"1、根据ID获取\"><a href=\"#1、根据ID获取\" class=\"headerlink\" title=\"1、根据ID获取\"></a>1、根据ID获取</h3><p><code>getElementById（&#39;id名&#39;）</code>：如果id是大小写敏感的DOM对象，若在当前Document下没有找到，则返回null</p>\n<p><em>ps：得现有元素，才有获取id选项，所以这个<code>getElementById（&#39;id名&#39;）</code>得写到标签的下面</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;time&quot;</span>&gt;</span>2019-9-9<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">\t<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"keyword\">var</span> timer = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;time&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(timer);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">\t</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<p>打印返回的元素对象：<code>console.dir(对象名)</code></p>\n<h3 id=\"2、根据标签名获取\"><a href=\"#2、根据标签名获取\" class=\"headerlink\" title=\"2、根据标签名获取\"></a>2、根据标签名获取</h3><p><code>getElementsByTagName(&#39;标签名&#39;)</code>:返回带有指定标签名对象的<strong>集合</strong>，以伪数组的形式存储。</p>\n<p>如果想要依次打印里面的元素对象我们可以采取遍历的方式。</p>\n<p>如果页面中只有一个目标标签，则返回一个伪数组，里面只有一个元素。</p>\n<p>如果页面中没有目标标签，则返回一个空的伪数组。</p>\n<p>得到的元素是动态的，就是说如果你原文的内容发生改变，获取到的内容也会相对应发生变化。</p>\n<h4 id=\"2-1获取整个页面中所有的指定标签的元素\"><a href=\"#2-1获取整个页面中所有的指定标签的元素\" class=\"headerlink\" title=\"2.1获取整个页面中所有的指定标签的元素\"></a>2.1获取整个页面中所有的指定标签的元素</h4><p> <code>document.getElementsByTagName(&#39;标签名&#39;)；</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> lis = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;li&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(lis);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(lis[<span class=\"number\">0</span>]);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt;lis.<span class=\"property\">length</span>;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(lis[i]);</span><br><span class=\"line\">&#125;<span class=\"string\">`</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2获取页面中某个元素内部所有指定标签的子元素\"><a href=\"#2-2获取页面中某个元素内部所有指定标签的子元素\" class=\"headerlink\" title=\"2.2获取页面中某个元素内部所有指定标签的子元素\"></a>2.2获取页面中某个元素内部所有指定标签的子元素</h4><p><code>element.getElementsByTagName(&#39;标签名&#39;)；</code></p>\n<p><em>ps：父元素必须是单个对象，必须指明是哪一个元素对象，获取的时候不包括父元素自己</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码功能：获取ol标签中所有li标签的内容</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ol = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;ol&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ol[<span class=\"number\">0</span>].<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;li&#x27;</span>));<span class=\"comment\">// 这个就是所谓必须指明哪一个元素对象</span></span><br><span class=\"line\"><span class=\"comment\">//一般如果要这么麻烦，还不如直接使用id法</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、通过html5新增的方法获取\"><a href=\"#3、通过html5新增的方法获取\" class=\"headerlink\" title=\"3、通过html5新增的方法获取\"></a>3、通过html5新增的方法获取</h3><h4 id=\"3-1通过类名来返回元素对象集合\"><a href=\"#3-1通过类名来返回元素对象集合\" class=\"headerlink\" title=\"3.1通过类名来返回元素对象集合\"></a>3.1通过类名来返回元素对象集合</h4><p><code>document.getElementsByClassName(&#39;类名&#39;)；</code></p>\n<h4 id=\"3-2根据指定选择器返回第一个元素对象\"><a href=\"#3-2根据指定选择器返回第一个元素对象\" class=\"headerlink\" title=\"3.2根据指定选择器返回第一个元素对象\"></a>3.2根据指定选择器返回第一个元素对象</h4><p><code>document.querySelector(&#39;选择器&#39;)</code>：返回指定选择器的第一个元素对象</p>\n<p>如何判断是什么选择器呢，用类加 .  id加 # 等能够区分出这是个什么标签的。</p>\n<h4 id=\"3-3根据指定选择器返回所有的元素对象\"><a href=\"#3-3根据指定选择器返回所有的元素对象\" class=\"headerlink\" title=\"3.3根据指定选择器返回所有的元素对象\"></a>3.3根据指定选择器返回所有的元素对象</h4><p><code>document.querySelectorAll(&#39;选择器&#39;)</code>:返回指定选择器的所有元素对象集合</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a1 = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByClassName</span>(<span class=\"string\">&#x27;hei&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a1&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> b1 = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.box&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;b1&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> c1 = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;.head&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;c1&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、特殊元素获取\"><a href=\"#4、特殊元素获取\" class=\"headerlink\" title=\"4、特殊元素获取\"></a>4、特殊元素获取</h3><h4 id=\"4-1-获取body元素\"><a href=\"#4-1-获取body元素\" class=\"headerlink\" title=\"4.1 获取body元素\"></a>4.1 获取body元素</h4><p><code>document.body</code> :返回body元素对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bodyEle = <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(bodyEle);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-2-获取html元素\"><a href=\"#4-2-获取html元素\" class=\"headerlink\" title=\"4.2 获取html元素\"></a>4.2 获取html元素</h4><p><code>document.documentElement</code> ：返回html元素对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> htmlEle = <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(htmlEle);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"事件基础\"><a href=\"#事件基础\" class=\"headerlink\" title=\"事件基础\"></a>事件基础</h2><p>事件三要素：事件源、事件类型、事件处理程序</p>\n<p>事件源：获取元素</p>\n<p>事件类型：鼠标点击，鼠标经过，键盘输入等</p>\n<p>事件处理程序：通过一个函数赋值的方式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//基本格式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> btn = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;btn&#x27;</span>);</span><br><span class=\"line\">btn.<span class=\"property\">onclick</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//你要执行的内容</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>常见的鼠标事件</p>\n<p><img src=\"/../image/jspic01.png\"></p>\n<h3 id=\"禁止鼠标右键菜单\"><a href=\"#禁止鼠标右键菜单\" class=\"headerlink\" title=\"禁止鼠标右键菜单\"></a>禁止鼠标右键菜单</h3><p>contextmenu主要控制应该何时显示上下文菜单，主要用于程序员取消默认的上下文菜单</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;contextmenu&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;</span><br><span class=\"line\">           e.<span class=\"title function_\">preventDefault</span>();</span><br><span class=\"line\">       &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>虽然但是，你禁用了右键菜单我还是可以照常cv来复制文字啊</p>\n<h3 id=\"禁止鼠标选中\"><a href=\"#禁止鼠标选中\" class=\"headerlink\" title=\"禁止鼠标选中\"></a>禁止鼠标选中</h3><p>用selectstart</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;selectstart&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">e</span>)&#123;</span><br><span class=\"line\">           e.<span class=\"title function_\">preventDefault</span>();</span><br><span class=\"line\">       &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>嘿嘿，这下子你就cv不了了</p>\n<h2 id=\"获取元素\"><a href=\"#获取元素\" class=\"headerlink\" title=\"获取元素\"></a>获取元素</h2><h3 id=\"改变元素内容\"><a href=\"#改变元素内容\" class=\"headerlink\" title=\"改变元素内容\"></a>改变元素内容</h3><p>element（某个元素名).innerText</p>\n<p>从起始位置到终止位置的内容，但它去除html标签，同时空格和换行也会去除</p>\n<p>element.innerHTML（用的多）</p>\n<p>起始位置到终止位置的全部内容，包括html标签，同时保留空格和换行</p>\n<p>这些是普通盒子，比如说div里面的标签才能用，input里面的value没办法通过这个获取</p>\n<p>用法：如果是要让他点击按钮之后修改内容就写一个点击事件，element（某个元素名).innerText = 某个内容或者某个函数；如果是要让他页面一开始的时候就改变元素内容，就不用写事件了，直接获取变量然后写一个变量名.innerText = 某个变量或者函数 即可。</p>\n<h4 id=\"innerText和innerHTML的区别\"><a href=\"#innerText和innerHTML的区别\" class=\"headerlink\" title=\"innerText和innerHTML的区别\"></a>innerText和innerHTML的区别</h4><p>1、innerText不识别html标签，如果你在里面写了<strong></strong>那么他会直接给你打印到屏幕上，去除空格和换行</p>\n<p>2、innerHTML是识别html标签的，保留空格和换行</p>\n<h3 id=\"修改元素属性\"><a href=\"#修改元素属性\" class=\"headerlink\" title=\"修改元素属性\"></a>修改元素属性</h3><p>1、先获取元素，然后注册事件，在事件里面改就行了，比如你想让图片切换，你就写img.src = ‘新路径’;想改变图片标题就写img.title = ‘新标题’，以此类推</p>\n<p>2、element.getAttribute(‘属性’)  ps：element在实际应用中要改成你要修改的东西的名字</p>\n<h4 id=\"element属性和element-getAttribute的区别\"><a href=\"#element属性和element-getAttribute的区别\" class=\"headerlink\" title=\"element属性和element.getAttribute的区别\"></a>element属性和element.getAttribute的区别</h4><p>前者获取内置属性值(元素本身自带的属性)</p>\n<p>后者主要获得自定义的属性（标准），我们程序员自定义的属性</p>\n<h3 id=\"修改表单属性\"><a href=\"#修改表单属性\" class=\"headerlink\" title=\"修改表单属性\"></a>修改表单属性</h3><p>所谓表单，指input框要改变他的value，或者value，checked，selected，disabled</p>\n<p>表单里面的值，是通过value来修改的</p>\n<p>input.value = ‘巴拉巴拉’；</p>\n<p>让按钮禁用：btn.disabled = true;</p>\n<h3 id=\"修改样式属性\"><a href=\"#修改样式属性\" class=\"headerlink\" title=\"修改样式属性\"></a>修改样式属性</h3><p>element.style 行内样式操作</p>\n<p>element.className 类名样式操作</p>\n<p>ps：element在实际应用中要改成你要修改的东西的名字</p>\n<p>注意：js里面的样式采用驼峰命名法，js修改style样式操作，产生的是行内样式，css权重比较高<br>如果样式修改比较多，可以采取操作类名的方式更改元素样式。class因为是个保留字，因此使用className来操作元素类名属性。className会直接更改元素的类名，会覆盖原先的类名。如果想要保留原来的类名，就this.className = ‘原来的类名 新类名’;</p>\n<p>用法：第一种就很直接，在事件函数里面直接用，并且说明你要改变style里面的哪一块就行，第二个就是你得在css那边写一个样式，然后在事件函数里面让某个函数拥有这个类名。</p>\n<h3 id=\"设置属性值\"><a href=\"#设置属性值\" class=\"headerlink\" title=\"设置属性值\"></a>设置属性值</h3><p>element.属性 = ‘值’  //设置内置属性值</p>\n<p>element.setAttribute(‘属性’，‘值’)  //主要针对自定义属性</p>\n<p>注意：修改class属性的话，第一个要写className，第二个写class</p>\n<p>ps：element在实际应用中要改成你要设置的东西的名字</p>\n<h3 id=\"移除属性\"><a href=\"#移除属性\" class=\"headerlink\" title=\"移除属性\"></a>移除属性</h3><p>element.removeAttribute(‘属性’)；</p>\n<p>ps：element在实际应用中要改成你要移除的东西的名字</p>\n<h3 id=\"H5自定义属性\"><a href=\"#H5自定义属性\" class=\"headerlink\" title=\"H5自定义属性\"></a>H5自定义属性</h3><p>自定义属性目的:为了保存并使用数据，有些数据可以保存在网页中而不需要保存到数据库中</p>\n<h4 id=\"1、设置H5自定义属性\"><a href=\"#1、设置H5自定义属性\" class=\"headerlink\" title=\"1、设置H5自定义属性\"></a>1、设置H5自定义属性</h4><p>H5规定自定义属性用data-开头作为属性名并且赋值</p>\n<p>e.g. <div data-index=\"1\"></div></p>\n<p>或者用js来设置</p>\n<p>e.g. element.setAttribute(‘data-index’.2)</p>\n<p>ps：element在实际应用中要改成你要设置的东西的名字</p>\n<h4 id=\"2、获取H5自定义属性的值\"><a href=\"#2、获取H5自定义属性的值\" class=\"headerlink\" title=\"2、获取H5自定义属性的值\"></a>2、获取H5自定义属性的值</h4><p>1）element.getAttribute(‘data-什么’)</p>\n<p>2）H5新增element.dataset.属性名或者element.dataset[‘属性名’]</p>\n<p>（用这种方法属性名不用加data-了）且只能用data-开头的，ie11以后才能用</p>\n<p>dataset是一个集合，里面存放了所有以data-开头的自定义属性</p>\n<p>注意：如果你是这么写的<div data-list-name=\"andy\"></div></p>\n<p>那么你最后获取元素必须这么写： div.dataset.listName(必须驼峰命名法)</p>\n<h2 id=\"节点操作\"><a href=\"#节点操作\" class=\"headerlink\" title=\"节点操作\"></a>节点操作</h2><p>——用于获取元素</p>\n<p>节点的基本属性：nodeType（节点类型）、nodeName（节点名称）、nodeValue（节点值）</p>\n<p>元素节点的nodeType为1</p>\n<p>属性节点的nodeType为2</p>\n<p>文本节点的nodeType为3（文本节点包含文字、空格、换行等）</p>\n<p>在实际开发中，节点操作主要操作的是元素节点。</p>\n<h4 id=\"节点层次\"><a href=\"#节点层次\" class=\"headerlink\" title=\"节点层次\"></a>节点层次</h4><p><img src=\"/../image/jspic02.png\"></p>\n<h4 id=\"父节点\"><a href=\"#父节点\" class=\"headerlink\" title=\"父节点\"></a>父节点</h4><p>parentNode</p>\n<p>注意：得到的是离元素最近的父节点，如果找不到父节点就返回为null</p>\n<h4 id=\"子节点\"><a href=\"#子节点\" class=\"headerlink\" title=\"子节点\"></a>子节点</h4><p>parentNode.childNodes</p>\n<p>返回包含指定节点的子节点的集合，该集合为即时更新的集合，得到的是所有的子节点，包含元素节点和文本节点等，如果只想要得到里面的元素节点，则需要专门处理（for循环遍历，然后通过nodeType来判断是什么节点然后打印你想要的类型的节点），所以一般不推荐使用childNodes。</p>\n<p>parentNode.children(重点，常用)</p>\n<p>它是一个只读属性，返回所有的子元素节点，它只返回子元素节点，其余节点不返回。</p>\n<p>ps：parentNode在实际应用中要改成具体的父节点名称</p>\n<h4 id=\"获取第一个子元素或者最后一个子元素\"><a href=\"#获取第一个子元素或者最后一个子元素\" class=\"headerlink\" title=\"获取第一个子元素或者最后一个子元素\"></a>获取第一个子元素或者最后一个子元素</h4><p>法一</p>\n<p>parentNode.firstChild //获取的是第一个子节点，不管是文本节点还是个元素节点</p>\n<p>parentNode.lastChild //获取的是最后一个子节点，不管是文本节点还是元素节点</p>\n<p>法二、</p>\n<p>parentNode.firstElementChild //返回第一个子元素节点，找不到则返回null</p>\n<p>parenNode.lastElementChild //返回最后一个子元素节点，找不到则返回null</p>\n<p>注意：有兼容性问题，ie9以上才支持。</p>\n<p>法三：（实际开发用这个）</p>\n<p>parentNode.children[0] //得到第一个子元素节点</p>\n<p>parentNode.children[parentNode.chileren.length - 1]</p>\n<p> ps：parentNode在实际应用中要改成具体的父节点名称 </p>\n<p><img src=\"/../image/jspic03.png\"></p>\n<p>下拉菜单的基本布局如上图所示</p>\n<h4 id=\"兄弟节点\"><a href=\"#兄弟节点\" class=\"headerlink\" title=\"兄弟节点\"></a>兄弟节点</h4><p>node.nextSibling //返回当前元素的下一个兄弟节点，找不到则返回null，同样，也是包含所有的节点</p>\n<p>（node在实际开发中要换成你要的那个名字）</p>\n<p>node.previousSibling //返回当前元素的上一个兄弟节点，找不到则返回null，同样，也是包含所有的节点</p>\n<p>node.nextElementSibling //返回当前元素的下一个兄弟元素节点，找不到则返回null</p>\n<p>node.previousElementSibling//返回当前元素的上一个兄弟元素节点，找不到则返回null</p>\n<p> ps：node在实际应用中要改成具体的节点名称 </p>\n<p>上面两个都有兼容性问题，ie9以上才支持</p>\n<p>解决兼容性问题的方法：自己封装一个兼容性函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getNextElementSibling</span>(<span class=\"params\">element</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> el = element;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(el=el.<span class=\"property\">nextSibling</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(el.<span class=\"property\">nodeType</span> === <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> el;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建节点\"><a href=\"#创建节点\" class=\"headerlink\" title=\"创建节点\"></a>创建节点</h4><p>document.createElement(‘tagName’) //动态创建元素节点</p>\n<h4 id=\"添加节点\"><a href=\"#添加节点\" class=\"headerlink\" title=\"添加节点\"></a>添加节点</h4><p>node.appendChild(child) //将一个节点添加到指定父节点的子节点列表末尾，即为node添加一个孩子</p>\n<p>node：父节点名 child：子节点名</p>\n<p>node.insertBefore(child,指定元素) //将一个节点添加到指定父节点的子节点列表前面</p>\n<p> ps：node在实际应用中要改成具体的节点名称 </p>\n<h4 id=\"删除节点\"><a href=\"#删除节点\" class=\"headerlink\" title=\"删除节点\"></a>删除节点</h4><p>node.removeChild(child) //删除一个子节点，返回删除的节点</p>\n<p> ps：node在实际应用中要改成具体的节点名称 </p>\n<h4 id=\"复制节点\"><a href=\"#复制节点\" class=\"headerlink\" title=\"复制节点\"></a>复制节点</h4><p>node.cloneNode() //方法返回调用该方法的节点的一个副本，也称为克隆节点/拷贝节点</p>\n<p>注：如果括号参数为空或者false，则为浅拷贝，即只克隆复制节点本身，不可隆里面的子节点（只获取标签，不复制里面的值）</p>\n<p>深拷贝：复制标签包括复制里面的值node.cloneNode(true)</p>\n<p>你复制完之后要告诉它把复制过来的标签放在哪里他才能显示出来。 </p>\n<p> ps：node在实际应用中要改成具体的节点名称 </p>\n<h4 id=\"三种动态创建元素区别\"><a href=\"#三种动态创建元素区别\" class=\"headerlink\" title=\"三种动态创建元素区别\"></a>三种动态创建元素区别</h4><p>document.write()（用的很少，了解）</p>\n<p>element.innerHTML</p>\n<p>document.createElement()</p>\n<p>第一个是直接将内容写入页面的内容流，但是文档流执行完毕，则会导致页面全部重绘(即创建一个新页面写入你write的内容然后原先的东西全没了)</p>\n<p>第二个是将内容写入某个dom节点，不会导致页面重绘，而且创建多个元素效率更高（不要拼接字符串，采取数组形式拼接），结构稍微复杂</p>\n<p>第三个是创建多个元素效率稍低一点但是结构更清晰</p>\n<p>总结：不同浏览器下，innerHTML效率要比createElement高</p>\n<h2 id=\"注册事件的两种操作\"><a href=\"#注册事件的两种操作\" class=\"headerlink\" title=\"注册事件的两种操作\"></a>注册事件的两种操作</h2><p>传统方式和方法监听注册方式</p>\n<p>前者的特点是注册事件的唯一性，即同一个元素同一个事件只能设置一个处理函数，最后注册的处理函数将会覆盖前面注册的处理函数</p>\n<p>后者，w3c标准，推荐方法，特点：同一个元素可以注册多个监听器，按注册事件以此执行</p>\n<p>用法：</p>\n<p>addEventListener()它是一个方法，IE9之前不支持，可用attachEvent()代替</p>\n<p>eventTarget.addEventListener(type,listener[,useCapture]) //将指定的监听器注册到目标对象（eventTarget）上，当该对象触发指定的事件时，就会执行事件处理函数.</p>\n<p>type：事件类型字符串，比如clink，mouseover，注意这里不要带on</p>\n<p>listener：事件处理函数，事件发生时，会调用该监听函数</p>\n<p>useCapture:可选参数，是一个布尔值，默认是false</p>\n<p> ps：eventTarget在实际应用中要改成具体的对象名称 </p>\n<h2 id=\"删除事件\"><a href=\"#删除事件\" class=\"headerlink\" title=\"删除事件\"></a>删除事件</h2><p>1、传统方式</p>\n<p>eventTarget.onclick=null;</p>\n<p>2、方法监听注册方式</p>\n<p>eventTarget.removeEventListener(type,listener[,useCapture]) ;</p>\n<p>注：如果你想用法2去删除事件，那么你注册事件的函数不能是个匿名函数</p>\n<h2 id=\"DOM事件流\"><a href=\"#DOM事件流\" class=\"headerlink\" title=\"DOM事件流\"></a>DOM事件流</h2><p>事件流描述的是从页面中接收事件的顺序</p>\n<p>3个阶段：1、捕获阶段 2、当前目标阶段 3、冒泡阶段</p>\n<p>事件冒泡：事件开始时由最具体的元素接收，然后逐级向上传播到DOM最顶层节点的过程</p>\n<p>事件捕获：由dom最顶层节点开始，然后逐级向下传播到最具体的元素接收的过程</p>\n<p>注：js代码中只能执行捕获或者冒泡其中一个阶段</p>\n<p>onclick和attachEvent只能得到冒泡阶段</p>\n<p>addEventListener(type,listener[,useCapture])  第三个参数如果是true，表示在事件捕获阶段调用事件处理程序；如果是false，表示在事件冒泡阶段调用事件处理程序。</p>\n<p>有些事件是没有冒泡的：onblur,onfocus,onmouseenter,onmouseleave</p>\n<h2 id=\"事件对象\"><a href=\"#事件对象\" class=\"headerlink\" title=\"事件对象\"></a>事件对象</h2><p>event就是一个事件对象，写到我们侦听函数的小括号里面，当形参来看，事件对象只有有了事件才会存在，它是统给我们自动创建的，不需要我们传递参数，事件对象，是我们事件的一系列相关数据的集合。这个事件对象我们可以自己命名，事件对象也有兼容性问题，ie678使用window.event</p>\n<p>常见事件对象的属性和方法</p>\n<p>e.target //返回的是<strong>触发事件</strong>的对象（元素） e是事件对象的名称，即点击了哪个元素就返回哪个元素</p>\n<p>this返回的是<strong>绑定事件</strong>的对象（元素），谁绑定了这个点击事件就返回谁</p>\n<p>兼容处理方法，把新方法和老方法用或连接起来就可以了</p>\n<p><img src=\"/../image/jspic04.png\"></p>\n<p>阻止默认事件发生：e（事件名）.preventDefault() </p>\n<p>低版本的用e.returnValue 还可以使用return false；<br>阻止事件冒泡（重，面试问）</p>\n<p>标准写法：e.stopPropagation() //有兼容性问题</p>\n<p>比如我点击son，只想要son的事件，不想要father和document的事件，那么我就在son那个函数里面的最后写入上面这句话，这样他就只给你son的不给你其他的了</p>\n<p>在低版本浏览器用的是： e.cancelBubble = true;</p>\n<p>解决兼容性解决方案</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(e &amp;&amp; e.<span class=\"property\">stopPropagation</span>)&#123;</span><br><span class=\"line\">    e.<span class=\"title function_\">stopPropagation</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"property\">event</span>.<span class=\"property\">cancelBubble</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"事件委托\"><a href=\"#事件委托\" class=\"headerlink\" title=\"事件委托\"></a>事件委托</h2><p>——面试要会口述原理</p>\n<p>原理：不是每个子节点单独设置事件监听器，而是事件监听器设置在父节点上，然后利用冒泡原理影响设置每个子节点</p>\n<p>e.g.给ul注册点击事件，然后利用事件对象的target来找到当前点击的li，因为点击li，事件会冒泡到ul上，ul有注册事件，就会触发事件监听器。</p>\n<p>作用：只操作一次dom，提高了程序的性能</p>\n<h2 id=\"鼠标事件对象\"><a href=\"#鼠标事件对象\" class=\"headerlink\" title=\"鼠标事件对象\"></a>鼠标事件对象</h2><p><img src=\"/../image/jspic05.png\"></p>\n<p>注：clientX和clientY永远以可视窗口为主，拉动滚动条都不变</p>\n<p>pageX和pageY得到的是距离文档最上面的距离，拉动滚动条数据会改变（重点记住这个）</p>\n<h2 id=\"常用的键盘事件\"><a href=\"#常用的键盘事件\" class=\"headerlink\" title=\"常用的键盘事件\"></a>常用的键盘事件</h2><p><img src=\"/../image/jspic06.png\"></p>\n<p>常规写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">onkeyup</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;嘿嘿嘿&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>事件写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;keyup&#x27;</span>,<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;来了&#x27;</span>);</span><br><span class=\"line\">        &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>注意：那个键盘按下时触发，如果你按住一直不放他就会一直触发，如果两个都存在，先执行keydown，再执行keypress</p>\n<h2 id=\"键盘事件对象\"><a href=\"#键盘事件对象\" class=\"headerlink\" title=\"键盘事件对象\"></a>键盘事件对象</h2><p>键盘事件对象中的keyCode属性可以得到相对应键的ASCII</p>\n<p>我们的keyup和keydown事件不区分大小写，所以你按大写还是小写都返回的是大写的那个的阿斯克码值</p>\n<p>keypress事件是区分大小写的</p>\n<p>keydown和keypress在文本框里面的特点：他们两个事件触发的时候，文字还没有落入文本框中</p>\n<p>keyup事件触发时，文字已经落入文本框内</p>\n<h1 id=\"BOM\"><a href=\"#BOM\" class=\"headerlink\" title=\"BOM\"></a>BOM</h1><p>BOM是浏览器对象模型，他提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是window</p>\n<p>BOM由一系列相关的对象构成，并且每个对象都提供了很多方法和属性</p>\n<p>BOM的构成：BOM比DOM大，它包含DOM</p>\n<p>window对象是浏览器的顶级对象，他具有双重角色</p>\n<p>1、它是js访问浏览器窗口的一个接口</p>\n<p>2、它是一个全局对象，定义在全局作用域中的变量，函数都会变成window对象的属性和方法</p>\n<p>注：window下的一个特殊属性window.name</p>\n<h2 id=\"window对象常用的事件\"><a href=\"#window对象常用的事件\" class=\"headerlink\" title=\"window对象常用的事件\"></a>window对象常用的事件</h2><h3 id=\"窗口加载事件\"><a href=\"#窗口加载事件\" class=\"headerlink\" title=\"窗口加载事件\"></a>窗口加载事件</h3><p>window.onload=function(){}</p>\n<p>或者</p>\n<p>window.addEventListener(“load”,function(){});</p>\n<p>window.load是窗口加载事件，当文档内容<strong>完全加载完成</strong>会触发该事件，就调用的处理函数</p>\n<p>有了这个函数，可以把script放在任何地方</p>\n<p>注：window.onload传统注册事件只能写一次，如果有多个，会以最后一个window.onload为准，使用window.addEventListener则没有限制</p>\n<p>document.addEventListener(‘DOMContentLoaded’,function(){})</p>\n<p>DOMContentLoaded事件触发时，仅当DOM加载完成时，不包括样式表，图片，flash等，ie9以上才支持</p>\n<p>如果页面的图片很多，从用户访问到onload触发可能需要较长的时间，交互效果就不能实现，必然影响用户的体验，此时用DOMContentLoaded事件比较合适。</p>\n<h3 id=\"调整窗口大小事件\"><a href=\"#调整窗口大小事件\" class=\"headerlink\" title=\"调整窗口大小事件\"></a>调整窗口大小事件</h3><p>window.onresize=function(){}</p>\n<p>window.addEventListener(‘resize’,function(){});</p>\n<p>window.onresize是调整窗口大小加载事件，当触发时就调用的处理函数</p>\n<p>只要窗口大小发生改变，就会触发</p>\n<p>经常用这个做响应式布局，window.innerWidth当前屏幕的宽度</p>\n<h3 id=\"定时器\"><a href=\"#定时器\" class=\"headerlink\" title=\"定时器\"></a>定时器</h3><h4 id=\"设置定时器\"><a href=\"#设置定时器\" class=\"headerlink\" title=\"设置定时器\"></a>设置定时器</h4><p>setTimeout()</p>\n<p>setInterval()</p>\n<p>window.setTimeout(调用函数，[延迟的毫秒数]); //用于设置一个定时器，该定时器在定时器到期后执行调用函数，调用函数又叫回调函数。</p>\n<p>这里的window可以省略，延迟的毫秒数可以省略，如果省略默认0</p>\n<p>这个调用函数可以直接写函数体或者函数名，但是有一点不同，之前addEventListener用的那种他也可以用。就是直接写一个函数名，区别在于他也可以写成字符串的形式，但是要加括号，比如setTimeout(‘callback()’,3000); //这种形式不推荐</p>\n<p>页面中可能有很多定时器，我们经常给定时器加标识符（名字）</p>\n<p>window.setInterval(回调函数，[间隔的毫秒数]);</p>\n<p>这个方法重复调用一个函数，每隔这个时间，就去调用一次回调函数。</p>\n<p>注意：window可以省略。</p>\n<p>这个调用函数可以直接写函数，或者写函数名，或者采取‘函数名（）’三种形式。</p>\n<p>间隔的毫秒数省略就默认是0，表示每隔多少毫秒就自动调用这个函数。</p>\n<p>两种方法的区别:</p>\n<p>1、setTimeout()只调用一次，setInterval（）可以无限次调用</p>\n<h4 id=\"停止定时器\"><a href=\"#停止定时器\" class=\"headerlink\" title=\"停止定时器\"></a>停止定时器</h4><p>window.clearTimeout(timeout ID)</p>\n<p>注：window可以省略</p>\n<p>window.clearInterval(interval ID);</p>\n<p>取消了先前通过调用setInterval（）建立的定时器。</p>\n<h2 id=\"this的指向\"><a href=\"#this的指向\" class=\"headerlink\" title=\"this的指向\"></a>this的指向</h2><p>全局作用域或者普通函数中this指向全局变量window（定时器里面的this也是指向window）</p>\n<p>方法调用中的this指向调用者，谁调用它就指向谁</p>\n<p>构造函数中this指向构造函数的实例</p>\n<h2 id=\"js同步和异步\"><a href=\"#js同步和异步\" class=\"headerlink\" title=\"js同步和异步\"></a>js同步和异步</h2><p>html5中添加新特性，让js可以异步执行</p>\n<p>同步任务：同步任务都在主线程上执行，形成一个执行栈。</p>\n<p>异步任务：js异步是通过回调函数实现的。一般而言，异步任务有以下三种类型：</p>\n<p>1、普通事件，如click，resize等</p>\n<p>2、资源加载，如load，error等</p>\n<p>3、定时器，包括setInterval、setTimeout等</p>\n<p>异步任务是放在任务队列（消息队列）里面的</p>\n<p>js的执行机制：</p>\n<p>1、先执行执行栈中的同步任务</p>\n<p>2、异步任务（回调函数）放入任务队列中（准确的说法应该是提交给处理器，处理器等待响应事件发生时再放入队列中）</p>\n<p>3、一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈，开始执行。</p>\n<p>虽然同步任务执行完成了，但是他还是会返回任务队列去看看有没有新的任务产生，这种机制叫做事件循环。</p>\n<h2 id=\"location对象（重点）\"><a href=\"#location对象（重点）\" class=\"headerlink\" title=\"location对象（重点）\"></a>location对象（重点）</h2><p>window对象给我们提供了一个location属性用于获取或设置窗体的URL，并且可以用于解析URL，因为这个属性返回的是一个对象，所以叫做location对象。</p>\n<h3 id=\"location对象的属性\"><a href=\"#location对象的属性\" class=\"headerlink\" title=\"location对象的属性\"></a>location对象的属性</h3><p><img src=\"/../image/jspic07.png\"></p>\n<p>重点记住href和search</p>\n<p>注意：如果你用的是location.href=’网站’这种方式进行页面跳转，那么你没办法回退到刚刚的页面。</p>\n<h3 id=\"location对象的方法\"><a href=\"#location对象的方法\" class=\"headerlink\" title=\"location对象的方法\"></a>location对象的方法</h3><p><img src=\"/../image/jspic08.png\"></p>\n<p>注：用第一种方法进行页面跳转，他会记录之前访问过的页面，所以可以实现回退功能。</p>\n<h2 id=\"navigator对象\"><a href=\"#navigator对象\" class=\"headerlink\" title=\"navigator对象\"></a>navigator对象</h2><p>navigator对象包含有关浏览器的信息，他有很多属性，我们最常用的是userAgent，该属性可以返回由客户端发送服务器的user-agent头部的值。</p>\n<h2 id=\"history对象\"><a href=\"#history对象\" class=\"headerlink\" title=\"history对象\"></a>history对象</h2><p>window对象给我们提供了一个history对象，与浏览器历史记录进行交互，该对象包含用户访问过的URL</p>\n<p><img src=\"/../image/jspic09.png\" alt=\"history对象\"></p>\n<h2 id=\"消息框\"><a href=\"#消息框\" class=\"headerlink\" title=\"消息框\"></a>消息框</h2><h3 id=\"警告框\"><a href=\"#警告框\" class=\"headerlink\" title=\"警告框\"></a>警告框</h3><p>alert(“警告！”)</p>\n<h3 id=\"确认框\"><a href=\"#确认框\" class=\"headerlink\" title=\"确认框\"></a>确认框</h3><p>confirm(“你确定吗？”)</p>\n<p>如果用户点确认，返回值是true，如果用户点取消，返回值是false</p>\n<h3 id=\"提示框\"><a href=\"#提示框\" class=\"headerlink\" title=\"提示框\"></a>提示框</h3><p>prompt(“请在下方输入”,”你的答案”)</p>\n<p>如果用户点确认，那么返回值是输入的值，如果点取消，返回值是null</p>\n"},{"title":"npm ERR! code ERESOLVE的解决方案","date":"2022-09-03T08:55:32.000Z","top_img":"../image/无风险03.jpg","cover":"../image/无风险03.jpg","description":"有关npm报错信息及其解决方案","_content":"今天在用```npm i element-ui -S```引入ElementUI组件库的时候报了一堆错误\n![一部分错误截图](../image/npmpic01.png)\n后来用了```npm -V```查看了npm的版本发现是我的npm版本过高\n![npm版本](../image/npmpic02.png)``\n解决方案：在命令后面加上```--legancy-peer-deps```\n最后解决了问题，亲测有效\n![结果](../image/npmpic03.png)","source":"_posts/npm-ERR-code-ERESOLVE的解决方案.md","raw":"---\ntitle: npm ERR! code ERESOLVE的解决方案\ndate: 2022-09-03 16:55:32\ntags: \n  - 经验\n  - ElementUI\n  - npm\n  - 前端\ncategories: 经验\ntop_img: \"../image/无风险03.jpg\"\ncover: \"../image/无风险03.jpg\"\ndescription: 有关npm报错信息及其解决方案\n---\n今天在用```npm i element-ui -S```引入ElementUI组件库的时候报了一堆错误\n![一部分错误截图](../image/npmpic01.png)\n后来用了```npm -V```查看了npm的版本发现是我的npm版本过高\n![npm版本](../image/npmpic02.png)``\n解决方案：在命令后面加上```--legancy-peer-deps```\n最后解决了问题，亲测有效\n![结果](../image/npmpic03.png)","slug":"npm-ERR-code-ERESOLVE的解决方案","published":1,"updated":"2022-10-04T12:51:18.035Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyn4sci0000fecvzfpdja8bq","content":"<p>今天在用<code>npm i element-ui -S</code>引入ElementUI组件库的时候报了一堆错误<br><img src=\"/../image/npmpic01.png\" alt=\"一部分错误截图\"><br>后来用了<code>npm -V</code>查看了npm的版本发现是我的npm版本过高<br><img src=\"/../image/npmpic02.png\" alt=\"npm版本\">``<br>解决方案：在命令后面加上<code>--legancy-peer-deps</code><br>最后解决了问题，亲测有效<br><img src=\"/../image/npmpic03.png\" alt=\"结果\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天在用<code>npm i element-ui -S</code>引入ElementUI组件库的时候报了一堆错误<br><img src=\"/../image/npmpic01.png\" alt=\"一部分错误截图\"><br>后来用了<code>npm -V</code>查看了npm的版本发现是我的npm版本过高<br><img src=\"/../image/npmpic02.png\" alt=\"npm版本\">``<br>解决方案：在命令后面加上<code>--legancy-peer-deps</code><br>最后解决了问题，亲测有效<br><img src=\"/../image/npmpic03.png\" alt=\"结果\"></p>\n"},{"title":"Hello World","date":"2022-08-26T02:39:24.000Z","_content":"\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n```bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n```bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n```bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n```bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2022-8-26 10:39:24\ntags: \n  - 官方教程\ncategories: 教程\n---\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n```bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n```bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n```bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n```bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2024-07-15T15:09:09.503Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyn4sci2000jecvz103584sc","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n","site":{"data":{}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"request entity too large","date":"2022-09-20T15:54:22.000Z","top_img":"../image/无风险04.jpg","cover":"../image/无风险04.jpg","description":"node写的接口报错request entity too large","_content":"今天在写上传头像的业务的时候发现前端点击上传头像之后报了这么一个错request entity too large，\n原因是因为：node.js 做为服务器，在传输内容或者上传文件时，系统默认大小为100kb,文件大小超过了这个限制就会报这个错，所以我们的解决方案就是给他增大这个限额\n最后的解决方案就是在app.js中const app=express()下面加入以下代码\n```\nlet bodyParser = require('body-parser');\napp.use(bodyParser.json({limit:'50mb'}));\napp.use(bodyParser.urlencoded({limit:'50mb',extended:true}));\n```\n加完之后就不报错了，能成功的上传头像了","source":"_posts/request-entity-too-large.md","raw":"---\ntitle: request entity too large\ndate: 2022-09-20 23:54:22\ntags: \n  - 经验\n  - node\ncategories: 经验\ntop_img: \"../image/无风险04.jpg\"\ncover: \"../image/无风险04.jpg\"\ndescription: node写的接口报错request entity too large\n---\n今天在写上传头像的业务的时候发现前端点击上传头像之后报了这么一个错request entity too large，\n原因是因为：node.js 做为服务器，在传输内容或者上传文件时，系统默认大小为100kb,文件大小超过了这个限制就会报这个错，所以我们的解决方案就是给他增大这个限额\n最后的解决方案就是在app.js中const app=express()下面加入以下代码\n```\nlet bodyParser = require('body-parser');\napp.use(bodyParser.json({limit:'50mb'}));\napp.use(bodyParser.urlencoded({limit:'50mb',extended:true}));\n```\n加完之后就不报错了，能成功的上传头像了","slug":"request-entity-too-large","published":1,"updated":"2022-10-04T12:51:31.473Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyn4sci4000kecvz4updgs67","content":"<p>今天在写上传头像的业务的时候发现前端点击上传头像之后报了这么一个错request entity too large，<br>原因是因为：node.js 做为服务器，在传输内容或者上传文件时，系统默认大小为100kb,文件大小超过了这个限制就会报这个错，所以我们的解决方案就是给他增大这个限额<br>最后的解决方案就是在app.js中const app=express()下面加入以下代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let bodyParser = require(&#x27;body-parser&#x27;);</span><br><span class=\"line\">app.use(bodyParser.json(&#123;limit:&#x27;50mb&#x27;&#125;));</span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123;limit:&#x27;50mb&#x27;,extended:true&#125;));</span><br></pre></td></tr></table></figure>\n<p>加完之后就不报错了，能成功的上传头像了</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天在写上传头像的业务的时候发现前端点击上传头像之后报了这么一个错request entity too large，<br>原因是因为：node.js 做为服务器，在传输内容或者上传文件时，系统默认大小为100kb,文件大小超过了这个限制就会报这个错，所以我们的解决方案就是给他增大这个限额<br>最后的解决方案就是在app.js中const app=express()下面加入以下代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let bodyParser = require(&#x27;body-parser&#x27;);</span><br><span class=\"line\">app.use(bodyParser.json(&#123;limit:&#x27;50mb&#x27;&#125;));</span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123;limit:&#x27;50mb&#x27;,extended:true&#125;));</span><br></pre></td></tr></table></figure>\n<p>加完之后就不报错了，能成功的上传头像了</p>\n"},{"title":"vue2学习笔记","date":"2022-08-30T09:00:37.000Z","label":"这是一篇vue2的知识点总结","top_img":"../image/无风险05.png","cover":"../image/无风险05.png","description":"这是一篇vue2的知识点总结","_content":"\n# 起步\n\n```vue\n<div id=\"app\">{{msg}}</div>\n    <script>\n        const vm = new Vue({\n            el:\"#app\",\n            data:{\n                msg:\"hello\"\n            }\n        });\n    </script>\n```\n\n# 指令\n\n## 内容渲染指令\nv-text\n\n```{{}}```\n\n```v-html```\n\n作用都是把文本内容渲染到界面中\n```vue\n区别：前两个不识别html语言，最后一个识别，v-text会覆盖掉这个标签原本有的内容，{{}}只能用在元素的内容节点中，不能用在元素的属性节点中\n```\n\n```vue\n<div id=\"app\">\n        <p v-text=\"msg\"></p>\n        <p >{{msg}} </p>\n        <p v-html=\"msg\"></p>\n    </div>\n    <script>\n        const vm = new Vue({\n            el:\"#app\",\n            data:{\n                msg:\"<h1>hello</h1>\"\n            }\n        });\n    </script>\n```\n\n运行结果：\n![](../image/vue2-01.png)\n## 属性渲染指令\n\nv-bind 简写为：\n\n单向绑定：即数值变化可以同步到页面上，但是页面上的变化没法改变数值\n\n```vue\n<div id=\"app\">\n        <input type=\"text\" :placeholder=\"tips\">\n    /*注意啊这里不需要{{tips}}*/\n    </div>\n    <script>\n        const vm = new Vue({\n            el:\"#app\",\n            data:{\n                tips:\"请输入用户名\"\n            }\n        });\n    </script>\n```\n\n运行结果：\n![](../image/vue2-02.png)\n\n在vue提供的渲染模板语法中，除了支持绑定简单的数值外，还支持js表达式的运算，比如\n![](../image/vue2-03.png)\n字符串拼接得这样写，其中box是字符串，index是data里面定义的\n![](../image/vue2-04.png)\n\n```\n注意：在{{}}里面只能写简单的js表达式，不能写if等复杂的js语句\n```\n## 事件绑定指令\n\nv-on简写为@\n\n点击事件就是@click，键盘事件就是@keyup,输入框的输入事件@input\n\n无参数版\n\n```vue\n <div id=\"app\">\n        <p>值为：{{num}}</p>\n        <button @click=\"add\">加一</button>\n        <button @click=\"cut\">减一</button>\n    </div>\n    <script>\n        const vm = new Vue({\n            el:\"#app\",\n            data:{\n                num:0,\n\n            },\n            methods:{\n                add(){\n                    // vm.num++;\n                    this.num++;//这里this指向vm\n                },\n                cut(){\n                    // vm.num--;\n                    this.num--;\n                }\n            }\n        });\n    </script>\n```\n\n带参数版\n\n```vue\n<div id=\"app\">\n        <p>值为：{{num}}</p>\n        <button @click=\"add(2,$event)\">加一</button>\n    //这个event不能换\n        <button @click=\"cut\">减一</button>\n    </div>\n    <script>\n        const vm = new Vue({\n            el:\"#app\",\n            data:{\n                num:0,\n\n            },\n            methods:{\n                add(n,e){\n                    // vm.num++;\n                    this.num+=n;\n                    e.target.innerHTML=\"加\"+n\n                    //e。target代表那个button按钮\n                },\n                cut(){\n                    // vm.num--;\n                    this.num--;\n                }\n            }\n        });\n    </script>\n```\n### 事件修饰符\n\n阻止默认行为\n\n`e.preventDefault();`\n\n或者\n\n`<a href=\"http://www.baidu.com\" @click.prevent=\"show\">跳转到百度</a>`\n![](../image/vue2-05.png)\n掌握前两个就行\n\n冒泡就是比如有两个盒子，都绑定了点击事件，那么你点击里面的盒子，他就会先执行里面盒子的点击事件再冒泡执行外面盒子的点击事件\n\n阻止事件冒泡：`e.stopPropagation()`或者`<a href=\"http://www.baidu.com\" @click.stop=\"show\">跳转到百度</a>`\n\n## 双向绑定\n\nv-model\n\n就是说属性值改变，页面里对应的值也改变，页面的值改变也可以同步改变属性值\n\nv-model只能用于表单那边，比如\n\ninput输入框，textarea，select\n\nv-model的修饰符\n![](../image/vue2-06.png)\n最后一个就是等她失去焦点之后同步他最后的结果，中间的变化过程都不管\n\n## 条件渲染\n\nv-if\n\nv-show\n\n两个的用处都是用于控制dom元素的显示和隐藏\n\n区别：v-if是如果值为false，那么他是动态删除该标签,true就动态创建回来，而v-show是如果值为false，把标签的属性变成display:none，true的话去掉这个属性\n\n性能方面：如果要频繁的切换元素的显示状态，v-show的性能好；如果刚进入页面的时候，某些元素默认不需要被显示，后期这个元素也很可能不用显示出来，此时v-if性能好\n\n### v-if配套的指令\n![](../image/vue2-07.png)\nv-else-if要配合v-if使用，不然不会被识别\n\n## 列表渲染\n```\nv-for\n\nv-for=\"(item,index) in items\"\n```\n第一个是数据，第二个是索引，如果不需要就不写index了\n\n官方推荐只要用到v-for指令，要绑定一个 :key=值，而且尽量把id作为key的值，不要用index，key的值有要求，必须是字符串或者数字，key的值不允许重复，不然会报错\n\n# 过滤器（只能用于vue2）\n\n作用：用于文本的格式化，可用在两个地方：插值表达式和v-bind属性绑定\n\n过滤器应该被添加到js表达式的尾部，由管道符  |  进行调用\n\n本质：一个函数，调用过滤器之后我们看见的是过滤器的返回值\n\n过滤器函数必须定义到filters里面，一定要有返回值\n\n## 私有过滤器和全局过滤器\n\n定义在vm里面的都属于私有过滤器\n\n全局过滤器的定义方法：\n```\nVue.filter('xxx',function)\n```\n第一个参数是全局过滤器的名字，第二个参数是处理函数\n\n注：如果私有过滤器和全局过滤器名字一样，按照就近原则调用私有过滤器\n```\n如果有多个过滤器，比如{{name | f1 | f2| f3}}这种，就是先把name的值交给f1，然后再把f1返回的值交给f2以此类推\n\n过滤器还可以传递参数，在filter里面第一个参数的位置永远是|前面那个，所以参数要在第二个往后接收\n```\n# 侦听器\n\n## watch侦听器\n\n```vue\n监视数据变化然后做相应处理的，本质上是一个函数\n\n侦听器要定义到watch：{}里面，要监听谁就把谁作为函数\n<div id=\"app\">\n        <input type=\"text\" v-model=\"username\">\n    </div>\n    <script>\n        const vm = new Vue({\n            el:\"#app\",\n            data:{\n                username:''\n            },\n            watch:{\n                username(newValue,oldValue){\n                    //操作\n                }\n            }\n        });\n    </script>\n```\n\n## 侦听器的格式\n\n1、方法格式的侦听器\n\n缺点：无法再刚进入页面的时候自动触发，\n\n如果侦听的是一个对象，如果对象中属性发生了变化，不会触发侦听器\n```\nusername（newValue,oldValue）\n```\n2、对象格式的侦听器\n\n好处：可以通过immediate选项，让侦听器自动触发，\n\n可以通过deep选项，让侦听器深度监听对象中每个属性的变化\n```\nusername：{\n\nhandler(newValue,oldValue){},\n\nimmediate:true\n\n//true表示刚进入页面的时候自动触发，false表示刚进入页面的时候不触发\n\n}\n```\n## 深度侦听\n\n用deep：true来进行深度监听，记得双向绑定的数据要改成对象.属性值\n\n```vue\n<div id=\"app\">\n        <input type=\"text\" v-model=\"info.username\">\n    </div>\n    <script>\n        const vm = new Vue({\n            el:\"#app\",\n            data:{\n                info:{\n                    username:'admin'\n                }\n            },\n            watch:{\n                //这样写没法侦听到username的变化\n                // info(newValue){\n                //     console.log(newVal);\n                // }\n\n            // 深度侦听的做法\n              info:{\n                handler(newValue){\n                    if(newValue === '')return \n                   var url='https://www.escook.cn/api/finduser/' + newValue;\n                   axios.get(url).then(function(res){\n                       console.log(res);\n                   })\n                \n                },\n                deep:true\n              }\n               \n            }\n        });\n    </script>\n```\n# 计算属性\n\n指通过一系列运算后，最终得到一个属性值\n\n写在```computed：{}```那边\n\n计算属性在定义的时候要定义成一个函数，在使用他的时候，把他当成一个属性使用就行\n\n好处：实现了代码复用，只要计算属性中依赖的数据源变化了，计算属性就会重新求值\n\n代码详见31.html\n\n# 创建vue项目\n\n指令\n\n在终端下运行如下的命令，创建指定名称的项目：\n\n```vue create 项目名称```\n\n运行，一定要先切换到项目文件里面，然后```npm run dev```\n\n# 组件\n\nVue实例中的 ```.$mount()```方法作用和el属性完全一样\n\n## 组件的三个组成部分\n\n每个.vue组件都由3部分构成，分别是：template  模板  script js代码 style 样式\n\n其中sytle部分就跟css一样，script部分要先默认写一个```export default{}```然后js代码写在里面\n\n在组件中，this表示当前组件的实例对象\n\n```vue\n<template>\n\t<div></div>\n</template>\n\n<script>\nexport default{\n\tdata(){\n        return{\n            username:'hahha'\n        }\n    },\n    methods:{\n        \n    }\n}\n</script>\n\n<style>\n\n</style>\n```\n\n注意：.vue组件中的data不能像之前那样，不能指向对象，组件中的data必须是一个函数，然后return一个数据对象。其他的什么侦听器，计算属性，事件等写法跟之前一样\n\n组件只能包含唯一的一个根节点，意思是不能在一个template中出现两个平级的div，解决方案，把这两个平级的div用一个大的div包裹起来就行\n\n在style中。如果要启用less来写样式的话，要写```<style lang=\"less\">```\n\n## 组件之间的父子关系\n\n组件在被封装好之后，彼此之间是相互独立的，不存在父子关系\n\n在使用组件的时候，根据彼此的嵌套关系，形成了父子关系，兄弟关系\n\n## 使用组件的三个步骤\n\n1、使用import语法导入需要的组件 \n\n2、使用components节点注册组件\n\n3、以标签形式使用刚才注册的组件\n![](../image/vue2-08.png)\n要在哪个vue文件中用，就在哪个vue文件那边导入\n\n通过components注册的是私有子组件\n\n## 注册全局组件\n\n在vue项目的main.js入口文件中，通过Vue.component()方法，可以注册全局组件\n![](../image/vue2-09.png)\n组件名称尽量都是大写开头\n\n在自己的组件里面没法使用自己\n\n## 组件里面的props\n\n如果这个事件函数里面只有一行代码，也可以这么写\n![](../image/vue2-10.png)\nprops的作用的提升代码的复用性，语法如下：\n![](../image/vue2-11.png)\n```\n注意啊，如果你的数据是数字且要进行四则运算，一定要写成 :init=\"9\"这种v-bind的形式，如果传的是字符串，也要加 ：\nprops中的数据可以在template中{{init}}这样使用，但是他是只读的，所以不要拿它去做任何运算\n```\n### props的default默认值\n\n把props变成一个对象，default属性用于如果用户没有定义init属性就把值变成默认的default值\n![](../image/vue2-12.png)\n### props的type值类型\n\n用type属性定义属性的值类型，如果传递过来的值不符合要求就会报错\n\n```vue\nprops：{\n\tinit:{\n\t\tdefault:0,\n\t\ttype:Number\n\t\t//或者Object String\n\t}\n}\n```\n\n### props的required必填项\n\n就是谁用这个组件，谁必须传值给我，不然就会报错\n\n```vue\nprops：{\n\tinit:{\n\t\tdefault:0,\n\t\ttype:Number,\n\t\t//或者Object String\n\t\trequired:true\n\t}\n}\n```\n\n## 组件之间的样式冲突问题\n\n默认情况下，写在.vue组件中的样式会全局生效，因此很容易造成多个组件之间的样式冲突问题。\n\n导致组件之间样式冲突的根本原因是：\n\n1、单页面应用程序中，所有组件的dom结构，都是基于唯一的index.html页面进行呈现的\n\n2、每个组件中的样式，都会影响整个index.html页面中的dom元素\n\n解决方法：\n\n1、给统一组件的标签都加上一个相同的属性，然后写样式的时候写标签[属性]这样\n\n2、在style里面写一个scoped（用这个）\n![](../image/vue2-13.png)\n## /deep/样式穿透\n\n 用于在父组件中直接改造子组件的样式，当使用第三方组件库的时候，如果有修改组件默认样式的需求，就需要用到这个\n\n在style中要改变的对应标签前面加/deep/空格 标签名\n\n## 组件的生命周期\n\n——除了3个常用的，其他的了解一下就行\n\n生命周期是指一个组件从创建——运行——销毁的整个阶段，强调的是一个时间段 \n![](../image/vue2-14.png)\nbeforeCreate  组件的props/data/methods尚未被创建，都处于不可用状态\n\ncreated   组件的props/data/methods已创建好，都处于可用的状态，但是组件的模板结构尚未生成，不能创建dom（**重要，在这里要发起ajax请求**）\n\nbeforeMount 将要把内存中编译好的html结构渲染要浏览器中，此时浏览器中还没有当前组件的dom结构\n\nmounted 已经把内存中的html结构成功的渲染到了浏览器中，此时浏览器中已然包含了当前组件的dom结构(**最早操作dom元素**)\n\nbeforeUpdate 将要根据变化过后、最新的数据，重新渲染组件的模板结构\n\nupdated 已经根据最新的数据，完成了组件dom结构的重新渲染（**重**）\n\nbeforeDestroy 将要销毁此组件，此时尚未销毁，组件还处于正常工作的状态\n\ndestroyed 组件已经被销毁，此组件在浏览器中对应的dom结构已经被完全移除\n\n## 组件之间的数据共享\n\n如果父组件中要使用子组件，那么对于table下的tr，select下的option。ul里的li，ol里的li这种，要用is\n![](../image/vue2-15.png)\n其中MyTr就是你想在tr里面使用的组件名\n\n### 父向子传值\n\n用**自定义属性** Props\n\n父组件只负责提供数据，props写在子组件中\n\n注意：不要在子组件中修改props里面的数据\n\n### 子向父传值\n\n使用**自定义事件** $emit('事件名',要传递的数据)，其中需要在父组件中先定义一个值用于传输子组件传递过来的值，然后还要再父组件中绑定这个自定义事件然后定义一个methods\n\n### 兄弟组件之间的数据共享\n\n在vue2中EventBus（**面试问得多**）\n\n首先在接收数据方定义一个属性，用于接收传递过来的数据\n![](../image/vue2-16.png)\n使用步骤\n\n1、创建eventBus.js模块（自己建一个），并向外共享一个Vue的实例对象\n\n2、在数据发送方，import js文件，调用bus.$emit('事件名称',要发送的数据)方法触发自定义事件\n\n3、在数据接收方，import js文件，调用bus.$on('事件名称',事件处理函数)方法注册一个自定义事件\n\n## 动态组件\n\n指动态切换组件的显示与隐藏\n\nvue提供了一个内置的```<component>```组件（可以认为是一个占位符），专门用来实现动态组件的渲染\n\n语法：```<component is=\"组件名\"></component>```\n\n如果你不想写死的话就是在data（）里面定义一个变量，然后\n\n```<component :is=\"变量名\"></component>```\n\n当组件被隐藏时，其实是组件被销毁了，然后再次出现是重新创建\n\n### keep-alive\n\n如果要做到离开这个组件的时候不要被销毁，用keep-alive保持状态，原理是当这个组件出现的时候被激活然后当这个组件隐藏的时候被缓存。\n![](../image/vue2-17.png)\n把你要保存的那个组件放在keep-alive里面。\n\n### keep-alive对应的生命周期函数\n\n当组件被缓存时，会自动触发组件的deactivated生命周期函数\n\n当组件被激活时，会自动触发组件的activated生命周期函数\n\n当组件第一次被创建的时候，顺序是先执行created，然后再执行activated，后面是只执行activated\n\n注：上面这两个，要用了keep-active后才能使用\n\n### keep-alive的include属性\n\ninclude属性用来指定：只有名称匹配的组件会被缓存。多个组件名之间使用英文的逗号分隔\n![](../image/vue2-18.png)\nexclude排除项，写在这边的组件不会被缓存。注意：include和exclude不能同时使用\n\n## 组件注册名称和声明name名称的区别\n\n如果在声明组件（比如Left.vue里面）的时候，没有为组件指定name名称，则组件的名称默认就是注册时候的名称（比如App.vue里面component写的那个名）\n\n当你在组件声明的时候设了name名称之后，组件就是这个名\n![](../image/vue2-19.png)\n我们设置注册名称只是为了要让我们可以以标签的方式去使用这个组件。\n\n组件声明时设置的name名称主要用于keep-alive标签实现组件缓存功能，以及在调试工具中看到组件的name名称\n\n# ref引用\n\n获取dom元素或组件的引用\n\n每个vue的组件实例上，默认有一个$refs对象，里面存储着对应的dom元素或组件的引用。默认情况下，组件的$refs指向一个空对象\n\n首先你要获取dom，就在这边给他加一个ref属性\n![](../image/vue2-20.png)\n操作dom\n![](../image/vue2-21.png)\n他也可以获取组件的引用：\n\n先给这个组件加一个ref属性\n![](../image/vue2-22.png)\n然后操作这个组件的属性和方法跟操作dom一样\n\nthis.$refs.名字.你想用啥\n\n# this.$nextTick(回调函数)\n\n等组件的dom重新渲染好之后再调用回调函数，从而保证回调函数可以操作到最新的数据\n\n# 插槽\n\n插槽是vue为组件的封装者提供的能力，允许封装者在封装组件时，把不确定的，希望由用户指定的部分定义为插槽\n\n用```<slot></slot>```标签作为占位符，(比如写在left.vue里面)到时候用这个组件的时候写进以组件名为标签名的标签的时候就会把标签里面的内容（写在app.vue里面）渲染到这个占位符这里。\n\nvue官方规定，每一个slot插槽，都要有一个name名称，如果省略，默认```name=\"default\"```。默认情况下，在使用组件（在app.vue里面）的时候，提供的内容都会被填充到名字为default的插槽之中。\n\n## v-slot指令\n\n——简写为 #\n\n如果我们要指名道姓告诉vue我要把这个内容放在哪个插槽中，用v-slot：插槽名字，语法格式如下：\n![](../image/vue2-23.png)\nv-slot不能直接用在元素身上，必须用在template标签上\n\ntemplate这个标签是一个虚拟的标签，只起到包裹性质的作用，但是，不会被渲染为任何实质性的html标签\n\n## 后备内容\n\n如果我们用户没有指定插槽位置要放什么，我们要指定一个默认的内容的话，直接写在slot标签中间就行\n\n## 具名插槽\n\n就是给slot插槽加一个name，name为default的叫做默认插槽\n\n## 作用域插槽\n```\n指在封装组件时，为预留的<slot>提供属性对应的值。\n\n通过插槽的定义，我们可以拿到传过来的值（相当于子传父）\n\n标准写法是接收参数的都叫做scope，然后如果我们要拿到传递的那个参数，就是{{score.msg}}\n```\n![](../image/vue2-24.png)\n![](../image/vue2-25.png)\n也可以用解构赋值\n![](../image/vue2-26.png)\n# 自定义指令\n\n分为私有自定义指令和全局自定义指令\n\n## 私有自定义指令\n\n在组件的script那边定义，跟定义data啊，el啊这种一样，在directives节点下声明。里面的el是固定的。\n![](../image/vue2-27.png)\n这样定义之后这个指令的名称就叫做v-color\n![](../image/vue2-28.png)\n这样用完之后，这个h1标签里面的文字就会变成红色\n\n也可以是```<h1 v-color=\"hhh\">哈哈哈</h1>```\n\n这样bind里面有两个参数bind(el,binding)\n\n**第一个参数是当前指令所绑定的dom对象，就是h1。如果要获取到用户通过指令传递过来的hhh的值，就用binding.value就可以拿到**\n![](../image/vue2-29.png)\n这种是写死的，就是我要传递的就是red，而上面那种写法是传一个参数，他回去data里面找有没有叫hhh的属性\n\nbind元素的缺点：这个只在指令第一个绑定到元素上面的时候才能触发\n\n### update函数\n\n也是有两个参数，el和binding，含义一样的\n\nupdate函数会在每次dom更新时被调用\n\n这个也是写在directives，跟bind函数平级\n\nbind和update都必须要有\n\n### 函数简写\n\n如果bind和update函数中的逻辑完全相同。则可以把指令写成函数形式\n\n## 全局自定义指令\n\n写在main.js文件中\n\n简写版本：\n\n`Vue.directive('指令名',function(el,binding){ 业务逻辑})`\n\n全写版本：\n![](../image/vue2-30.png)\n代码里面的提示\n![](../image/vue2-31.png)\n这个true的情况下，你可以看见那个温馨提示，提示你项目要上线的时候需要改模式，如果你改为false，那么你看不见那个提示。默认为true，就是你不写这行代码也是true\n\n# eslint\n\n用于约束代码规范\n\n官方文档https://eslint.bootcss.com/\n\n# axios\n\n## 安装axios的命令\n\nnpm i axios -S\n\n## 在vue里面使用axios发请求\n\n首先要`import axios from 'axios'`\n\n然后在methods里面发请求，语法跟在js里面一样\n\n```vue\n<script>\nexport default{\n\tmethods:{\n\t\tasync getInfo(){\n\t\t\tconst(data:res)=await axios.get('')\n\t\t\t\tconsole.log(res)\n\t\t}\n\t}\n}\n</script>\n```\n\n## 把axios挂载到vue的原型上并配置请求根路径\n\n在main.js里面写`import axios from 'axios'`\n\n`axios.defaults.baseURL='请求根路径'`\n\n`Vue.prototype.$http=axios`\n\n写完上面这个之后就不需要在每个组件里面都写import了，代码改为\n\n```vue\n<script>\nexport default{\n\tmethods:{\n\t\tasync getInfo(){\n\t\t\t//只改了这一行的this\n\t\t\tconst(data:res)=await this.$http.get('')\n\t\t\t\tconsole.log(res)\n\t\t}\n\t}\n}\n</script>\n```\n\n缺点：没法实现接口的复用\n\n# 路由\n\n## 前端路由的工作方式\n\n1、用户点击了页面上的路由链接\n\n2、导致了URL地址栏中的hash值发生了变化\n\n3、前端路由监听到了Hash地址的变化\n\n4、前端路由把当前Hash地址对应的组件渲染到浏览器中\n\n## vue-router\n\n路由解决方案，只能在vue中使用\n\n官方文档vue2版\n\nhttps://v3.router.vuejs.org/zh/\n\n安装\n\nnpm i vue-router@3.5.2 -S\n\n在main.js里面写\n\nimport router from '@/router/index.js'\n\n然后在原有的new Vue({\n\n里面加上这行 router\n\n})\n\n在main.js里面写\n\n```vue\n\nimport VueRouter from 'vue-router'\n\nVue.use(VueRouter)\n\nconst router = new VueRouter()\n\nexport default router\n\n```\n\n在进行模块化导入的时候，如果给定的是文件夹，默认导入这个文件夹下，名字叫做index.js的文件\n\n## router-view\n\n<router-view></router-view>\n\n作用：占位符，写在app.vue里面\n\nroutes是一个数组，作用：定义哈希地址与组件之间的关系\n\npath里面#就不用写了，写#后面的\n![](../image/vue2-32.png)\n写在index.js里面，记得那个component后面的那个内容要先import\n\n## router-link代替a标签\n\n`<a href=\"#/home\">首页</a>`\n\n`<router-link to=\"/home\">首页</router-link>`\n\n注意：写这个to后面那个是地址，好处是不用写#\n\n## 路由重定向\n\n指用户在访问地址A的时候，强制用户跳转到地址C，从而展示特定的组件页面，通过路由规则的redirect属性，指定一个新的路由地址，可以很方便地设置路由的重定向\n\n```vue\nroutes:[\n\t{path:'/',redirect:\"/home\"}\n]\n```\n\n常用于重定向/这个，这样用户一上来就不会看见一个空页面\n\n## 嵌套路由\n\n通过路由实现组件的嵌套展示\n\n```<img src=\"C:\\Users\\asus\\AppData\\Roaming\\Typora\\typora-user-images\\1658393102995.png\" alt=\"1658393102995\" style=\"zoom:60%;\" />```\n\n如果要这样的话，那么那个tab1，tab2两个router-link要写在about.vue文件中，并且写一个占位符router-view\n\n## 通过children属性声明子路由规则\n\n写在index.js里面\n\n```vue\nimport tab1 from xxx\nimport tab2 from xxx\nconst router =new VueRouter({\n\troutes:[{\n\t\tpath:\"/about\"\n\t\tcomponent:About,\n\t\tchildren:[\n\t\t\t{path:'tab1',component:tab1},\n\t\t\t{path:'tab2',component:tab2}\n\t//斜线不用写\n\t\t]\n\t}]\n})\n```\n\n## 默认子路由\n\n比如我想点击about的时候自动跳转到about/tab1\n\n法一：用redirect设置默认路由地址\n\n那我就去找about的路由在哪里，然后在path后面加一个redirect属性，值等于about/tab1\n\n法二：默认子路由\n\n所谓默认子路由是指如果children数组中，某个路由规则的path值为空字符串，则这条路由规则，叫做默认子路由。\n\n只要有空字符串就表示，只要我一点击about，他就会自动跳转到响应组件\n\n```\nimport tab1 from xxx\nimport tab2 from xxx\nconst router =new VueRouter({\n\troutes:[{\n\t\tpath:\"/about\"\n\t\tcomponent:About,\n\t\tchildren:[\n\t\t\t{path:'',component:tab1},\n\t\t\t{path:'tab2',component:tab2}\n\t//斜线不用写\n\t\t]\n\t}]\n})\n```\n\n如果你写默认子路由的话，那么你之前写的那个router-link也要改\n![](../image/vue2-33.png)\n## 动态路由匹配\n\n动态路由是指，把哈希地址中可变的部分定义为参数项，从而提高路由规则的复用性。\n\n在vue-router中使用 ：来定义路由的参数项\n\n比如：\n\n```vue\n{path:'/movie/:id',component:Movie}\n```\n\n在Movie组件中拿到动态参数id的值\n\n法一：\n\n`this.$route.params.id`\n\nthis可以省略，this.$route是路由的参数对象\n\n法二：\n\n用props传参\n\n```\n{path:'/movie/:id',component:Movie,props:true}\n然后在movie组件的export default里面写入props:['id']\n\n所以我要使用到id的时候直接就{{id}}\n```\n\n```\n<router-link to=\"/movie/1?name=zs age=20\"\n```\n\n在哈希地址中 ？后面的参数项叫做查询参数。获取到？后面的参数值用`this.$route.query`\n\nthis.$route里面fullPath是完整的路径，包含？后面传递的参数，path就只是路径而已，不带参数\n\n# 导航\n\n## 声明式导航\n\n在浏览器中，点击链接实现导航的方式，叫做声明式导航\n\n普通网页中点击```<a>```链接，vue项目中点击```<router-link>```都属于声明式导航\n\n## 编程式导航\n\n在浏览器中，调用API方法实现导航的方式，叫做编程式导航。例如：普通网页中调用location.href跳转到新页面的方式，属于编程式导航\n\n在vue项目中，vue-router提供了许多编程式导航API，最常用的为：\n\n`this.$router.push('哈希地址')`\n\n跳转到指定的哈希地址，并增加一条历史记录\n\n`this.$router.replace('哈希地址')`\n\n跳转到指定的哈希地址，并替换掉当前的历史记录\n\n`this.$router.go(数值n)`\n\n在浏览历史中前进和后退（负数表示后退，整数表示前进）\n\n如果次数达到上限则原地不动\n\n在实际开发中，由于我们一般只会前进或后退1个页面，所以$router.go有一个快捷写法\n```\n$router.back() 后退\n\n$router.forward() 前进\n```\n注意：后面这两个不用写this\n\n## 导航守卫\n\n可以控制路由的访问权限\n\n### 全局前置守卫\n\n每次发生路由的导航跳转时，都会触发全局前置守卫，就是那个fn\n\n写在index.js里面\n```\nconst router = new VueRouter({.....})\n\nrouter.beforeEach(function(to,from,next){......})\n```\n### 守卫方法的3个形参\n\nto 将要访问的路由的信息对象\n\nfrom 将要离开的路由的信息对象\n\nnext 是一个函数，调用next（）表示放行，允许这次路由导航，必写\n\n### next函数的3种调用方式\n\n当前用户拥有后台主页的访问权限，直接放行，next（）\n\n当前用户没有后台主页的访问权限，强制其跳转到登录页面next（'/login')\n\n当前用户没有后台主页的访问权限，不允许跳转到后台主页，强制用户停留在当前页面，哪也不去\n\nnext(false)\n\n### 控制后台主页的访问权限\n\n```vue\nrouter.beforeEach(function(to,from,next){\n\t//假设main页面是后台\n\tif(to.path === '/main'){\n\t\tconst token = localStorage.getItem('token');\n\t\tif(token){\n\t\t\tnext();//访问的是后台，并且有登录\n\t\t}else{\n\t\t\tnext('/login');//访问后台，但是没登录\n\t\t}\n\t}else{\n\t\tnext();//不是要访问后台，不需要登录，直接放行\n\t}\n})\n```\n","source":"_posts/vue2学习笔记.md","raw":"---\ntitle: vue2学习笔记\ndate: 2022-08-30 17:00:37\ntags: \n  - 学习笔记\n  - vue2\n  - 前端\ncategories: 学习笔记\nlabel: 这是一篇vue2的知识点总结\ntop_img: \"../image/无风险05.png\"\ncover: \"../image/无风险05.png\"\ndescription: 这是一篇vue2的知识点总结\n---\n\n# 起步\n\n```vue\n<div id=\"app\">{{msg}}</div>\n    <script>\n        const vm = new Vue({\n            el:\"#app\",\n            data:{\n                msg:\"hello\"\n            }\n        });\n    </script>\n```\n\n# 指令\n\n## 内容渲染指令\nv-text\n\n```{{}}```\n\n```v-html```\n\n作用都是把文本内容渲染到界面中\n```vue\n区别：前两个不识别html语言，最后一个识别，v-text会覆盖掉这个标签原本有的内容，{{}}只能用在元素的内容节点中，不能用在元素的属性节点中\n```\n\n```vue\n<div id=\"app\">\n        <p v-text=\"msg\"></p>\n        <p >{{msg}} </p>\n        <p v-html=\"msg\"></p>\n    </div>\n    <script>\n        const vm = new Vue({\n            el:\"#app\",\n            data:{\n                msg:\"<h1>hello</h1>\"\n            }\n        });\n    </script>\n```\n\n运行结果：\n![](../image/vue2-01.png)\n## 属性渲染指令\n\nv-bind 简写为：\n\n单向绑定：即数值变化可以同步到页面上，但是页面上的变化没法改变数值\n\n```vue\n<div id=\"app\">\n        <input type=\"text\" :placeholder=\"tips\">\n    /*注意啊这里不需要{{tips}}*/\n    </div>\n    <script>\n        const vm = new Vue({\n            el:\"#app\",\n            data:{\n                tips:\"请输入用户名\"\n            }\n        });\n    </script>\n```\n\n运行结果：\n![](../image/vue2-02.png)\n\n在vue提供的渲染模板语法中，除了支持绑定简单的数值外，还支持js表达式的运算，比如\n![](../image/vue2-03.png)\n字符串拼接得这样写，其中box是字符串，index是data里面定义的\n![](../image/vue2-04.png)\n\n```\n注意：在{{}}里面只能写简单的js表达式，不能写if等复杂的js语句\n```\n## 事件绑定指令\n\nv-on简写为@\n\n点击事件就是@click，键盘事件就是@keyup,输入框的输入事件@input\n\n无参数版\n\n```vue\n <div id=\"app\">\n        <p>值为：{{num}}</p>\n        <button @click=\"add\">加一</button>\n        <button @click=\"cut\">减一</button>\n    </div>\n    <script>\n        const vm = new Vue({\n            el:\"#app\",\n            data:{\n                num:0,\n\n            },\n            methods:{\n                add(){\n                    // vm.num++;\n                    this.num++;//这里this指向vm\n                },\n                cut(){\n                    // vm.num--;\n                    this.num--;\n                }\n            }\n        });\n    </script>\n```\n\n带参数版\n\n```vue\n<div id=\"app\">\n        <p>值为：{{num}}</p>\n        <button @click=\"add(2,$event)\">加一</button>\n    //这个event不能换\n        <button @click=\"cut\">减一</button>\n    </div>\n    <script>\n        const vm = new Vue({\n            el:\"#app\",\n            data:{\n                num:0,\n\n            },\n            methods:{\n                add(n,e){\n                    // vm.num++;\n                    this.num+=n;\n                    e.target.innerHTML=\"加\"+n\n                    //e。target代表那个button按钮\n                },\n                cut(){\n                    // vm.num--;\n                    this.num--;\n                }\n            }\n        });\n    </script>\n```\n### 事件修饰符\n\n阻止默认行为\n\n`e.preventDefault();`\n\n或者\n\n`<a href=\"http://www.baidu.com\" @click.prevent=\"show\">跳转到百度</a>`\n![](../image/vue2-05.png)\n掌握前两个就行\n\n冒泡就是比如有两个盒子，都绑定了点击事件，那么你点击里面的盒子，他就会先执行里面盒子的点击事件再冒泡执行外面盒子的点击事件\n\n阻止事件冒泡：`e.stopPropagation()`或者`<a href=\"http://www.baidu.com\" @click.stop=\"show\">跳转到百度</a>`\n\n## 双向绑定\n\nv-model\n\n就是说属性值改变，页面里对应的值也改变，页面的值改变也可以同步改变属性值\n\nv-model只能用于表单那边，比如\n\ninput输入框，textarea，select\n\nv-model的修饰符\n![](../image/vue2-06.png)\n最后一个就是等她失去焦点之后同步他最后的结果，中间的变化过程都不管\n\n## 条件渲染\n\nv-if\n\nv-show\n\n两个的用处都是用于控制dom元素的显示和隐藏\n\n区别：v-if是如果值为false，那么他是动态删除该标签,true就动态创建回来，而v-show是如果值为false，把标签的属性变成display:none，true的话去掉这个属性\n\n性能方面：如果要频繁的切换元素的显示状态，v-show的性能好；如果刚进入页面的时候，某些元素默认不需要被显示，后期这个元素也很可能不用显示出来，此时v-if性能好\n\n### v-if配套的指令\n![](../image/vue2-07.png)\nv-else-if要配合v-if使用，不然不会被识别\n\n## 列表渲染\n```\nv-for\n\nv-for=\"(item,index) in items\"\n```\n第一个是数据，第二个是索引，如果不需要就不写index了\n\n官方推荐只要用到v-for指令，要绑定一个 :key=值，而且尽量把id作为key的值，不要用index，key的值有要求，必须是字符串或者数字，key的值不允许重复，不然会报错\n\n# 过滤器（只能用于vue2）\n\n作用：用于文本的格式化，可用在两个地方：插值表达式和v-bind属性绑定\n\n过滤器应该被添加到js表达式的尾部，由管道符  |  进行调用\n\n本质：一个函数，调用过滤器之后我们看见的是过滤器的返回值\n\n过滤器函数必须定义到filters里面，一定要有返回值\n\n## 私有过滤器和全局过滤器\n\n定义在vm里面的都属于私有过滤器\n\n全局过滤器的定义方法：\n```\nVue.filter('xxx',function)\n```\n第一个参数是全局过滤器的名字，第二个参数是处理函数\n\n注：如果私有过滤器和全局过滤器名字一样，按照就近原则调用私有过滤器\n```\n如果有多个过滤器，比如{{name | f1 | f2| f3}}这种，就是先把name的值交给f1，然后再把f1返回的值交给f2以此类推\n\n过滤器还可以传递参数，在filter里面第一个参数的位置永远是|前面那个，所以参数要在第二个往后接收\n```\n# 侦听器\n\n## watch侦听器\n\n```vue\n监视数据变化然后做相应处理的，本质上是一个函数\n\n侦听器要定义到watch：{}里面，要监听谁就把谁作为函数\n<div id=\"app\">\n        <input type=\"text\" v-model=\"username\">\n    </div>\n    <script>\n        const vm = new Vue({\n            el:\"#app\",\n            data:{\n                username:''\n            },\n            watch:{\n                username(newValue,oldValue){\n                    //操作\n                }\n            }\n        });\n    </script>\n```\n\n## 侦听器的格式\n\n1、方法格式的侦听器\n\n缺点：无法再刚进入页面的时候自动触发，\n\n如果侦听的是一个对象，如果对象中属性发生了变化，不会触发侦听器\n```\nusername（newValue,oldValue）\n```\n2、对象格式的侦听器\n\n好处：可以通过immediate选项，让侦听器自动触发，\n\n可以通过deep选项，让侦听器深度监听对象中每个属性的变化\n```\nusername：{\n\nhandler(newValue,oldValue){},\n\nimmediate:true\n\n//true表示刚进入页面的时候自动触发，false表示刚进入页面的时候不触发\n\n}\n```\n## 深度侦听\n\n用deep：true来进行深度监听，记得双向绑定的数据要改成对象.属性值\n\n```vue\n<div id=\"app\">\n        <input type=\"text\" v-model=\"info.username\">\n    </div>\n    <script>\n        const vm = new Vue({\n            el:\"#app\",\n            data:{\n                info:{\n                    username:'admin'\n                }\n            },\n            watch:{\n                //这样写没法侦听到username的变化\n                // info(newValue){\n                //     console.log(newVal);\n                // }\n\n            // 深度侦听的做法\n              info:{\n                handler(newValue){\n                    if(newValue === '')return \n                   var url='https://www.escook.cn/api/finduser/' + newValue;\n                   axios.get(url).then(function(res){\n                       console.log(res);\n                   })\n                \n                },\n                deep:true\n              }\n               \n            }\n        });\n    </script>\n```\n# 计算属性\n\n指通过一系列运算后，最终得到一个属性值\n\n写在```computed：{}```那边\n\n计算属性在定义的时候要定义成一个函数，在使用他的时候，把他当成一个属性使用就行\n\n好处：实现了代码复用，只要计算属性中依赖的数据源变化了，计算属性就会重新求值\n\n代码详见31.html\n\n# 创建vue项目\n\n指令\n\n在终端下运行如下的命令，创建指定名称的项目：\n\n```vue create 项目名称```\n\n运行，一定要先切换到项目文件里面，然后```npm run dev```\n\n# 组件\n\nVue实例中的 ```.$mount()```方法作用和el属性完全一样\n\n## 组件的三个组成部分\n\n每个.vue组件都由3部分构成，分别是：template  模板  script js代码 style 样式\n\n其中sytle部分就跟css一样，script部分要先默认写一个```export default{}```然后js代码写在里面\n\n在组件中，this表示当前组件的实例对象\n\n```vue\n<template>\n\t<div></div>\n</template>\n\n<script>\nexport default{\n\tdata(){\n        return{\n            username:'hahha'\n        }\n    },\n    methods:{\n        \n    }\n}\n</script>\n\n<style>\n\n</style>\n```\n\n注意：.vue组件中的data不能像之前那样，不能指向对象，组件中的data必须是一个函数，然后return一个数据对象。其他的什么侦听器，计算属性，事件等写法跟之前一样\n\n组件只能包含唯一的一个根节点，意思是不能在一个template中出现两个平级的div，解决方案，把这两个平级的div用一个大的div包裹起来就行\n\n在style中。如果要启用less来写样式的话，要写```<style lang=\"less\">```\n\n## 组件之间的父子关系\n\n组件在被封装好之后，彼此之间是相互独立的，不存在父子关系\n\n在使用组件的时候，根据彼此的嵌套关系，形成了父子关系，兄弟关系\n\n## 使用组件的三个步骤\n\n1、使用import语法导入需要的组件 \n\n2、使用components节点注册组件\n\n3、以标签形式使用刚才注册的组件\n![](../image/vue2-08.png)\n要在哪个vue文件中用，就在哪个vue文件那边导入\n\n通过components注册的是私有子组件\n\n## 注册全局组件\n\n在vue项目的main.js入口文件中，通过Vue.component()方法，可以注册全局组件\n![](../image/vue2-09.png)\n组件名称尽量都是大写开头\n\n在自己的组件里面没法使用自己\n\n## 组件里面的props\n\n如果这个事件函数里面只有一行代码，也可以这么写\n![](../image/vue2-10.png)\nprops的作用的提升代码的复用性，语法如下：\n![](../image/vue2-11.png)\n```\n注意啊，如果你的数据是数字且要进行四则运算，一定要写成 :init=\"9\"这种v-bind的形式，如果传的是字符串，也要加 ：\nprops中的数据可以在template中{{init}}这样使用，但是他是只读的，所以不要拿它去做任何运算\n```\n### props的default默认值\n\n把props变成一个对象，default属性用于如果用户没有定义init属性就把值变成默认的default值\n![](../image/vue2-12.png)\n### props的type值类型\n\n用type属性定义属性的值类型，如果传递过来的值不符合要求就会报错\n\n```vue\nprops：{\n\tinit:{\n\t\tdefault:0,\n\t\ttype:Number\n\t\t//或者Object String\n\t}\n}\n```\n\n### props的required必填项\n\n就是谁用这个组件，谁必须传值给我，不然就会报错\n\n```vue\nprops：{\n\tinit:{\n\t\tdefault:0,\n\t\ttype:Number,\n\t\t//或者Object String\n\t\trequired:true\n\t}\n}\n```\n\n## 组件之间的样式冲突问题\n\n默认情况下，写在.vue组件中的样式会全局生效，因此很容易造成多个组件之间的样式冲突问题。\n\n导致组件之间样式冲突的根本原因是：\n\n1、单页面应用程序中，所有组件的dom结构，都是基于唯一的index.html页面进行呈现的\n\n2、每个组件中的样式，都会影响整个index.html页面中的dom元素\n\n解决方法：\n\n1、给统一组件的标签都加上一个相同的属性，然后写样式的时候写标签[属性]这样\n\n2、在style里面写一个scoped（用这个）\n![](../image/vue2-13.png)\n## /deep/样式穿透\n\n 用于在父组件中直接改造子组件的样式，当使用第三方组件库的时候，如果有修改组件默认样式的需求，就需要用到这个\n\n在style中要改变的对应标签前面加/deep/空格 标签名\n\n## 组件的生命周期\n\n——除了3个常用的，其他的了解一下就行\n\n生命周期是指一个组件从创建——运行——销毁的整个阶段，强调的是一个时间段 \n![](../image/vue2-14.png)\nbeforeCreate  组件的props/data/methods尚未被创建，都处于不可用状态\n\ncreated   组件的props/data/methods已创建好，都处于可用的状态，但是组件的模板结构尚未生成，不能创建dom（**重要，在这里要发起ajax请求**）\n\nbeforeMount 将要把内存中编译好的html结构渲染要浏览器中，此时浏览器中还没有当前组件的dom结构\n\nmounted 已经把内存中的html结构成功的渲染到了浏览器中，此时浏览器中已然包含了当前组件的dom结构(**最早操作dom元素**)\n\nbeforeUpdate 将要根据变化过后、最新的数据，重新渲染组件的模板结构\n\nupdated 已经根据最新的数据，完成了组件dom结构的重新渲染（**重**）\n\nbeforeDestroy 将要销毁此组件，此时尚未销毁，组件还处于正常工作的状态\n\ndestroyed 组件已经被销毁，此组件在浏览器中对应的dom结构已经被完全移除\n\n## 组件之间的数据共享\n\n如果父组件中要使用子组件，那么对于table下的tr，select下的option。ul里的li，ol里的li这种，要用is\n![](../image/vue2-15.png)\n其中MyTr就是你想在tr里面使用的组件名\n\n### 父向子传值\n\n用**自定义属性** Props\n\n父组件只负责提供数据，props写在子组件中\n\n注意：不要在子组件中修改props里面的数据\n\n### 子向父传值\n\n使用**自定义事件** $emit('事件名',要传递的数据)，其中需要在父组件中先定义一个值用于传输子组件传递过来的值，然后还要再父组件中绑定这个自定义事件然后定义一个methods\n\n### 兄弟组件之间的数据共享\n\n在vue2中EventBus（**面试问得多**）\n\n首先在接收数据方定义一个属性，用于接收传递过来的数据\n![](../image/vue2-16.png)\n使用步骤\n\n1、创建eventBus.js模块（自己建一个），并向外共享一个Vue的实例对象\n\n2、在数据发送方，import js文件，调用bus.$emit('事件名称',要发送的数据)方法触发自定义事件\n\n3、在数据接收方，import js文件，调用bus.$on('事件名称',事件处理函数)方法注册一个自定义事件\n\n## 动态组件\n\n指动态切换组件的显示与隐藏\n\nvue提供了一个内置的```<component>```组件（可以认为是一个占位符），专门用来实现动态组件的渲染\n\n语法：```<component is=\"组件名\"></component>```\n\n如果你不想写死的话就是在data（）里面定义一个变量，然后\n\n```<component :is=\"变量名\"></component>```\n\n当组件被隐藏时，其实是组件被销毁了，然后再次出现是重新创建\n\n### keep-alive\n\n如果要做到离开这个组件的时候不要被销毁，用keep-alive保持状态，原理是当这个组件出现的时候被激活然后当这个组件隐藏的时候被缓存。\n![](../image/vue2-17.png)\n把你要保存的那个组件放在keep-alive里面。\n\n### keep-alive对应的生命周期函数\n\n当组件被缓存时，会自动触发组件的deactivated生命周期函数\n\n当组件被激活时，会自动触发组件的activated生命周期函数\n\n当组件第一次被创建的时候，顺序是先执行created，然后再执行activated，后面是只执行activated\n\n注：上面这两个，要用了keep-active后才能使用\n\n### keep-alive的include属性\n\ninclude属性用来指定：只有名称匹配的组件会被缓存。多个组件名之间使用英文的逗号分隔\n![](../image/vue2-18.png)\nexclude排除项，写在这边的组件不会被缓存。注意：include和exclude不能同时使用\n\n## 组件注册名称和声明name名称的区别\n\n如果在声明组件（比如Left.vue里面）的时候，没有为组件指定name名称，则组件的名称默认就是注册时候的名称（比如App.vue里面component写的那个名）\n\n当你在组件声明的时候设了name名称之后，组件就是这个名\n![](../image/vue2-19.png)\n我们设置注册名称只是为了要让我们可以以标签的方式去使用这个组件。\n\n组件声明时设置的name名称主要用于keep-alive标签实现组件缓存功能，以及在调试工具中看到组件的name名称\n\n# ref引用\n\n获取dom元素或组件的引用\n\n每个vue的组件实例上，默认有一个$refs对象，里面存储着对应的dom元素或组件的引用。默认情况下，组件的$refs指向一个空对象\n\n首先你要获取dom，就在这边给他加一个ref属性\n![](../image/vue2-20.png)\n操作dom\n![](../image/vue2-21.png)\n他也可以获取组件的引用：\n\n先给这个组件加一个ref属性\n![](../image/vue2-22.png)\n然后操作这个组件的属性和方法跟操作dom一样\n\nthis.$refs.名字.你想用啥\n\n# this.$nextTick(回调函数)\n\n等组件的dom重新渲染好之后再调用回调函数，从而保证回调函数可以操作到最新的数据\n\n# 插槽\n\n插槽是vue为组件的封装者提供的能力，允许封装者在封装组件时，把不确定的，希望由用户指定的部分定义为插槽\n\n用```<slot></slot>```标签作为占位符，(比如写在left.vue里面)到时候用这个组件的时候写进以组件名为标签名的标签的时候就会把标签里面的内容（写在app.vue里面）渲染到这个占位符这里。\n\nvue官方规定，每一个slot插槽，都要有一个name名称，如果省略，默认```name=\"default\"```。默认情况下，在使用组件（在app.vue里面）的时候，提供的内容都会被填充到名字为default的插槽之中。\n\n## v-slot指令\n\n——简写为 #\n\n如果我们要指名道姓告诉vue我要把这个内容放在哪个插槽中，用v-slot：插槽名字，语法格式如下：\n![](../image/vue2-23.png)\nv-slot不能直接用在元素身上，必须用在template标签上\n\ntemplate这个标签是一个虚拟的标签，只起到包裹性质的作用，但是，不会被渲染为任何实质性的html标签\n\n## 后备内容\n\n如果我们用户没有指定插槽位置要放什么，我们要指定一个默认的内容的话，直接写在slot标签中间就行\n\n## 具名插槽\n\n就是给slot插槽加一个name，name为default的叫做默认插槽\n\n## 作用域插槽\n```\n指在封装组件时，为预留的<slot>提供属性对应的值。\n\n通过插槽的定义，我们可以拿到传过来的值（相当于子传父）\n\n标准写法是接收参数的都叫做scope，然后如果我们要拿到传递的那个参数，就是{{score.msg}}\n```\n![](../image/vue2-24.png)\n![](../image/vue2-25.png)\n也可以用解构赋值\n![](../image/vue2-26.png)\n# 自定义指令\n\n分为私有自定义指令和全局自定义指令\n\n## 私有自定义指令\n\n在组件的script那边定义，跟定义data啊，el啊这种一样，在directives节点下声明。里面的el是固定的。\n![](../image/vue2-27.png)\n这样定义之后这个指令的名称就叫做v-color\n![](../image/vue2-28.png)\n这样用完之后，这个h1标签里面的文字就会变成红色\n\n也可以是```<h1 v-color=\"hhh\">哈哈哈</h1>```\n\n这样bind里面有两个参数bind(el,binding)\n\n**第一个参数是当前指令所绑定的dom对象，就是h1。如果要获取到用户通过指令传递过来的hhh的值，就用binding.value就可以拿到**\n![](../image/vue2-29.png)\n这种是写死的，就是我要传递的就是red，而上面那种写法是传一个参数，他回去data里面找有没有叫hhh的属性\n\nbind元素的缺点：这个只在指令第一个绑定到元素上面的时候才能触发\n\n### update函数\n\n也是有两个参数，el和binding，含义一样的\n\nupdate函数会在每次dom更新时被调用\n\n这个也是写在directives，跟bind函数平级\n\nbind和update都必须要有\n\n### 函数简写\n\n如果bind和update函数中的逻辑完全相同。则可以把指令写成函数形式\n\n## 全局自定义指令\n\n写在main.js文件中\n\n简写版本：\n\n`Vue.directive('指令名',function(el,binding){ 业务逻辑})`\n\n全写版本：\n![](../image/vue2-30.png)\n代码里面的提示\n![](../image/vue2-31.png)\n这个true的情况下，你可以看见那个温馨提示，提示你项目要上线的时候需要改模式，如果你改为false，那么你看不见那个提示。默认为true，就是你不写这行代码也是true\n\n# eslint\n\n用于约束代码规范\n\n官方文档https://eslint.bootcss.com/\n\n# axios\n\n## 安装axios的命令\n\nnpm i axios -S\n\n## 在vue里面使用axios发请求\n\n首先要`import axios from 'axios'`\n\n然后在methods里面发请求，语法跟在js里面一样\n\n```vue\n<script>\nexport default{\n\tmethods:{\n\t\tasync getInfo(){\n\t\t\tconst(data:res)=await axios.get('')\n\t\t\t\tconsole.log(res)\n\t\t}\n\t}\n}\n</script>\n```\n\n## 把axios挂载到vue的原型上并配置请求根路径\n\n在main.js里面写`import axios from 'axios'`\n\n`axios.defaults.baseURL='请求根路径'`\n\n`Vue.prototype.$http=axios`\n\n写完上面这个之后就不需要在每个组件里面都写import了，代码改为\n\n```vue\n<script>\nexport default{\n\tmethods:{\n\t\tasync getInfo(){\n\t\t\t//只改了这一行的this\n\t\t\tconst(data:res)=await this.$http.get('')\n\t\t\t\tconsole.log(res)\n\t\t}\n\t}\n}\n</script>\n```\n\n缺点：没法实现接口的复用\n\n# 路由\n\n## 前端路由的工作方式\n\n1、用户点击了页面上的路由链接\n\n2、导致了URL地址栏中的hash值发生了变化\n\n3、前端路由监听到了Hash地址的变化\n\n4、前端路由把当前Hash地址对应的组件渲染到浏览器中\n\n## vue-router\n\n路由解决方案，只能在vue中使用\n\n官方文档vue2版\n\nhttps://v3.router.vuejs.org/zh/\n\n安装\n\nnpm i vue-router@3.5.2 -S\n\n在main.js里面写\n\nimport router from '@/router/index.js'\n\n然后在原有的new Vue({\n\n里面加上这行 router\n\n})\n\n在main.js里面写\n\n```vue\n\nimport VueRouter from 'vue-router'\n\nVue.use(VueRouter)\n\nconst router = new VueRouter()\n\nexport default router\n\n```\n\n在进行模块化导入的时候，如果给定的是文件夹，默认导入这个文件夹下，名字叫做index.js的文件\n\n## router-view\n\n<router-view></router-view>\n\n作用：占位符，写在app.vue里面\n\nroutes是一个数组，作用：定义哈希地址与组件之间的关系\n\npath里面#就不用写了，写#后面的\n![](../image/vue2-32.png)\n写在index.js里面，记得那个component后面的那个内容要先import\n\n## router-link代替a标签\n\n`<a href=\"#/home\">首页</a>`\n\n`<router-link to=\"/home\">首页</router-link>`\n\n注意：写这个to后面那个是地址，好处是不用写#\n\n## 路由重定向\n\n指用户在访问地址A的时候，强制用户跳转到地址C，从而展示特定的组件页面，通过路由规则的redirect属性，指定一个新的路由地址，可以很方便地设置路由的重定向\n\n```vue\nroutes:[\n\t{path:'/',redirect:\"/home\"}\n]\n```\n\n常用于重定向/这个，这样用户一上来就不会看见一个空页面\n\n## 嵌套路由\n\n通过路由实现组件的嵌套展示\n\n```<img src=\"C:\\Users\\asus\\AppData\\Roaming\\Typora\\typora-user-images\\1658393102995.png\" alt=\"1658393102995\" style=\"zoom:60%;\" />```\n\n如果要这样的话，那么那个tab1，tab2两个router-link要写在about.vue文件中，并且写一个占位符router-view\n\n## 通过children属性声明子路由规则\n\n写在index.js里面\n\n```vue\nimport tab1 from xxx\nimport tab2 from xxx\nconst router =new VueRouter({\n\troutes:[{\n\t\tpath:\"/about\"\n\t\tcomponent:About,\n\t\tchildren:[\n\t\t\t{path:'tab1',component:tab1},\n\t\t\t{path:'tab2',component:tab2}\n\t//斜线不用写\n\t\t]\n\t}]\n})\n```\n\n## 默认子路由\n\n比如我想点击about的时候自动跳转到about/tab1\n\n法一：用redirect设置默认路由地址\n\n那我就去找about的路由在哪里，然后在path后面加一个redirect属性，值等于about/tab1\n\n法二：默认子路由\n\n所谓默认子路由是指如果children数组中，某个路由规则的path值为空字符串，则这条路由规则，叫做默认子路由。\n\n只要有空字符串就表示，只要我一点击about，他就会自动跳转到响应组件\n\n```\nimport tab1 from xxx\nimport tab2 from xxx\nconst router =new VueRouter({\n\troutes:[{\n\t\tpath:\"/about\"\n\t\tcomponent:About,\n\t\tchildren:[\n\t\t\t{path:'',component:tab1},\n\t\t\t{path:'tab2',component:tab2}\n\t//斜线不用写\n\t\t]\n\t}]\n})\n```\n\n如果你写默认子路由的话，那么你之前写的那个router-link也要改\n![](../image/vue2-33.png)\n## 动态路由匹配\n\n动态路由是指，把哈希地址中可变的部分定义为参数项，从而提高路由规则的复用性。\n\n在vue-router中使用 ：来定义路由的参数项\n\n比如：\n\n```vue\n{path:'/movie/:id',component:Movie}\n```\n\n在Movie组件中拿到动态参数id的值\n\n法一：\n\n`this.$route.params.id`\n\nthis可以省略，this.$route是路由的参数对象\n\n法二：\n\n用props传参\n\n```\n{path:'/movie/:id',component:Movie,props:true}\n然后在movie组件的export default里面写入props:['id']\n\n所以我要使用到id的时候直接就{{id}}\n```\n\n```\n<router-link to=\"/movie/1?name=zs age=20\"\n```\n\n在哈希地址中 ？后面的参数项叫做查询参数。获取到？后面的参数值用`this.$route.query`\n\nthis.$route里面fullPath是完整的路径，包含？后面传递的参数，path就只是路径而已，不带参数\n\n# 导航\n\n## 声明式导航\n\n在浏览器中，点击链接实现导航的方式，叫做声明式导航\n\n普通网页中点击```<a>```链接，vue项目中点击```<router-link>```都属于声明式导航\n\n## 编程式导航\n\n在浏览器中，调用API方法实现导航的方式，叫做编程式导航。例如：普通网页中调用location.href跳转到新页面的方式，属于编程式导航\n\n在vue项目中，vue-router提供了许多编程式导航API，最常用的为：\n\n`this.$router.push('哈希地址')`\n\n跳转到指定的哈希地址，并增加一条历史记录\n\n`this.$router.replace('哈希地址')`\n\n跳转到指定的哈希地址，并替换掉当前的历史记录\n\n`this.$router.go(数值n)`\n\n在浏览历史中前进和后退（负数表示后退，整数表示前进）\n\n如果次数达到上限则原地不动\n\n在实际开发中，由于我们一般只会前进或后退1个页面，所以$router.go有一个快捷写法\n```\n$router.back() 后退\n\n$router.forward() 前进\n```\n注意：后面这两个不用写this\n\n## 导航守卫\n\n可以控制路由的访问权限\n\n### 全局前置守卫\n\n每次发生路由的导航跳转时，都会触发全局前置守卫，就是那个fn\n\n写在index.js里面\n```\nconst router = new VueRouter({.....})\n\nrouter.beforeEach(function(to,from,next){......})\n```\n### 守卫方法的3个形参\n\nto 将要访问的路由的信息对象\n\nfrom 将要离开的路由的信息对象\n\nnext 是一个函数，调用next（）表示放行，允许这次路由导航，必写\n\n### next函数的3种调用方式\n\n当前用户拥有后台主页的访问权限，直接放行，next（）\n\n当前用户没有后台主页的访问权限，强制其跳转到登录页面next（'/login')\n\n当前用户没有后台主页的访问权限，不允许跳转到后台主页，强制用户停留在当前页面，哪也不去\n\nnext(false)\n\n### 控制后台主页的访问权限\n\n```vue\nrouter.beforeEach(function(to,from,next){\n\t//假设main页面是后台\n\tif(to.path === '/main'){\n\t\tconst token = localStorage.getItem('token');\n\t\tif(token){\n\t\t\tnext();//访问的是后台，并且有登录\n\t\t}else{\n\t\t\tnext('/login');//访问后台，但是没登录\n\t\t}\n\t}else{\n\t\tnext();//不是要访问后台，不需要登录，直接放行\n\t}\n})\n```\n","slug":"vue2学习笔记","published":1,"updated":"2022-10-04T12:51:48.478Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyn4sci8000oecvz4ris13qw","content":"<h1 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;app&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        const vm = new Vue(&#123;</span><br><span class=\"line\">            el:&quot;#app&quot;,</span><br><span class=\"line\">            data:&#123;</span><br><span class=\"line\">                msg:&quot;hello&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h1><h2 id=\"内容渲染指令\"><a href=\"#内容渲染指令\" class=\"headerlink\" title=\"内容渲染指令\"></a>内容渲染指令</h2><p>v-text</p>\n<p><code>&#123;&#123;&#125;&#125;</code></p>\n<p><code>v-html</code></p>\n<p>作用都是把文本内容渲染到界面中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">区别：前两个不识别html语言，最后一个识别，v-text会覆盖掉这个标签原本有的内容，&#123;&#123;&#125;&#125;只能用在元素的内容节点中，不能用在元素的属性节点中</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">        &lt;p v-text=&quot;msg&quot;&gt;&lt;/p&gt;</span><br><span class=\"line\">        &lt;p &gt;&#123;&#123;msg&#125;&#125; &lt;/p&gt;</span><br><span class=\"line\">        &lt;p v-html=&quot;msg&quot;&gt;&lt;/p&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        const vm = new Vue(&#123;</span><br><span class=\"line\">            el:&quot;#app&quot;,</span><br><span class=\"line\">            data:&#123;</span><br><span class=\"line\">                msg:&quot;&lt;h1&gt;hello&lt;/h1&gt;&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：<br><img src=\"/../image/vue2-01.png\"></p>\n<h2 id=\"属性渲染指令\"><a href=\"#属性渲染指令\" class=\"headerlink\" title=\"属性渲染指令\"></a>属性渲染指令</h2><p>v-bind 简写为：</p>\n<p>单向绑定：即数值变化可以同步到页面上，但是页面上的变化没法改变数值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">        &lt;input type=&quot;text&quot; :placeholder=&quot;tips&quot;&gt;</span><br><span class=\"line\">    /*注意啊这里不需要&#123;&#123;tips&#125;&#125;*/</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        const vm = new Vue(&#123;</span><br><span class=\"line\">            el:&quot;#app&quot;,</span><br><span class=\"line\">            data:&#123;</span><br><span class=\"line\">                tips:&quot;请输入用户名&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：<br><img src=\"/../image/vue2-02.png\"></p>\n<p>在vue提供的渲染模板语法中，除了支持绑定简单的数值外，还支持js表达式的运算，比如<br><img src=\"/../image/vue2-03.png\"><br>字符串拼接得这样写，其中box是字符串，index是data里面定义的<br><img src=\"/../image/vue2-04.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注意：在&#123;&#123;&#125;&#125;里面只能写简单的js表达式，不能写if等复杂的js语句</span><br></pre></td></tr></table></figure>\n<h2 id=\"事件绑定指令\"><a href=\"#事件绑定指令\" class=\"headerlink\" title=\"事件绑定指令\"></a>事件绑定指令</h2><p>v-on简写为@</p>\n<p>点击事件就是@click，键盘事件就是@keyup,输入框的输入事件@input</p>\n<p>无参数版</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">       &lt;p&gt;值为：&#123;&#123;num&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">       &lt;button @click=&quot;add&quot;&gt;加一&lt;/button&gt;</span><br><span class=\"line\">       &lt;button @click=&quot;cut&quot;&gt;减一&lt;/button&gt;</span><br><span class=\"line\">   &lt;/div&gt;</span><br><span class=\"line\">   &lt;script&gt;</span><br><span class=\"line\">       const vm = new Vue(&#123;</span><br><span class=\"line\">           el:&quot;#app&quot;,</span><br><span class=\"line\">           data:&#123;</span><br><span class=\"line\">               num:0,</span><br><span class=\"line\"></span><br><span class=\"line\">           &#125;,</span><br><span class=\"line\">           methods:&#123;</span><br><span class=\"line\">               add()&#123;</span><br><span class=\"line\">                   // vm.num++;</span><br><span class=\"line\">                   this.num++;//这里this指向vm</span><br><span class=\"line\">               &#125;,</span><br><span class=\"line\">               cut()&#123;</span><br><span class=\"line\">                   // vm.num--;</span><br><span class=\"line\">                   this.num--;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">   &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>带参数版</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">        &lt;p&gt;值为：&#123;&#123;num&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">        &lt;button @click=&quot;add(2,$event)&quot;&gt;加一&lt;/button&gt;</span><br><span class=\"line\">    //这个event不能换</span><br><span class=\"line\">        &lt;button @click=&quot;cut&quot;&gt;减一&lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        const vm = new Vue(&#123;</span><br><span class=\"line\">            el:&quot;#app&quot;,</span><br><span class=\"line\">            data:&#123;</span><br><span class=\"line\">                num:0,</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            methods:&#123;</span><br><span class=\"line\">                add(n,e)&#123;</span><br><span class=\"line\">                    // vm.num++;</span><br><span class=\"line\">                    this.num+=n;</span><br><span class=\"line\">                    e.target.innerHTML=&quot;加&quot;+n</span><br><span class=\"line\">                    //e。target代表那个button按钮</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                cut()&#123;</span><br><span class=\"line\">                    // vm.num--;</span><br><span class=\"line\">                    this.num--;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h3><p>阻止默认行为</p>\n<p><code>e.preventDefault();</code></p>\n<p>或者</p>\n<p><code>&lt;a href=&quot;http://www.baidu.com&quot; @click.prevent=&quot;show&quot;&gt;跳转到百度&lt;/a&gt;</code><br><img src=\"/../image/vue2-05.png\"><br>掌握前两个就行</p>\n<p>冒泡就是比如有两个盒子，都绑定了点击事件，那么你点击里面的盒子，他就会先执行里面盒子的点击事件再冒泡执行外面盒子的点击事件</p>\n<p>阻止事件冒泡：<code>e.stopPropagation()</code>或者<code>&lt;a href=&quot;http://www.baidu.com&quot; @click.stop=&quot;show&quot;&gt;跳转到百度&lt;/a&gt;</code></p>\n<h2 id=\"双向绑定\"><a href=\"#双向绑定\" class=\"headerlink\" title=\"双向绑定\"></a>双向绑定</h2><p>v-model</p>\n<p>就是说属性值改变，页面里对应的值也改变，页面的值改变也可以同步改变属性值</p>\n<p>v-model只能用于表单那边，比如</p>\n<p>input输入框，textarea，select</p>\n<p>v-model的修饰符<br><img src=\"/../image/vue2-06.png\"><br>最后一个就是等她失去焦点之后同步他最后的结果，中间的变化过程都不管</p>\n<h2 id=\"条件渲染\"><a href=\"#条件渲染\" class=\"headerlink\" title=\"条件渲染\"></a>条件渲染</h2><p>v-if</p>\n<p>v-show</p>\n<p>两个的用处都是用于控制dom元素的显示和隐藏</p>\n<p>区别：v-if是如果值为false，那么他是动态删除该标签,true就动态创建回来，而v-show是如果值为false，把标签的属性变成display:none，true的话去掉这个属性</p>\n<p>性能方面：如果要频繁的切换元素的显示状态，v-show的性能好；如果刚进入页面的时候，某些元素默认不需要被显示，后期这个元素也很可能不用显示出来，此时v-if性能好</p>\n<h3 id=\"v-if配套的指令\"><a href=\"#v-if配套的指令\" class=\"headerlink\" title=\"v-if配套的指令\"></a>v-if配套的指令</h3><p><img src=\"/../image/vue2-07.png\"><br>v-else-if要配合v-if使用，不然不会被识别</p>\n<h2 id=\"列表渲染\"><a href=\"#列表渲染\" class=\"headerlink\" title=\"列表渲染\"></a>列表渲染</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v-for</span><br><span class=\"line\"></span><br><span class=\"line\">v-for=&quot;(item,index) in items&quot;</span><br></pre></td></tr></table></figure>\n<p>第一个是数据，第二个是索引，如果不需要就不写index了</p>\n<p>官方推荐只要用到v-for指令，要绑定一个 :key=值，而且尽量把id作为key的值，不要用index，key的值有要求，必须是字符串或者数字，key的值不允许重复，不然会报错</p>\n<h1 id=\"过滤器（只能用于vue2）\"><a href=\"#过滤器（只能用于vue2）\" class=\"headerlink\" title=\"过滤器（只能用于vue2）\"></a>过滤器（只能用于vue2）</h1><p>作用：用于文本的格式化，可用在两个地方：插值表达式和v-bind属性绑定</p>\n<p>过滤器应该被添加到js表达式的尾部，由管道符  |  进行调用</p>\n<p>本质：一个函数，调用过滤器之后我们看见的是过滤器的返回值</p>\n<p>过滤器函数必须定义到filters里面，一定要有返回值</p>\n<h2 id=\"私有过滤器和全局过滤器\"><a href=\"#私有过滤器和全局过滤器\" class=\"headerlink\" title=\"私有过滤器和全局过滤器\"></a>私有过滤器和全局过滤器</h2><p>定义在vm里面的都属于私有过滤器</p>\n<p>全局过滤器的定义方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.filter(&#x27;xxx&#x27;,function)</span><br></pre></td></tr></table></figure>\n<p>第一个参数是全局过滤器的名字，第二个参数是处理函数</p>\n<p>注：如果私有过滤器和全局过滤器名字一样，按照就近原则调用私有过滤器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果有多个过滤器，比如&#123;&#123;name | f1 | f2| f3&#125;&#125;这种，就是先把name的值交给f1，然后再把f1返回的值交给f2以此类推</span><br><span class=\"line\"></span><br><span class=\"line\">过滤器还可以传递参数，在filter里面第一个参数的位置永远是|前面那个，所以参数要在第二个往后接收</span><br></pre></td></tr></table></figure>\n<h1 id=\"侦听器\"><a href=\"#侦听器\" class=\"headerlink\" title=\"侦听器\"></a>侦听器</h1><h2 id=\"watch侦听器\"><a href=\"#watch侦听器\" class=\"headerlink\" title=\"watch侦听器\"></a>watch侦听器</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">监视数据变化然后做相应处理的，本质上是一个函数</span><br><span class=\"line\"></span><br><span class=\"line\">侦听器要定义到watch：&#123;&#125;里面，要监听谁就把谁作为函数</span><br><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">        &lt;input type=&quot;text&quot; v-model=&quot;username&quot;&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        const vm = new Vue(&#123;</span><br><span class=\"line\">            el:&quot;#app&quot;,</span><br><span class=\"line\">            data:&#123;</span><br><span class=\"line\">                username:&#x27;&#x27;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            watch:&#123;</span><br><span class=\"line\">                username(newValue,oldValue)&#123;</span><br><span class=\"line\">                    //操作</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"侦听器的格式\"><a href=\"#侦听器的格式\" class=\"headerlink\" title=\"侦听器的格式\"></a>侦听器的格式</h2><p>1、方法格式的侦听器</p>\n<p>缺点：无法再刚进入页面的时候自动触发，</p>\n<p>如果侦听的是一个对象，如果对象中属性发生了变化，不会触发侦听器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username（newValue,oldValue）</span><br></pre></td></tr></table></figure>\n<p>2、对象格式的侦听器</p>\n<p>好处：可以通过immediate选项，让侦听器自动触发，</p>\n<p>可以通过deep选项，让侦听器深度监听对象中每个属性的变化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username：&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">handler(newValue,oldValue)&#123;&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">immediate:true</span><br><span class=\"line\"></span><br><span class=\"line\">//true表示刚进入页面的时候自动触发，false表示刚进入页面的时候不触发</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"深度侦听\"><a href=\"#深度侦听\" class=\"headerlink\" title=\"深度侦听\"></a>深度侦听</h2><p>用deep：true来进行深度监听，记得双向绑定的数据要改成对象.属性值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">        &lt;input type=&quot;text&quot; v-model=&quot;info.username&quot;&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        const vm = new Vue(&#123;</span><br><span class=\"line\">            el:&quot;#app&quot;,</span><br><span class=\"line\">            data:&#123;</span><br><span class=\"line\">                info:&#123;</span><br><span class=\"line\">                    username:&#x27;admin&#x27;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            watch:&#123;</span><br><span class=\"line\">                //这样写没法侦听到username的变化</span><br><span class=\"line\">                // info(newValue)&#123;</span><br><span class=\"line\">                //     console.log(newVal);</span><br><span class=\"line\">                // &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            // 深度侦听的做法</span><br><span class=\"line\">              info:&#123;</span><br><span class=\"line\">                handler(newValue)&#123;</span><br><span class=\"line\">                    if(newValue === &#x27;&#x27;)return </span><br><span class=\"line\">                   var url=&#x27;https://www.escook.cn/api/finduser/&#x27; + newValue;</span><br><span class=\"line\">                   axios.get(url).then(function(res)&#123;</span><br><span class=\"line\">                       console.log(res);</span><br><span class=\"line\">                   &#125;)</span><br><span class=\"line\">                </span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                deep:true</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">               </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h1><p>指通过一系列运算后，最终得到一个属性值</p>\n<p>写在<code>computed：&#123;&#125;</code>那边</p>\n<p>计算属性在定义的时候要定义成一个函数，在使用他的时候，把他当成一个属性使用就行</p>\n<p>好处：实现了代码复用，只要计算属性中依赖的数据源变化了，计算属性就会重新求值</p>\n<p>代码详见31.html</p>\n<h1 id=\"创建vue项目\"><a href=\"#创建vue项目\" class=\"headerlink\" title=\"创建vue项目\"></a>创建vue项目</h1><p>指令</p>\n<p>在终端下运行如下的命令，创建指定名称的项目：</p>\n<p><code>vue create 项目名称</code></p>\n<p>运行，一定要先切换到项目文件里面，然后<code>npm run dev</code></p>\n<h1 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h1><p>Vue实例中的 <code>.$mount()</code>方法作用和el属性完全一样</p>\n<h2 id=\"组件的三个组成部分\"><a href=\"#组件的三个组成部分\" class=\"headerlink\" title=\"组件的三个组成部分\"></a>组件的三个组成部分</h2><p>每个.vue组件都由3部分构成，分别是：template  模板  script js代码 style 样式</p>\n<p>其中sytle部分就跟css一样，script部分要先默认写一个<code>export default&#123;&#125;</code>然后js代码写在里面</p>\n<p>在组件中，this表示当前组件的实例对象</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default&#123;</span><br><span class=\"line\">\tdata()&#123;</span><br><span class=\"line\">        return&#123;</span><br><span class=\"line\">            username:&#x27;hahha&#x27;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>注意：.vue组件中的data不能像之前那样，不能指向对象，组件中的data必须是一个函数，然后return一个数据对象。其他的什么侦听器，计算属性，事件等写法跟之前一样</p>\n<p>组件只能包含唯一的一个根节点，意思是不能在一个template中出现两个平级的div，解决方案，把这两个平级的div用一个大的div包裹起来就行</p>\n<p>在style中。如果要启用less来写样式的话，要写<code>&lt;style lang=&quot;less&quot;&gt;</code></p>\n<h2 id=\"组件之间的父子关系\"><a href=\"#组件之间的父子关系\" class=\"headerlink\" title=\"组件之间的父子关系\"></a>组件之间的父子关系</h2><p>组件在被封装好之后，彼此之间是相互独立的，不存在父子关系</p>\n<p>在使用组件的时候，根据彼此的嵌套关系，形成了父子关系，兄弟关系</p>\n<h2 id=\"使用组件的三个步骤\"><a href=\"#使用组件的三个步骤\" class=\"headerlink\" title=\"使用组件的三个步骤\"></a>使用组件的三个步骤</h2><p>1、使用import语法导入需要的组件 </p>\n<p>2、使用components节点注册组件</p>\n<p>3、以标签形式使用刚才注册的组件<br><img src=\"/../image/vue2-08.png\"><br>要在哪个vue文件中用，就在哪个vue文件那边导入</p>\n<p>通过components注册的是私有子组件</p>\n<h2 id=\"注册全局组件\"><a href=\"#注册全局组件\" class=\"headerlink\" title=\"注册全局组件\"></a>注册全局组件</h2><p>在vue项目的main.js入口文件中，通过Vue.component()方法，可以注册全局组件<br><img src=\"/../image/vue2-09.png\"><br>组件名称尽量都是大写开头</p>\n<p>在自己的组件里面没法使用自己</p>\n<h2 id=\"组件里面的props\"><a href=\"#组件里面的props\" class=\"headerlink\" title=\"组件里面的props\"></a>组件里面的props</h2><p>如果这个事件函数里面只有一行代码，也可以这么写<br><img src=\"/../image/vue2-10.png\"><br>props的作用的提升代码的复用性，语法如下：<br><img src=\"/../image/vue2-11.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注意啊，如果你的数据是数字且要进行四则运算，一定要写成 :init=&quot;9&quot;这种v-bind的形式，如果传的是字符串，也要加 ：</span><br><span class=\"line\">props中的数据可以在template中&#123;&#123;init&#125;&#125;这样使用，但是他是只读的，所以不要拿它去做任何运算</span><br></pre></td></tr></table></figure>\n<h3 id=\"props的default默认值\"><a href=\"#props的default默认值\" class=\"headerlink\" title=\"props的default默认值\"></a>props的default默认值</h3><p>把props变成一个对象，default属性用于如果用户没有定义init属性就把值变成默认的default值<br><img src=\"/../image/vue2-12.png\"></p>\n<h3 id=\"props的type值类型\"><a href=\"#props的type值类型\" class=\"headerlink\" title=\"props的type值类型\"></a>props的type值类型</h3><p>用type属性定义属性的值类型，如果传递过来的值不符合要求就会报错</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props：&#123;</span><br><span class=\"line\">\tinit:&#123;</span><br><span class=\"line\">\t\tdefault:0,</span><br><span class=\"line\">\t\ttype:Number</span><br><span class=\"line\">\t\t//或者Object String</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"props的required必填项\"><a href=\"#props的required必填项\" class=\"headerlink\" title=\"props的required必填项\"></a>props的required必填项</h3><p>就是谁用这个组件，谁必须传值给我，不然就会报错</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props：&#123;</span><br><span class=\"line\">\tinit:&#123;</span><br><span class=\"line\">\t\tdefault:0,</span><br><span class=\"line\">\t\ttype:Number,</span><br><span class=\"line\">\t\t//或者Object String</span><br><span class=\"line\">\t\trequired:true</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"组件之间的样式冲突问题\"><a href=\"#组件之间的样式冲突问题\" class=\"headerlink\" title=\"组件之间的样式冲突问题\"></a>组件之间的样式冲突问题</h2><p>默认情况下，写在.vue组件中的样式会全局生效，因此很容易造成多个组件之间的样式冲突问题。</p>\n<p>导致组件之间样式冲突的根本原因是：</p>\n<p>1、单页面应用程序中，所有组件的dom结构，都是基于唯一的index.html页面进行呈现的</p>\n<p>2、每个组件中的样式，都会影响整个index.html页面中的dom元素</p>\n<p>解决方法：</p>\n<p>1、给统一组件的标签都加上一个相同的属性，然后写样式的时候写标签[属性]这样</p>\n<p>2、在style里面写一个scoped（用这个）<br><img src=\"/../image/vue2-13.png\"></p>\n<h2 id=\"deep-样式穿透\"><a href=\"#deep-样式穿透\" class=\"headerlink\" title=\"/deep/样式穿透\"></a>/deep/样式穿透</h2><p> 用于在父组件中直接改造子组件的样式，当使用第三方组件库的时候，如果有修改组件默认样式的需求，就需要用到这个</p>\n<p>在style中要改变的对应标签前面加/deep/空格 标签名</p>\n<h2 id=\"组件的生命周期\"><a href=\"#组件的生命周期\" class=\"headerlink\" title=\"组件的生命周期\"></a>组件的生命周期</h2><p>——除了3个常用的，其他的了解一下就行</p>\n<p>生命周期是指一个组件从创建——运行——销毁的整个阶段，强调的是一个时间段<br><img src=\"/../image/vue2-14.png\"><br>beforeCreate  组件的props/data/methods尚未被创建，都处于不可用状态</p>\n<p>created   组件的props/data/methods已创建好，都处于可用的状态，但是组件的模板结构尚未生成，不能创建dom（<strong>重要，在这里要发起ajax请求</strong>）</p>\n<p>beforeMount 将要把内存中编译好的html结构渲染要浏览器中，此时浏览器中还没有当前组件的dom结构</p>\n<p>mounted 已经把内存中的html结构成功的渲染到了浏览器中，此时浏览器中已然包含了当前组件的dom结构(<strong>最早操作dom元素</strong>)</p>\n<p>beforeUpdate 将要根据变化过后、最新的数据，重新渲染组件的模板结构</p>\n<p>updated 已经根据最新的数据，完成了组件dom结构的重新渲染（<strong>重</strong>）</p>\n<p>beforeDestroy 将要销毁此组件，此时尚未销毁，组件还处于正常工作的状态</p>\n<p>destroyed 组件已经被销毁，此组件在浏览器中对应的dom结构已经被完全移除</p>\n<h2 id=\"组件之间的数据共享\"><a href=\"#组件之间的数据共享\" class=\"headerlink\" title=\"组件之间的数据共享\"></a>组件之间的数据共享</h2><p>如果父组件中要使用子组件，那么对于table下的tr，select下的option。ul里的li，ol里的li这种，要用is<br><img src=\"/../image/vue2-15.png\"><br>其中MyTr就是你想在tr里面使用的组件名</p>\n<h3 id=\"父向子传值\"><a href=\"#父向子传值\" class=\"headerlink\" title=\"父向子传值\"></a>父向子传值</h3><p>用<strong>自定义属性</strong> Props</p>\n<p>父组件只负责提供数据，props写在子组件中</p>\n<p>注意：不要在子组件中修改props里面的数据</p>\n<h3 id=\"子向父传值\"><a href=\"#子向父传值\" class=\"headerlink\" title=\"子向父传值\"></a>子向父传值</h3><p>使用<strong>自定义事件</strong> $emit(‘事件名’,要传递的数据)，其中需要在父组件中先定义一个值用于传输子组件传递过来的值，然后还要再父组件中绑定这个自定义事件然后定义一个methods</p>\n<h3 id=\"兄弟组件之间的数据共享\"><a href=\"#兄弟组件之间的数据共享\" class=\"headerlink\" title=\"兄弟组件之间的数据共享\"></a>兄弟组件之间的数据共享</h3><p>在vue2中EventBus（<strong>面试问得多</strong>）</p>\n<p>首先在接收数据方定义一个属性，用于接收传递过来的数据<br><img src=\"/../image/vue2-16.png\"><br>使用步骤</p>\n<p>1、创建eventBus.js模块（自己建一个），并向外共享一个Vue的实例对象</p>\n<p>2、在数据发送方，import js文件，调用bus.$emit(‘事件名称’,要发送的数据)方法触发自定义事件</p>\n<p>3、在数据接收方，import js文件，调用bus.$on(‘事件名称’,事件处理函数)方法注册一个自定义事件</p>\n<h2 id=\"动态组件\"><a href=\"#动态组件\" class=\"headerlink\" title=\"动态组件\"></a>动态组件</h2><p>指动态切换组件的显示与隐藏</p>\n<p>vue提供了一个内置的<code>&lt;component&gt;</code>组件（可以认为是一个占位符），专门用来实现动态组件的渲染</p>\n<p>语法：<code>&lt;component is=&quot;组件名&quot;&gt;&lt;/component&gt;</code></p>\n<p>如果你不想写死的话就是在data（）里面定义一个变量，然后</p>\n<p><code>&lt;component :is=&quot;变量名&quot;&gt;&lt;/component&gt;</code></p>\n<p>当组件被隐藏时，其实是组件被销毁了，然后再次出现是重新创建</p>\n<h3 id=\"keep-alive\"><a href=\"#keep-alive\" class=\"headerlink\" title=\"keep-alive\"></a>keep-alive</h3><p>如果要做到离开这个组件的时候不要被销毁，用keep-alive保持状态，原理是当这个组件出现的时候被激活然后当这个组件隐藏的时候被缓存。<br><img src=\"/../image/vue2-17.png\"><br>把你要保存的那个组件放在keep-alive里面。</p>\n<h3 id=\"keep-alive对应的生命周期函数\"><a href=\"#keep-alive对应的生命周期函数\" class=\"headerlink\" title=\"keep-alive对应的生命周期函数\"></a>keep-alive对应的生命周期函数</h3><p>当组件被缓存时，会自动触发组件的deactivated生命周期函数</p>\n<p>当组件被激活时，会自动触发组件的activated生命周期函数</p>\n<p>当组件第一次被创建的时候，顺序是先执行created，然后再执行activated，后面是只执行activated</p>\n<p>注：上面这两个，要用了keep-active后才能使用</p>\n<h3 id=\"keep-alive的include属性\"><a href=\"#keep-alive的include属性\" class=\"headerlink\" title=\"keep-alive的include属性\"></a>keep-alive的include属性</h3><p>include属性用来指定：只有名称匹配的组件会被缓存。多个组件名之间使用英文的逗号分隔<br><img src=\"/../image/vue2-18.png\"><br>exclude排除项，写在这边的组件不会被缓存。注意：include和exclude不能同时使用</p>\n<h2 id=\"组件注册名称和声明name名称的区别\"><a href=\"#组件注册名称和声明name名称的区别\" class=\"headerlink\" title=\"组件注册名称和声明name名称的区别\"></a>组件注册名称和声明name名称的区别</h2><p>如果在声明组件（比如Left.vue里面）的时候，没有为组件指定name名称，则组件的名称默认就是注册时候的名称（比如App.vue里面component写的那个名）</p>\n<p>当你在组件声明的时候设了name名称之后，组件就是这个名<br><img src=\"/../image/vue2-19.png\"><br>我们设置注册名称只是为了要让我们可以以标签的方式去使用这个组件。</p>\n<p>组件声明时设置的name名称主要用于keep-alive标签实现组件缓存功能，以及在调试工具中看到组件的name名称</p>\n<h1 id=\"ref引用\"><a href=\"#ref引用\" class=\"headerlink\" title=\"ref引用\"></a>ref引用</h1><p>获取dom元素或组件的引用</p>\n<p>每个vue的组件实例上，默认有一个$refs对象，里面存储着对应的dom元素或组件的引用。默认情况下，组件的$refs指向一个空对象</p>\n<p>首先你要获取dom，就在这边给他加一个ref属性<br><img src=\"/../image/vue2-20.png\"><br>操作dom<br><img src=\"/../image/vue2-21.png\"><br>他也可以获取组件的引用：</p>\n<p>先给这个组件加一个ref属性<br><img src=\"/../image/vue2-22.png\"><br>然后操作这个组件的属性和方法跟操作dom一样</p>\n<p>this.$refs.名字.你想用啥</p>\n<h1 id=\"this-nextTick-回调函数\"><a href=\"#this-nextTick-回调函数\" class=\"headerlink\" title=\"this.$nextTick(回调函数)\"></a>this.$nextTick(回调函数)</h1><p>等组件的dom重新渲染好之后再调用回调函数，从而保证回调函数可以操作到最新的数据</p>\n<h1 id=\"插槽\"><a href=\"#插槽\" class=\"headerlink\" title=\"插槽\"></a>插槽</h1><p>插槽是vue为组件的封装者提供的能力，允许封装者在封装组件时，把不确定的，希望由用户指定的部分定义为插槽</p>\n<p>用<code>&lt;slot&gt;&lt;/slot&gt;</code>标签作为占位符，(比如写在left.vue里面)到时候用这个组件的时候写进以组件名为标签名的标签的时候就会把标签里面的内容（写在app.vue里面）渲染到这个占位符这里。</p>\n<p>vue官方规定，每一个slot插槽，都要有一个name名称，如果省略，默认<code>name=&quot;default&quot;</code>。默认情况下，在使用组件（在app.vue里面）的时候，提供的内容都会被填充到名字为default的插槽之中。</p>\n<h2 id=\"v-slot指令\"><a href=\"#v-slot指令\" class=\"headerlink\" title=\"v-slot指令\"></a>v-slot指令</h2><p>——简写为 #</p>\n<p>如果我们要指名道姓告诉vue我要把这个内容放在哪个插槽中，用v-slot：插槽名字，语法格式如下：<br><img src=\"/../image/vue2-23.png\"><br>v-slot不能直接用在元素身上，必须用在template标签上</p>\n<p>template这个标签是一个虚拟的标签，只起到包裹性质的作用，但是，不会被渲染为任何实质性的html标签</p>\n<h2 id=\"后备内容\"><a href=\"#后备内容\" class=\"headerlink\" title=\"后备内容\"></a>后备内容</h2><p>如果我们用户没有指定插槽位置要放什么，我们要指定一个默认的内容的话，直接写在slot标签中间就行</p>\n<h2 id=\"具名插槽\"><a href=\"#具名插槽\" class=\"headerlink\" title=\"具名插槽\"></a>具名插槽</h2><p>就是给slot插槽加一个name，name为default的叫做默认插槽</p>\n<h2 id=\"作用域插槽\"><a href=\"#作用域插槽\" class=\"headerlink\" title=\"作用域插槽\"></a>作用域插槽</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">指在封装组件时，为预留的&lt;slot&gt;提供属性对应的值。</span><br><span class=\"line\"></span><br><span class=\"line\">通过插槽的定义，我们可以拿到传过来的值（相当于子传父）</span><br><span class=\"line\"></span><br><span class=\"line\">标准写法是接收参数的都叫做scope，然后如果我们要拿到传递的那个参数，就是&#123;&#123;score.msg&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/../image/vue2-24.png\"><br><img src=\"/../image/vue2-25.png\"><br>也可以用解构赋值<br><img src=\"/../image/vue2-26.png\"></p>\n<h1 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a>自定义指令</h1><p>分为私有自定义指令和全局自定义指令</p>\n<h2 id=\"私有自定义指令\"><a href=\"#私有自定义指令\" class=\"headerlink\" title=\"私有自定义指令\"></a>私有自定义指令</h2><p>在组件的script那边定义，跟定义data啊，el啊这种一样，在directives节点下声明。里面的el是固定的。<br><img src=\"/../image/vue2-27.png\"><br>这样定义之后这个指令的名称就叫做v-color<br><img src=\"/../image/vue2-28.png\"><br>这样用完之后，这个h1标签里面的文字就会变成红色</p>\n<p>也可以是<code>&lt;h1 v-color=&quot;hhh&quot;&gt;哈哈哈&lt;/h1&gt;</code></p>\n<p>这样bind里面有两个参数bind(el,binding)</p>\n<p><strong>第一个参数是当前指令所绑定的dom对象，就是h1。如果要获取到用户通过指令传递过来的hhh的值，就用binding.value就可以拿到</strong><br><img src=\"/../image/vue2-29.png\"><br>这种是写死的，就是我要传递的就是red，而上面那种写法是传一个参数，他回去data里面找有没有叫hhh的属性</p>\n<p>bind元素的缺点：这个只在指令第一个绑定到元素上面的时候才能触发</p>\n<h3 id=\"update函数\"><a href=\"#update函数\" class=\"headerlink\" title=\"update函数\"></a>update函数</h3><p>也是有两个参数，el和binding，含义一样的</p>\n<p>update函数会在每次dom更新时被调用</p>\n<p>这个也是写在directives，跟bind函数平级</p>\n<p>bind和update都必须要有</p>\n<h3 id=\"函数简写\"><a href=\"#函数简写\" class=\"headerlink\" title=\"函数简写\"></a>函数简写</h3><p>如果bind和update函数中的逻辑完全相同。则可以把指令写成函数形式</p>\n<h2 id=\"全局自定义指令\"><a href=\"#全局自定义指令\" class=\"headerlink\" title=\"全局自定义指令\"></a>全局自定义指令</h2><p>写在main.js文件中</p>\n<p>简写版本：</p>\n<p><code>Vue.directive(&#39;指令名&#39;,function(el,binding)&#123; 业务逻辑&#125;)</code></p>\n<p>全写版本：<br><img src=\"/../image/vue2-30.png\"><br>代码里面的提示<br><img src=\"/../image/vue2-31.png\"><br>这个true的情况下，你可以看见那个温馨提示，提示你项目要上线的时候需要改模式，如果你改为false，那么你看不见那个提示。默认为true，就是你不写这行代码也是true</p>\n<h1 id=\"eslint\"><a href=\"#eslint\" class=\"headerlink\" title=\"eslint\"></a>eslint</h1><p>用于约束代码规范</p>\n<p>官方文档<a href=\"https://eslint.bootcss.com/\">https://eslint.bootcss.com/</a></p>\n<h1 id=\"axios\"><a href=\"#axios\" class=\"headerlink\" title=\"axios\"></a>axios</h1><h2 id=\"安装axios的命令\"><a href=\"#安装axios的命令\" class=\"headerlink\" title=\"安装axios的命令\"></a>安装axios的命令</h2><p>npm i axios -S</p>\n<h2 id=\"在vue里面使用axios发请求\"><a href=\"#在vue里面使用axios发请求\" class=\"headerlink\" title=\"在vue里面使用axios发请求\"></a>在vue里面使用axios发请求</h2><p>首先要<code>import axios from &#39;axios&#39;</code></p>\n<p>然后在methods里面发请求，语法跟在js里面一样</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default&#123;</span><br><span class=\"line\">\tmethods:&#123;</span><br><span class=\"line\">\t\tasync getInfo()&#123;</span><br><span class=\"line\">\t\t\tconst(data:res)=await axios.get(&#x27;&#x27;)</span><br><span class=\"line\">\t\t\t\tconsole.log(res)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"把axios挂载到vue的原型上并配置请求根路径\"><a href=\"#把axios挂载到vue的原型上并配置请求根路径\" class=\"headerlink\" title=\"把axios挂载到vue的原型上并配置请求根路径\"></a>把axios挂载到vue的原型上并配置请求根路径</h2><p>在main.js里面写<code>import axios from &#39;axios&#39;</code></p>\n<p><code>axios.defaults.baseURL=&#39;请求根路径&#39;</code></p>\n<p><code>Vue.prototype.$http=axios</code></p>\n<p>写完上面这个之后就不需要在每个组件里面都写import了，代码改为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default&#123;</span><br><span class=\"line\">\tmethods:&#123;</span><br><span class=\"line\">\t\tasync getInfo()&#123;</span><br><span class=\"line\">\t\t\t//只改了这一行的this</span><br><span class=\"line\">\t\t\tconst(data:res)=await this.$http.get(&#x27;&#x27;)</span><br><span class=\"line\">\t\t\t\tconsole.log(res)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>缺点：没法实现接口的复用</p>\n<h1 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h1><h2 id=\"前端路由的工作方式\"><a href=\"#前端路由的工作方式\" class=\"headerlink\" title=\"前端路由的工作方式\"></a>前端路由的工作方式</h2><p>1、用户点击了页面上的路由链接</p>\n<p>2、导致了URL地址栏中的hash值发生了变化</p>\n<p>3、前端路由监听到了Hash地址的变化</p>\n<p>4、前端路由把当前Hash地址对应的组件渲染到浏览器中</p>\n<h2 id=\"vue-router\"><a href=\"#vue-router\" class=\"headerlink\" title=\"vue-router\"></a>vue-router</h2><p>路由解决方案，只能在vue中使用</p>\n<p>官方文档vue2版</p>\n<p><a href=\"https://v3.router.vuejs.org/zh/\">https://v3.router.vuejs.org/zh/</a></p>\n<p>安装</p>\n<p>npm i <a href=\"mailto:&#x76;&#117;&#101;&#45;&#x72;&#111;&#x75;&#x74;&#101;&#x72;&#x40;&#x33;&#46;&#x35;&#x2e;&#50;\">&#x76;&#117;&#101;&#45;&#x72;&#111;&#x75;&#x74;&#101;&#x72;&#x40;&#x33;&#46;&#x35;&#x2e;&#50;</a> -S</p>\n<p>在main.js里面写</p>\n<p>import router from ‘@/router/index.js’</p>\n<p>然后在原有的new Vue({</p>\n<p>里面加上这行 router</p>\n<p>})</p>\n<p>在main.js里面写</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import VueRouter from &#x27;vue-router&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(VueRouter)</span><br><span class=\"line\"></span><br><span class=\"line\">const router = new VueRouter()</span><br><span class=\"line\"></span><br><span class=\"line\">export default router</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在进行模块化导入的时候，如果给定的是文件夹，默认导入这个文件夹下，名字叫做index.js的文件</p>\n<h2 id=\"router-view\"><a href=\"#router-view\" class=\"headerlink\" title=\"router-view\"></a>router-view</h2><p><router-view></router-view></p>\n<p>作用：占位符，写在app.vue里面</p>\n<p>routes是一个数组，作用：定义哈希地址与组件之间的关系</p>\n<p>path里面#就不用写了，写#后面的<br><img src=\"/../image/vue2-32.png\"><br>写在index.js里面，记得那个component后面的那个内容要先import</p>\n<h2 id=\"router-link代替a标签\"><a href=\"#router-link代替a标签\" class=\"headerlink\" title=\"router-link代替a标签\"></a>router-link代替a标签</h2><p><code>&lt;a href=&quot;#/home&quot;&gt;首页&lt;/a&gt;</code></p>\n<p><code>&lt;router-link to=&quot;/home&quot;&gt;首页&lt;/router-link&gt;</code></p>\n<p>注意：写这个to后面那个是地址，好处是不用写#</p>\n<h2 id=\"路由重定向\"><a href=\"#路由重定向\" class=\"headerlink\" title=\"路由重定向\"></a>路由重定向</h2><p>指用户在访问地址A的时候，强制用户跳转到地址C，从而展示特定的组件页面，通过路由规则的redirect属性，指定一个新的路由地址，可以很方便地设置路由的重定向</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">routes:[</span><br><span class=\"line\">\t&#123;path:&#x27;/&#x27;,redirect:&quot;/home&quot;&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>常用于重定向/这个，这样用户一上来就不会看见一个空页面</p>\n<h2 id=\"嵌套路由\"><a href=\"#嵌套路由\" class=\"headerlink\" title=\"嵌套路由\"></a>嵌套路由</h2><p>通过路由实现组件的嵌套展示</p>\n<p><code>&lt;img src=&quot;C:\\Users\\asus\\AppData\\Roaming\\Typora\\typora-user-images\\1658393102995.png&quot; alt=&quot;1658393102995&quot; style=&quot;zoom:60%;&quot; /&gt;</code></p>\n<p>如果要这样的话，那么那个tab1，tab2两个router-link要写在about.vue文件中，并且写一个占位符router-view</p>\n<h2 id=\"通过children属性声明子路由规则\"><a href=\"#通过children属性声明子路由规则\" class=\"headerlink\" title=\"通过children属性声明子路由规则\"></a>通过children属性声明子路由规则</h2><p>写在index.js里面</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import tab1 from xxx</span><br><span class=\"line\">import tab2 from xxx</span><br><span class=\"line\">const router =new VueRouter(&#123;</span><br><span class=\"line\">\troutes:[&#123;</span><br><span class=\"line\">\t\tpath:&quot;/about&quot;</span><br><span class=\"line\">\t\tcomponent:About,</span><br><span class=\"line\">\t\tchildren:[</span><br><span class=\"line\">\t\t\t&#123;path:&#x27;tab1&#x27;,component:tab1&#125;,</span><br><span class=\"line\">\t\t\t&#123;path:&#x27;tab2&#x27;,component:tab2&#125;</span><br><span class=\"line\">\t//斜线不用写</span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t&#125;]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"默认子路由\"><a href=\"#默认子路由\" class=\"headerlink\" title=\"默认子路由\"></a>默认子路由</h2><p>比如我想点击about的时候自动跳转到about/tab1</p>\n<p>法一：用redirect设置默认路由地址</p>\n<p>那我就去找about的路由在哪里，然后在path后面加一个redirect属性，值等于about/tab1</p>\n<p>法二：默认子路由</p>\n<p>所谓默认子路由是指如果children数组中，某个路由规则的path值为空字符串，则这条路由规则，叫做默认子路由。</p>\n<p>只要有空字符串就表示，只要我一点击about，他就会自动跳转到响应组件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import tab1 from xxx</span><br><span class=\"line\">import tab2 from xxx</span><br><span class=\"line\">const router =new VueRouter(&#123;</span><br><span class=\"line\">\troutes:[&#123;</span><br><span class=\"line\">\t\tpath:&quot;/about&quot;</span><br><span class=\"line\">\t\tcomponent:About,</span><br><span class=\"line\">\t\tchildren:[</span><br><span class=\"line\">\t\t\t&#123;path:&#x27;&#x27;,component:tab1&#125;,</span><br><span class=\"line\">\t\t\t&#123;path:&#x27;tab2&#x27;,component:tab2&#125;</span><br><span class=\"line\">\t//斜线不用写</span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t&#125;]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>如果你写默认子路由的话，那么你之前写的那个router-link也要改<br><img src=\"/../image/vue2-33.png\"></p>\n<h2 id=\"动态路由匹配\"><a href=\"#动态路由匹配\" class=\"headerlink\" title=\"动态路由匹配\"></a>动态路由匹配</h2><p>动态路由是指，把哈希地址中可变的部分定义为参数项，从而提高路由规则的复用性。</p>\n<p>在vue-router中使用 ：来定义路由的参数项</p>\n<p>比如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;path:&#x27;/movie/:id&#x27;,component:Movie&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在Movie组件中拿到动态参数id的值</p>\n<p>法一：</p>\n<p><code>this.$route.params.id</code></p>\n<p>this可以省略，this.$route是路由的参数对象</p>\n<p>法二：</p>\n<p>用props传参</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;path:&#x27;/movie/:id&#x27;,component:Movie,props:true&#125;</span><br><span class=\"line\">然后在movie组件的export default里面写入props:[&#x27;id&#x27;]</span><br><span class=\"line\"></span><br><span class=\"line\">所以我要使用到id的时候直接就&#123;&#123;id&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-link to=&quot;/movie/1?name=zs age=20&quot;</span><br></pre></td></tr></table></figure>\n\n<p>在哈希地址中 ？后面的参数项叫做查询参数。获取到？后面的参数值用<code>this.$route.query</code></p>\n<p>this.$route里面fullPath是完整的路径，包含？后面传递的参数，path就只是路径而已，不带参数</p>\n<h1 id=\"导航\"><a href=\"#导航\" class=\"headerlink\" title=\"导航\"></a>导航</h1><h2 id=\"声明式导航\"><a href=\"#声明式导航\" class=\"headerlink\" title=\"声明式导航\"></a>声明式导航</h2><p>在浏览器中，点击链接实现导航的方式，叫做声明式导航</p>\n<p>普通网页中点击<code>&lt;a&gt;</code>链接，vue项目中点击<code>&lt;router-link&gt;</code>都属于声明式导航</p>\n<h2 id=\"编程式导航\"><a href=\"#编程式导航\" class=\"headerlink\" title=\"编程式导航\"></a>编程式导航</h2><p>在浏览器中，调用API方法实现导航的方式，叫做编程式导航。例如：普通网页中调用location.href跳转到新页面的方式，属于编程式导航</p>\n<p>在vue项目中，vue-router提供了许多编程式导航API，最常用的为：</p>\n<p><code>this.$router.push(&#39;哈希地址&#39;)</code></p>\n<p>跳转到指定的哈希地址，并增加一条历史记录</p>\n<p><code>this.$router.replace(&#39;哈希地址&#39;)</code></p>\n<p>跳转到指定的哈希地址，并替换掉当前的历史记录</p>\n<p><code>this.$router.go(数值n)</code></p>\n<p>在浏览历史中前进和后退（负数表示后退，整数表示前进）</p>\n<p>如果次数达到上限则原地不动</p>\n<p>在实际开发中，由于我们一般只会前进或后退1个页面，所以$router.go有一个快捷写法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$router.back() 后退</span><br><span class=\"line\"></span><br><span class=\"line\">$router.forward() 前进</span><br></pre></td></tr></table></figure>\n<p>注意：后面这两个不用写this</p>\n<h2 id=\"导航守卫\"><a href=\"#导航守卫\" class=\"headerlink\" title=\"导航守卫\"></a>导航守卫</h2><p>可以控制路由的访问权限</p>\n<h3 id=\"全局前置守卫\"><a href=\"#全局前置守卫\" class=\"headerlink\" title=\"全局前置守卫\"></a>全局前置守卫</h3><p>每次发生路由的导航跳转时，都会触发全局前置守卫，就是那个fn</p>\n<p>写在index.js里面</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const router = new VueRouter(&#123;.....&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.beforeEach(function(to,from,next)&#123;......&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"守卫方法的3个形参\"><a href=\"#守卫方法的3个形参\" class=\"headerlink\" title=\"守卫方法的3个形参\"></a>守卫方法的3个形参</h3><p>to 将要访问的路由的信息对象</p>\n<p>from 将要离开的路由的信息对象</p>\n<p>next 是一个函数，调用next（）表示放行，允许这次路由导航，必写</p>\n<h3 id=\"next函数的3种调用方式\"><a href=\"#next函数的3种调用方式\" class=\"headerlink\" title=\"next函数的3种调用方式\"></a>next函数的3种调用方式</h3><p>当前用户拥有后台主页的访问权限，直接放行，next（）</p>\n<p>当前用户没有后台主页的访问权限，强制其跳转到登录页面next（’/login’)</p>\n<p>当前用户没有后台主页的访问权限，不允许跳转到后台主页，强制用户停留在当前页面，哪也不去</p>\n<p>next(false)</p>\n<h3 id=\"控制后台主页的访问权限\"><a href=\"#控制后台主页的访问权限\" class=\"headerlink\" title=\"控制后台主页的访问权限\"></a>控制后台主页的访问权限</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.beforeEach(function(to,from,next)&#123;</span><br><span class=\"line\">\t//假设main页面是后台</span><br><span class=\"line\">\tif(to.path === &#x27;/main&#x27;)&#123;</span><br><span class=\"line\">\t\tconst token = localStorage.getItem(&#x27;token&#x27;);</span><br><span class=\"line\">\t\tif(token)&#123;</span><br><span class=\"line\">\t\t\tnext();//访问的是后台，并且有登录</span><br><span class=\"line\">\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\tnext(&#x27;/login&#x27;);//访问后台，但是没登录</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;else&#123;</span><br><span class=\"line\">\t\tnext();//不是要访问后台，不需要登录，直接放行</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;app&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        const vm = new Vue(&#123;</span><br><span class=\"line\">            el:&quot;#app&quot;,</span><br><span class=\"line\">            data:&#123;</span><br><span class=\"line\">                msg:&quot;hello&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h1><h2 id=\"内容渲染指令\"><a href=\"#内容渲染指令\" class=\"headerlink\" title=\"内容渲染指令\"></a>内容渲染指令</h2><p>v-text</p>\n<p><code>&#123;&#123;&#125;&#125;</code></p>\n<p><code>v-html</code></p>\n<p>作用都是把文本内容渲染到界面中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">区别：前两个不识别html语言，最后一个识别，v-text会覆盖掉这个标签原本有的内容，&#123;&#123;&#125;&#125;只能用在元素的内容节点中，不能用在元素的属性节点中</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">        &lt;p v-text=&quot;msg&quot;&gt;&lt;/p&gt;</span><br><span class=\"line\">        &lt;p &gt;&#123;&#123;msg&#125;&#125; &lt;/p&gt;</span><br><span class=\"line\">        &lt;p v-html=&quot;msg&quot;&gt;&lt;/p&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        const vm = new Vue(&#123;</span><br><span class=\"line\">            el:&quot;#app&quot;,</span><br><span class=\"line\">            data:&#123;</span><br><span class=\"line\">                msg:&quot;&lt;h1&gt;hello&lt;/h1&gt;&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：<br><img src=\"/../image/vue2-01.png\"></p>\n<h2 id=\"属性渲染指令\"><a href=\"#属性渲染指令\" class=\"headerlink\" title=\"属性渲染指令\"></a>属性渲染指令</h2><p>v-bind 简写为：</p>\n<p>单向绑定：即数值变化可以同步到页面上，但是页面上的变化没法改变数值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">        &lt;input type=&quot;text&quot; :placeholder=&quot;tips&quot;&gt;</span><br><span class=\"line\">    /*注意啊这里不需要&#123;&#123;tips&#125;&#125;*/</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        const vm = new Vue(&#123;</span><br><span class=\"line\">            el:&quot;#app&quot;,</span><br><span class=\"line\">            data:&#123;</span><br><span class=\"line\">                tips:&quot;请输入用户名&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果：<br><img src=\"/../image/vue2-02.png\"></p>\n<p>在vue提供的渲染模板语法中，除了支持绑定简单的数值外，还支持js表达式的运算，比如<br><img src=\"/../image/vue2-03.png\"><br>字符串拼接得这样写，其中box是字符串，index是data里面定义的<br><img src=\"/../image/vue2-04.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注意：在&#123;&#123;&#125;&#125;里面只能写简单的js表达式，不能写if等复杂的js语句</span><br></pre></td></tr></table></figure>\n<h2 id=\"事件绑定指令\"><a href=\"#事件绑定指令\" class=\"headerlink\" title=\"事件绑定指令\"></a>事件绑定指令</h2><p>v-on简写为@</p>\n<p>点击事件就是@click，键盘事件就是@keyup,输入框的输入事件@input</p>\n<p>无参数版</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">       &lt;p&gt;值为：&#123;&#123;num&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">       &lt;button @click=&quot;add&quot;&gt;加一&lt;/button&gt;</span><br><span class=\"line\">       &lt;button @click=&quot;cut&quot;&gt;减一&lt;/button&gt;</span><br><span class=\"line\">   &lt;/div&gt;</span><br><span class=\"line\">   &lt;script&gt;</span><br><span class=\"line\">       const vm = new Vue(&#123;</span><br><span class=\"line\">           el:&quot;#app&quot;,</span><br><span class=\"line\">           data:&#123;</span><br><span class=\"line\">               num:0,</span><br><span class=\"line\"></span><br><span class=\"line\">           &#125;,</span><br><span class=\"line\">           methods:&#123;</span><br><span class=\"line\">               add()&#123;</span><br><span class=\"line\">                   // vm.num++;</span><br><span class=\"line\">                   this.num++;//这里this指向vm</span><br><span class=\"line\">               &#125;,</span><br><span class=\"line\">               cut()&#123;</span><br><span class=\"line\">                   // vm.num--;</span><br><span class=\"line\">                   this.num--;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">   &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>带参数版</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">        &lt;p&gt;值为：&#123;&#123;num&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">        &lt;button @click=&quot;add(2,$event)&quot;&gt;加一&lt;/button&gt;</span><br><span class=\"line\">    //这个event不能换</span><br><span class=\"line\">        &lt;button @click=&quot;cut&quot;&gt;减一&lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        const vm = new Vue(&#123;</span><br><span class=\"line\">            el:&quot;#app&quot;,</span><br><span class=\"line\">            data:&#123;</span><br><span class=\"line\">                num:0,</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            methods:&#123;</span><br><span class=\"line\">                add(n,e)&#123;</span><br><span class=\"line\">                    // vm.num++;</span><br><span class=\"line\">                    this.num+=n;</span><br><span class=\"line\">                    e.target.innerHTML=&quot;加&quot;+n</span><br><span class=\"line\">                    //e。target代表那个button按钮</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                cut()&#123;</span><br><span class=\"line\">                    // vm.num--;</span><br><span class=\"line\">                    this.num--;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h3><p>阻止默认行为</p>\n<p><code>e.preventDefault();</code></p>\n<p>或者</p>\n<p><code>&lt;a href=&quot;http://www.baidu.com&quot; @click.prevent=&quot;show&quot;&gt;跳转到百度&lt;/a&gt;</code><br><img src=\"/../image/vue2-05.png\"><br>掌握前两个就行</p>\n<p>冒泡就是比如有两个盒子，都绑定了点击事件，那么你点击里面的盒子，他就会先执行里面盒子的点击事件再冒泡执行外面盒子的点击事件</p>\n<p>阻止事件冒泡：<code>e.stopPropagation()</code>或者<code>&lt;a href=&quot;http://www.baidu.com&quot; @click.stop=&quot;show&quot;&gt;跳转到百度&lt;/a&gt;</code></p>\n<h2 id=\"双向绑定\"><a href=\"#双向绑定\" class=\"headerlink\" title=\"双向绑定\"></a>双向绑定</h2><p>v-model</p>\n<p>就是说属性值改变，页面里对应的值也改变，页面的值改变也可以同步改变属性值</p>\n<p>v-model只能用于表单那边，比如</p>\n<p>input输入框，textarea，select</p>\n<p>v-model的修饰符<br><img src=\"/../image/vue2-06.png\"><br>最后一个就是等她失去焦点之后同步他最后的结果，中间的变化过程都不管</p>\n<h2 id=\"条件渲染\"><a href=\"#条件渲染\" class=\"headerlink\" title=\"条件渲染\"></a>条件渲染</h2><p>v-if</p>\n<p>v-show</p>\n<p>两个的用处都是用于控制dom元素的显示和隐藏</p>\n<p>区别：v-if是如果值为false，那么他是动态删除该标签,true就动态创建回来，而v-show是如果值为false，把标签的属性变成display:none，true的话去掉这个属性</p>\n<p>性能方面：如果要频繁的切换元素的显示状态，v-show的性能好；如果刚进入页面的时候，某些元素默认不需要被显示，后期这个元素也很可能不用显示出来，此时v-if性能好</p>\n<h3 id=\"v-if配套的指令\"><a href=\"#v-if配套的指令\" class=\"headerlink\" title=\"v-if配套的指令\"></a>v-if配套的指令</h3><p><img src=\"/../image/vue2-07.png\"><br>v-else-if要配合v-if使用，不然不会被识别</p>\n<h2 id=\"列表渲染\"><a href=\"#列表渲染\" class=\"headerlink\" title=\"列表渲染\"></a>列表渲染</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v-for</span><br><span class=\"line\"></span><br><span class=\"line\">v-for=&quot;(item,index) in items&quot;</span><br></pre></td></tr></table></figure>\n<p>第一个是数据，第二个是索引，如果不需要就不写index了</p>\n<p>官方推荐只要用到v-for指令，要绑定一个 :key=值，而且尽量把id作为key的值，不要用index，key的值有要求，必须是字符串或者数字，key的值不允许重复，不然会报错</p>\n<h1 id=\"过滤器（只能用于vue2）\"><a href=\"#过滤器（只能用于vue2）\" class=\"headerlink\" title=\"过滤器（只能用于vue2）\"></a>过滤器（只能用于vue2）</h1><p>作用：用于文本的格式化，可用在两个地方：插值表达式和v-bind属性绑定</p>\n<p>过滤器应该被添加到js表达式的尾部，由管道符  |  进行调用</p>\n<p>本质：一个函数，调用过滤器之后我们看见的是过滤器的返回值</p>\n<p>过滤器函数必须定义到filters里面，一定要有返回值</p>\n<h2 id=\"私有过滤器和全局过滤器\"><a href=\"#私有过滤器和全局过滤器\" class=\"headerlink\" title=\"私有过滤器和全局过滤器\"></a>私有过滤器和全局过滤器</h2><p>定义在vm里面的都属于私有过滤器</p>\n<p>全局过滤器的定义方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.filter(&#x27;xxx&#x27;,function)</span><br></pre></td></tr></table></figure>\n<p>第一个参数是全局过滤器的名字，第二个参数是处理函数</p>\n<p>注：如果私有过滤器和全局过滤器名字一样，按照就近原则调用私有过滤器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果有多个过滤器，比如&#123;&#123;name | f1 | f2| f3&#125;&#125;这种，就是先把name的值交给f1，然后再把f1返回的值交给f2以此类推</span><br><span class=\"line\"></span><br><span class=\"line\">过滤器还可以传递参数，在filter里面第一个参数的位置永远是|前面那个，所以参数要在第二个往后接收</span><br></pre></td></tr></table></figure>\n<h1 id=\"侦听器\"><a href=\"#侦听器\" class=\"headerlink\" title=\"侦听器\"></a>侦听器</h1><h2 id=\"watch侦听器\"><a href=\"#watch侦听器\" class=\"headerlink\" title=\"watch侦听器\"></a>watch侦听器</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">监视数据变化然后做相应处理的，本质上是一个函数</span><br><span class=\"line\"></span><br><span class=\"line\">侦听器要定义到watch：&#123;&#125;里面，要监听谁就把谁作为函数</span><br><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">        &lt;input type=&quot;text&quot; v-model=&quot;username&quot;&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        const vm = new Vue(&#123;</span><br><span class=\"line\">            el:&quot;#app&quot;,</span><br><span class=\"line\">            data:&#123;</span><br><span class=\"line\">                username:&#x27;&#x27;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            watch:&#123;</span><br><span class=\"line\">                username(newValue,oldValue)&#123;</span><br><span class=\"line\">                    //操作</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"侦听器的格式\"><a href=\"#侦听器的格式\" class=\"headerlink\" title=\"侦听器的格式\"></a>侦听器的格式</h2><p>1、方法格式的侦听器</p>\n<p>缺点：无法再刚进入页面的时候自动触发，</p>\n<p>如果侦听的是一个对象，如果对象中属性发生了变化，不会触发侦听器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username（newValue,oldValue）</span><br></pre></td></tr></table></figure>\n<p>2、对象格式的侦听器</p>\n<p>好处：可以通过immediate选项，让侦听器自动触发，</p>\n<p>可以通过deep选项，让侦听器深度监听对象中每个属性的变化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username：&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">handler(newValue,oldValue)&#123;&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">immediate:true</span><br><span class=\"line\"></span><br><span class=\"line\">//true表示刚进入页面的时候自动触发，false表示刚进入页面的时候不触发</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"深度侦听\"><a href=\"#深度侦听\" class=\"headerlink\" title=\"深度侦听\"></a>深度侦听</h2><p>用deep：true来进行深度监听，记得双向绑定的数据要改成对象.属性值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;app&quot;&gt;</span><br><span class=\"line\">        &lt;input type=&quot;text&quot; v-model=&quot;info.username&quot;&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">        const vm = new Vue(&#123;</span><br><span class=\"line\">            el:&quot;#app&quot;,</span><br><span class=\"line\">            data:&#123;</span><br><span class=\"line\">                info:&#123;</span><br><span class=\"line\">                    username:&#x27;admin&#x27;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            watch:&#123;</span><br><span class=\"line\">                //这样写没法侦听到username的变化</span><br><span class=\"line\">                // info(newValue)&#123;</span><br><span class=\"line\">                //     console.log(newVal);</span><br><span class=\"line\">                // &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            // 深度侦听的做法</span><br><span class=\"line\">              info:&#123;</span><br><span class=\"line\">                handler(newValue)&#123;</span><br><span class=\"line\">                    if(newValue === &#x27;&#x27;)return </span><br><span class=\"line\">                   var url=&#x27;https://www.escook.cn/api/finduser/&#x27; + newValue;</span><br><span class=\"line\">                   axios.get(url).then(function(res)&#123;</span><br><span class=\"line\">                       console.log(res);</span><br><span class=\"line\">                   &#125;)</span><br><span class=\"line\">                </span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                deep:true</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">               </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h1><p>指通过一系列运算后，最终得到一个属性值</p>\n<p>写在<code>computed：&#123;&#125;</code>那边</p>\n<p>计算属性在定义的时候要定义成一个函数，在使用他的时候，把他当成一个属性使用就行</p>\n<p>好处：实现了代码复用，只要计算属性中依赖的数据源变化了，计算属性就会重新求值</p>\n<p>代码详见31.html</p>\n<h1 id=\"创建vue项目\"><a href=\"#创建vue项目\" class=\"headerlink\" title=\"创建vue项目\"></a>创建vue项目</h1><p>指令</p>\n<p>在终端下运行如下的命令，创建指定名称的项目：</p>\n<p><code>vue create 项目名称</code></p>\n<p>运行，一定要先切换到项目文件里面，然后<code>npm run dev</code></p>\n<h1 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h1><p>Vue实例中的 <code>.$mount()</code>方法作用和el属性完全一样</p>\n<h2 id=\"组件的三个组成部分\"><a href=\"#组件的三个组成部分\" class=\"headerlink\" title=\"组件的三个组成部分\"></a>组件的三个组成部分</h2><p>每个.vue组件都由3部分构成，分别是：template  模板  script js代码 style 样式</p>\n<p>其中sytle部分就跟css一样，script部分要先默认写一个<code>export default&#123;&#125;</code>然后js代码写在里面</p>\n<p>在组件中，this表示当前组件的实例对象</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">\t&lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default&#123;</span><br><span class=\"line\">\tdata()&#123;</span><br><span class=\"line\">        return&#123;</span><br><span class=\"line\">            username:&#x27;hahha&#x27;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>注意：.vue组件中的data不能像之前那样，不能指向对象，组件中的data必须是一个函数，然后return一个数据对象。其他的什么侦听器，计算属性，事件等写法跟之前一样</p>\n<p>组件只能包含唯一的一个根节点，意思是不能在一个template中出现两个平级的div，解决方案，把这两个平级的div用一个大的div包裹起来就行</p>\n<p>在style中。如果要启用less来写样式的话，要写<code>&lt;style lang=&quot;less&quot;&gt;</code></p>\n<h2 id=\"组件之间的父子关系\"><a href=\"#组件之间的父子关系\" class=\"headerlink\" title=\"组件之间的父子关系\"></a>组件之间的父子关系</h2><p>组件在被封装好之后，彼此之间是相互独立的，不存在父子关系</p>\n<p>在使用组件的时候，根据彼此的嵌套关系，形成了父子关系，兄弟关系</p>\n<h2 id=\"使用组件的三个步骤\"><a href=\"#使用组件的三个步骤\" class=\"headerlink\" title=\"使用组件的三个步骤\"></a>使用组件的三个步骤</h2><p>1、使用import语法导入需要的组件 </p>\n<p>2、使用components节点注册组件</p>\n<p>3、以标签形式使用刚才注册的组件<br><img src=\"/../image/vue2-08.png\"><br>要在哪个vue文件中用，就在哪个vue文件那边导入</p>\n<p>通过components注册的是私有子组件</p>\n<h2 id=\"注册全局组件\"><a href=\"#注册全局组件\" class=\"headerlink\" title=\"注册全局组件\"></a>注册全局组件</h2><p>在vue项目的main.js入口文件中，通过Vue.component()方法，可以注册全局组件<br><img src=\"/../image/vue2-09.png\"><br>组件名称尽量都是大写开头</p>\n<p>在自己的组件里面没法使用自己</p>\n<h2 id=\"组件里面的props\"><a href=\"#组件里面的props\" class=\"headerlink\" title=\"组件里面的props\"></a>组件里面的props</h2><p>如果这个事件函数里面只有一行代码，也可以这么写<br><img src=\"/../image/vue2-10.png\"><br>props的作用的提升代码的复用性，语法如下：<br><img src=\"/../image/vue2-11.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">注意啊，如果你的数据是数字且要进行四则运算，一定要写成 :init=&quot;9&quot;这种v-bind的形式，如果传的是字符串，也要加 ：</span><br><span class=\"line\">props中的数据可以在template中&#123;&#123;init&#125;&#125;这样使用，但是他是只读的，所以不要拿它去做任何运算</span><br></pre></td></tr></table></figure>\n<h3 id=\"props的default默认值\"><a href=\"#props的default默认值\" class=\"headerlink\" title=\"props的default默认值\"></a>props的default默认值</h3><p>把props变成一个对象，default属性用于如果用户没有定义init属性就把值变成默认的default值<br><img src=\"/../image/vue2-12.png\"></p>\n<h3 id=\"props的type值类型\"><a href=\"#props的type值类型\" class=\"headerlink\" title=\"props的type值类型\"></a>props的type值类型</h3><p>用type属性定义属性的值类型，如果传递过来的值不符合要求就会报错</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props：&#123;</span><br><span class=\"line\">\tinit:&#123;</span><br><span class=\"line\">\t\tdefault:0,</span><br><span class=\"line\">\t\ttype:Number</span><br><span class=\"line\">\t\t//或者Object String</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"props的required必填项\"><a href=\"#props的required必填项\" class=\"headerlink\" title=\"props的required必填项\"></a>props的required必填项</h3><p>就是谁用这个组件，谁必须传值给我，不然就会报错</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props：&#123;</span><br><span class=\"line\">\tinit:&#123;</span><br><span class=\"line\">\t\tdefault:0,</span><br><span class=\"line\">\t\ttype:Number,</span><br><span class=\"line\">\t\t//或者Object String</span><br><span class=\"line\">\t\trequired:true</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"组件之间的样式冲突问题\"><a href=\"#组件之间的样式冲突问题\" class=\"headerlink\" title=\"组件之间的样式冲突问题\"></a>组件之间的样式冲突问题</h2><p>默认情况下，写在.vue组件中的样式会全局生效，因此很容易造成多个组件之间的样式冲突问题。</p>\n<p>导致组件之间样式冲突的根本原因是：</p>\n<p>1、单页面应用程序中，所有组件的dom结构，都是基于唯一的index.html页面进行呈现的</p>\n<p>2、每个组件中的样式，都会影响整个index.html页面中的dom元素</p>\n<p>解决方法：</p>\n<p>1、给统一组件的标签都加上一个相同的属性，然后写样式的时候写标签[属性]这样</p>\n<p>2、在style里面写一个scoped（用这个）<br><img src=\"/../image/vue2-13.png\"></p>\n<h2 id=\"deep-样式穿透\"><a href=\"#deep-样式穿透\" class=\"headerlink\" title=\"/deep/样式穿透\"></a>/deep/样式穿透</h2><p> 用于在父组件中直接改造子组件的样式，当使用第三方组件库的时候，如果有修改组件默认样式的需求，就需要用到这个</p>\n<p>在style中要改变的对应标签前面加/deep/空格 标签名</p>\n<h2 id=\"组件的生命周期\"><a href=\"#组件的生命周期\" class=\"headerlink\" title=\"组件的生命周期\"></a>组件的生命周期</h2><p>——除了3个常用的，其他的了解一下就行</p>\n<p>生命周期是指一个组件从创建——运行——销毁的整个阶段，强调的是一个时间段<br><img src=\"/../image/vue2-14.png\"><br>beforeCreate  组件的props/data/methods尚未被创建，都处于不可用状态</p>\n<p>created   组件的props/data/methods已创建好，都处于可用的状态，但是组件的模板结构尚未生成，不能创建dom（<strong>重要，在这里要发起ajax请求</strong>）</p>\n<p>beforeMount 将要把内存中编译好的html结构渲染要浏览器中，此时浏览器中还没有当前组件的dom结构</p>\n<p>mounted 已经把内存中的html结构成功的渲染到了浏览器中，此时浏览器中已然包含了当前组件的dom结构(<strong>最早操作dom元素</strong>)</p>\n<p>beforeUpdate 将要根据变化过后、最新的数据，重新渲染组件的模板结构</p>\n<p>updated 已经根据最新的数据，完成了组件dom结构的重新渲染（<strong>重</strong>）</p>\n<p>beforeDestroy 将要销毁此组件，此时尚未销毁，组件还处于正常工作的状态</p>\n<p>destroyed 组件已经被销毁，此组件在浏览器中对应的dom结构已经被完全移除</p>\n<h2 id=\"组件之间的数据共享\"><a href=\"#组件之间的数据共享\" class=\"headerlink\" title=\"组件之间的数据共享\"></a>组件之间的数据共享</h2><p>如果父组件中要使用子组件，那么对于table下的tr，select下的option。ul里的li，ol里的li这种，要用is<br><img src=\"/../image/vue2-15.png\"><br>其中MyTr就是你想在tr里面使用的组件名</p>\n<h3 id=\"父向子传值\"><a href=\"#父向子传值\" class=\"headerlink\" title=\"父向子传值\"></a>父向子传值</h3><p>用<strong>自定义属性</strong> Props</p>\n<p>父组件只负责提供数据，props写在子组件中</p>\n<p>注意：不要在子组件中修改props里面的数据</p>\n<h3 id=\"子向父传值\"><a href=\"#子向父传值\" class=\"headerlink\" title=\"子向父传值\"></a>子向父传值</h3><p>使用<strong>自定义事件</strong> $emit(‘事件名’,要传递的数据)，其中需要在父组件中先定义一个值用于传输子组件传递过来的值，然后还要再父组件中绑定这个自定义事件然后定义一个methods</p>\n<h3 id=\"兄弟组件之间的数据共享\"><a href=\"#兄弟组件之间的数据共享\" class=\"headerlink\" title=\"兄弟组件之间的数据共享\"></a>兄弟组件之间的数据共享</h3><p>在vue2中EventBus（<strong>面试问得多</strong>）</p>\n<p>首先在接收数据方定义一个属性，用于接收传递过来的数据<br><img src=\"/../image/vue2-16.png\"><br>使用步骤</p>\n<p>1、创建eventBus.js模块（自己建一个），并向外共享一个Vue的实例对象</p>\n<p>2、在数据发送方，import js文件，调用bus.$emit(‘事件名称’,要发送的数据)方法触发自定义事件</p>\n<p>3、在数据接收方，import js文件，调用bus.$on(‘事件名称’,事件处理函数)方法注册一个自定义事件</p>\n<h2 id=\"动态组件\"><a href=\"#动态组件\" class=\"headerlink\" title=\"动态组件\"></a>动态组件</h2><p>指动态切换组件的显示与隐藏</p>\n<p>vue提供了一个内置的<code>&lt;component&gt;</code>组件（可以认为是一个占位符），专门用来实现动态组件的渲染</p>\n<p>语法：<code>&lt;component is=&quot;组件名&quot;&gt;&lt;/component&gt;</code></p>\n<p>如果你不想写死的话就是在data（）里面定义一个变量，然后</p>\n<p><code>&lt;component :is=&quot;变量名&quot;&gt;&lt;/component&gt;</code></p>\n<p>当组件被隐藏时，其实是组件被销毁了，然后再次出现是重新创建</p>\n<h3 id=\"keep-alive\"><a href=\"#keep-alive\" class=\"headerlink\" title=\"keep-alive\"></a>keep-alive</h3><p>如果要做到离开这个组件的时候不要被销毁，用keep-alive保持状态，原理是当这个组件出现的时候被激活然后当这个组件隐藏的时候被缓存。<br><img src=\"/../image/vue2-17.png\"><br>把你要保存的那个组件放在keep-alive里面。</p>\n<h3 id=\"keep-alive对应的生命周期函数\"><a href=\"#keep-alive对应的生命周期函数\" class=\"headerlink\" title=\"keep-alive对应的生命周期函数\"></a>keep-alive对应的生命周期函数</h3><p>当组件被缓存时，会自动触发组件的deactivated生命周期函数</p>\n<p>当组件被激活时，会自动触发组件的activated生命周期函数</p>\n<p>当组件第一次被创建的时候，顺序是先执行created，然后再执行activated，后面是只执行activated</p>\n<p>注：上面这两个，要用了keep-active后才能使用</p>\n<h3 id=\"keep-alive的include属性\"><a href=\"#keep-alive的include属性\" class=\"headerlink\" title=\"keep-alive的include属性\"></a>keep-alive的include属性</h3><p>include属性用来指定：只有名称匹配的组件会被缓存。多个组件名之间使用英文的逗号分隔<br><img src=\"/../image/vue2-18.png\"><br>exclude排除项，写在这边的组件不会被缓存。注意：include和exclude不能同时使用</p>\n<h2 id=\"组件注册名称和声明name名称的区别\"><a href=\"#组件注册名称和声明name名称的区别\" class=\"headerlink\" title=\"组件注册名称和声明name名称的区别\"></a>组件注册名称和声明name名称的区别</h2><p>如果在声明组件（比如Left.vue里面）的时候，没有为组件指定name名称，则组件的名称默认就是注册时候的名称（比如App.vue里面component写的那个名）</p>\n<p>当你在组件声明的时候设了name名称之后，组件就是这个名<br><img src=\"/../image/vue2-19.png\"><br>我们设置注册名称只是为了要让我们可以以标签的方式去使用这个组件。</p>\n<p>组件声明时设置的name名称主要用于keep-alive标签实现组件缓存功能，以及在调试工具中看到组件的name名称</p>\n<h1 id=\"ref引用\"><a href=\"#ref引用\" class=\"headerlink\" title=\"ref引用\"></a>ref引用</h1><p>获取dom元素或组件的引用</p>\n<p>每个vue的组件实例上，默认有一个$refs对象，里面存储着对应的dom元素或组件的引用。默认情况下，组件的$refs指向一个空对象</p>\n<p>首先你要获取dom，就在这边给他加一个ref属性<br><img src=\"/../image/vue2-20.png\"><br>操作dom<br><img src=\"/../image/vue2-21.png\"><br>他也可以获取组件的引用：</p>\n<p>先给这个组件加一个ref属性<br><img src=\"/../image/vue2-22.png\"><br>然后操作这个组件的属性和方法跟操作dom一样</p>\n<p>this.$refs.名字.你想用啥</p>\n<h1 id=\"this-nextTick-回调函数\"><a href=\"#this-nextTick-回调函数\" class=\"headerlink\" title=\"this.$nextTick(回调函数)\"></a>this.$nextTick(回调函数)</h1><p>等组件的dom重新渲染好之后再调用回调函数，从而保证回调函数可以操作到最新的数据</p>\n<h1 id=\"插槽\"><a href=\"#插槽\" class=\"headerlink\" title=\"插槽\"></a>插槽</h1><p>插槽是vue为组件的封装者提供的能力，允许封装者在封装组件时，把不确定的，希望由用户指定的部分定义为插槽</p>\n<p>用<code>&lt;slot&gt;&lt;/slot&gt;</code>标签作为占位符，(比如写在left.vue里面)到时候用这个组件的时候写进以组件名为标签名的标签的时候就会把标签里面的内容（写在app.vue里面）渲染到这个占位符这里。</p>\n<p>vue官方规定，每一个slot插槽，都要有一个name名称，如果省略，默认<code>name=&quot;default&quot;</code>。默认情况下，在使用组件（在app.vue里面）的时候，提供的内容都会被填充到名字为default的插槽之中。</p>\n<h2 id=\"v-slot指令\"><a href=\"#v-slot指令\" class=\"headerlink\" title=\"v-slot指令\"></a>v-slot指令</h2><p>——简写为 #</p>\n<p>如果我们要指名道姓告诉vue我要把这个内容放在哪个插槽中，用v-slot：插槽名字，语法格式如下：<br><img src=\"/../image/vue2-23.png\"><br>v-slot不能直接用在元素身上，必须用在template标签上</p>\n<p>template这个标签是一个虚拟的标签，只起到包裹性质的作用，但是，不会被渲染为任何实质性的html标签</p>\n<h2 id=\"后备内容\"><a href=\"#后备内容\" class=\"headerlink\" title=\"后备内容\"></a>后备内容</h2><p>如果我们用户没有指定插槽位置要放什么，我们要指定一个默认的内容的话，直接写在slot标签中间就行</p>\n<h2 id=\"具名插槽\"><a href=\"#具名插槽\" class=\"headerlink\" title=\"具名插槽\"></a>具名插槽</h2><p>就是给slot插槽加一个name，name为default的叫做默认插槽</p>\n<h2 id=\"作用域插槽\"><a href=\"#作用域插槽\" class=\"headerlink\" title=\"作用域插槽\"></a>作用域插槽</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">指在封装组件时，为预留的&lt;slot&gt;提供属性对应的值。</span><br><span class=\"line\"></span><br><span class=\"line\">通过插槽的定义，我们可以拿到传过来的值（相当于子传父）</span><br><span class=\"line\"></span><br><span class=\"line\">标准写法是接收参数的都叫做scope，然后如果我们要拿到传递的那个参数，就是&#123;&#123;score.msg&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/../image/vue2-24.png\"><br><img src=\"/../image/vue2-25.png\"><br>也可以用解构赋值<br><img src=\"/../image/vue2-26.png\"></p>\n<h1 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a>自定义指令</h1><p>分为私有自定义指令和全局自定义指令</p>\n<h2 id=\"私有自定义指令\"><a href=\"#私有自定义指令\" class=\"headerlink\" title=\"私有自定义指令\"></a>私有自定义指令</h2><p>在组件的script那边定义，跟定义data啊，el啊这种一样，在directives节点下声明。里面的el是固定的。<br><img src=\"/../image/vue2-27.png\"><br>这样定义之后这个指令的名称就叫做v-color<br><img src=\"/../image/vue2-28.png\"><br>这样用完之后，这个h1标签里面的文字就会变成红色</p>\n<p>也可以是<code>&lt;h1 v-color=&quot;hhh&quot;&gt;哈哈哈&lt;/h1&gt;</code></p>\n<p>这样bind里面有两个参数bind(el,binding)</p>\n<p><strong>第一个参数是当前指令所绑定的dom对象，就是h1。如果要获取到用户通过指令传递过来的hhh的值，就用binding.value就可以拿到</strong><br><img src=\"/../image/vue2-29.png\"><br>这种是写死的，就是我要传递的就是red，而上面那种写法是传一个参数，他回去data里面找有没有叫hhh的属性</p>\n<p>bind元素的缺点：这个只在指令第一个绑定到元素上面的时候才能触发</p>\n<h3 id=\"update函数\"><a href=\"#update函数\" class=\"headerlink\" title=\"update函数\"></a>update函数</h3><p>也是有两个参数，el和binding，含义一样的</p>\n<p>update函数会在每次dom更新时被调用</p>\n<p>这个也是写在directives，跟bind函数平级</p>\n<p>bind和update都必须要有</p>\n<h3 id=\"函数简写\"><a href=\"#函数简写\" class=\"headerlink\" title=\"函数简写\"></a>函数简写</h3><p>如果bind和update函数中的逻辑完全相同。则可以把指令写成函数形式</p>\n<h2 id=\"全局自定义指令\"><a href=\"#全局自定义指令\" class=\"headerlink\" title=\"全局自定义指令\"></a>全局自定义指令</h2><p>写在main.js文件中</p>\n<p>简写版本：</p>\n<p><code>Vue.directive(&#39;指令名&#39;,function(el,binding)&#123; 业务逻辑&#125;)</code></p>\n<p>全写版本：<br><img src=\"/../image/vue2-30.png\"><br>代码里面的提示<br><img src=\"/../image/vue2-31.png\"><br>这个true的情况下，你可以看见那个温馨提示，提示你项目要上线的时候需要改模式，如果你改为false，那么你看不见那个提示。默认为true，就是你不写这行代码也是true</p>\n<h1 id=\"eslint\"><a href=\"#eslint\" class=\"headerlink\" title=\"eslint\"></a>eslint</h1><p>用于约束代码规范</p>\n<p>官方文档<a href=\"https://eslint.bootcss.com/\">https://eslint.bootcss.com/</a></p>\n<h1 id=\"axios\"><a href=\"#axios\" class=\"headerlink\" title=\"axios\"></a>axios</h1><h2 id=\"安装axios的命令\"><a href=\"#安装axios的命令\" class=\"headerlink\" title=\"安装axios的命令\"></a>安装axios的命令</h2><p>npm i axios -S</p>\n<h2 id=\"在vue里面使用axios发请求\"><a href=\"#在vue里面使用axios发请求\" class=\"headerlink\" title=\"在vue里面使用axios发请求\"></a>在vue里面使用axios发请求</h2><p>首先要<code>import axios from &#39;axios&#39;</code></p>\n<p>然后在methods里面发请求，语法跟在js里面一样</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default&#123;</span><br><span class=\"line\">\tmethods:&#123;</span><br><span class=\"line\">\t\tasync getInfo()&#123;</span><br><span class=\"line\">\t\t\tconst(data:res)=await axios.get(&#x27;&#x27;)</span><br><span class=\"line\">\t\t\t\tconsole.log(res)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"把axios挂载到vue的原型上并配置请求根路径\"><a href=\"#把axios挂载到vue的原型上并配置请求根路径\" class=\"headerlink\" title=\"把axios挂载到vue的原型上并配置请求根路径\"></a>把axios挂载到vue的原型上并配置请求根路径</h2><p>在main.js里面写<code>import axios from &#39;axios&#39;</code></p>\n<p><code>axios.defaults.baseURL=&#39;请求根路径&#39;</code></p>\n<p><code>Vue.prototype.$http=axios</code></p>\n<p>写完上面这个之后就不需要在每个组件里面都写import了，代码改为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default&#123;</span><br><span class=\"line\">\tmethods:&#123;</span><br><span class=\"line\">\t\tasync getInfo()&#123;</span><br><span class=\"line\">\t\t\t//只改了这一行的this</span><br><span class=\"line\">\t\t\tconst(data:res)=await this.$http.get(&#x27;&#x27;)</span><br><span class=\"line\">\t\t\t\tconsole.log(res)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>缺点：没法实现接口的复用</p>\n<h1 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h1><h2 id=\"前端路由的工作方式\"><a href=\"#前端路由的工作方式\" class=\"headerlink\" title=\"前端路由的工作方式\"></a>前端路由的工作方式</h2><p>1、用户点击了页面上的路由链接</p>\n<p>2、导致了URL地址栏中的hash值发生了变化</p>\n<p>3、前端路由监听到了Hash地址的变化</p>\n<p>4、前端路由把当前Hash地址对应的组件渲染到浏览器中</p>\n<h2 id=\"vue-router\"><a href=\"#vue-router\" class=\"headerlink\" title=\"vue-router\"></a>vue-router</h2><p>路由解决方案，只能在vue中使用</p>\n<p>官方文档vue2版</p>\n<p><a href=\"https://v3.router.vuejs.org/zh/\">https://v3.router.vuejs.org/zh/</a></p>\n<p>安装</p>\n<p>npm i <a href=\"mailto:&#x76;&#117;&#101;&#45;&#x72;&#111;&#x75;&#x74;&#101;&#x72;&#x40;&#x33;&#46;&#x35;&#x2e;&#50;\">&#x76;&#117;&#101;&#45;&#x72;&#111;&#x75;&#x74;&#101;&#x72;&#x40;&#x33;&#46;&#x35;&#x2e;&#50;</a> -S</p>\n<p>在main.js里面写</p>\n<p>import router from ‘@/router/index.js’</p>\n<p>然后在原有的new Vue({</p>\n<p>里面加上这行 router</p>\n<p>})</p>\n<p>在main.js里面写</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import VueRouter from &#x27;vue-router&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(VueRouter)</span><br><span class=\"line\"></span><br><span class=\"line\">const router = new VueRouter()</span><br><span class=\"line\"></span><br><span class=\"line\">export default router</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在进行模块化导入的时候，如果给定的是文件夹，默认导入这个文件夹下，名字叫做index.js的文件</p>\n<h2 id=\"router-view\"><a href=\"#router-view\" class=\"headerlink\" title=\"router-view\"></a>router-view</h2><p><router-view></router-view></p>\n<p>作用：占位符，写在app.vue里面</p>\n<p>routes是一个数组，作用：定义哈希地址与组件之间的关系</p>\n<p>path里面#就不用写了，写#后面的<br><img src=\"/../image/vue2-32.png\"><br>写在index.js里面，记得那个component后面的那个内容要先import</p>\n<h2 id=\"router-link代替a标签\"><a href=\"#router-link代替a标签\" class=\"headerlink\" title=\"router-link代替a标签\"></a>router-link代替a标签</h2><p><code>&lt;a href=&quot;#/home&quot;&gt;首页&lt;/a&gt;</code></p>\n<p><code>&lt;router-link to=&quot;/home&quot;&gt;首页&lt;/router-link&gt;</code></p>\n<p>注意：写这个to后面那个是地址，好处是不用写#</p>\n<h2 id=\"路由重定向\"><a href=\"#路由重定向\" class=\"headerlink\" title=\"路由重定向\"></a>路由重定向</h2><p>指用户在访问地址A的时候，强制用户跳转到地址C，从而展示特定的组件页面，通过路由规则的redirect属性，指定一个新的路由地址，可以很方便地设置路由的重定向</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">routes:[</span><br><span class=\"line\">\t&#123;path:&#x27;/&#x27;,redirect:&quot;/home&quot;&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>常用于重定向/这个，这样用户一上来就不会看见一个空页面</p>\n<h2 id=\"嵌套路由\"><a href=\"#嵌套路由\" class=\"headerlink\" title=\"嵌套路由\"></a>嵌套路由</h2><p>通过路由实现组件的嵌套展示</p>\n<p><code>&lt;img src=&quot;C:\\Users\\asus\\AppData\\Roaming\\Typora\\typora-user-images\\1658393102995.png&quot; alt=&quot;1658393102995&quot; style=&quot;zoom:60%;&quot; /&gt;</code></p>\n<p>如果要这样的话，那么那个tab1，tab2两个router-link要写在about.vue文件中，并且写一个占位符router-view</p>\n<h2 id=\"通过children属性声明子路由规则\"><a href=\"#通过children属性声明子路由规则\" class=\"headerlink\" title=\"通过children属性声明子路由规则\"></a>通过children属性声明子路由规则</h2><p>写在index.js里面</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import tab1 from xxx</span><br><span class=\"line\">import tab2 from xxx</span><br><span class=\"line\">const router =new VueRouter(&#123;</span><br><span class=\"line\">\troutes:[&#123;</span><br><span class=\"line\">\t\tpath:&quot;/about&quot;</span><br><span class=\"line\">\t\tcomponent:About,</span><br><span class=\"line\">\t\tchildren:[</span><br><span class=\"line\">\t\t\t&#123;path:&#x27;tab1&#x27;,component:tab1&#125;,</span><br><span class=\"line\">\t\t\t&#123;path:&#x27;tab2&#x27;,component:tab2&#125;</span><br><span class=\"line\">\t//斜线不用写</span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t&#125;]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"默认子路由\"><a href=\"#默认子路由\" class=\"headerlink\" title=\"默认子路由\"></a>默认子路由</h2><p>比如我想点击about的时候自动跳转到about/tab1</p>\n<p>法一：用redirect设置默认路由地址</p>\n<p>那我就去找about的路由在哪里，然后在path后面加一个redirect属性，值等于about/tab1</p>\n<p>法二：默认子路由</p>\n<p>所谓默认子路由是指如果children数组中，某个路由规则的path值为空字符串，则这条路由规则，叫做默认子路由。</p>\n<p>只要有空字符串就表示，只要我一点击about，他就会自动跳转到响应组件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import tab1 from xxx</span><br><span class=\"line\">import tab2 from xxx</span><br><span class=\"line\">const router =new VueRouter(&#123;</span><br><span class=\"line\">\troutes:[&#123;</span><br><span class=\"line\">\t\tpath:&quot;/about&quot;</span><br><span class=\"line\">\t\tcomponent:About,</span><br><span class=\"line\">\t\tchildren:[</span><br><span class=\"line\">\t\t\t&#123;path:&#x27;&#x27;,component:tab1&#125;,</span><br><span class=\"line\">\t\t\t&#123;path:&#x27;tab2&#x27;,component:tab2&#125;</span><br><span class=\"line\">\t//斜线不用写</span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t&#125;]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>如果你写默认子路由的话，那么你之前写的那个router-link也要改<br><img src=\"/../image/vue2-33.png\"></p>\n<h2 id=\"动态路由匹配\"><a href=\"#动态路由匹配\" class=\"headerlink\" title=\"动态路由匹配\"></a>动态路由匹配</h2><p>动态路由是指，把哈希地址中可变的部分定义为参数项，从而提高路由规则的复用性。</p>\n<p>在vue-router中使用 ：来定义路由的参数项</p>\n<p>比如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;path:&#x27;/movie/:id&#x27;,component:Movie&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在Movie组件中拿到动态参数id的值</p>\n<p>法一：</p>\n<p><code>this.$route.params.id</code></p>\n<p>this可以省略，this.$route是路由的参数对象</p>\n<p>法二：</p>\n<p>用props传参</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;path:&#x27;/movie/:id&#x27;,component:Movie,props:true&#125;</span><br><span class=\"line\">然后在movie组件的export default里面写入props:[&#x27;id&#x27;]</span><br><span class=\"line\"></span><br><span class=\"line\">所以我要使用到id的时候直接就&#123;&#123;id&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-link to=&quot;/movie/1?name=zs age=20&quot;</span><br></pre></td></tr></table></figure>\n\n<p>在哈希地址中 ？后面的参数项叫做查询参数。获取到？后面的参数值用<code>this.$route.query</code></p>\n<p>this.$route里面fullPath是完整的路径，包含？后面传递的参数，path就只是路径而已，不带参数</p>\n<h1 id=\"导航\"><a href=\"#导航\" class=\"headerlink\" title=\"导航\"></a>导航</h1><h2 id=\"声明式导航\"><a href=\"#声明式导航\" class=\"headerlink\" title=\"声明式导航\"></a>声明式导航</h2><p>在浏览器中，点击链接实现导航的方式，叫做声明式导航</p>\n<p>普通网页中点击<code>&lt;a&gt;</code>链接，vue项目中点击<code>&lt;router-link&gt;</code>都属于声明式导航</p>\n<h2 id=\"编程式导航\"><a href=\"#编程式导航\" class=\"headerlink\" title=\"编程式导航\"></a>编程式导航</h2><p>在浏览器中，调用API方法实现导航的方式，叫做编程式导航。例如：普通网页中调用location.href跳转到新页面的方式，属于编程式导航</p>\n<p>在vue项目中，vue-router提供了许多编程式导航API，最常用的为：</p>\n<p><code>this.$router.push(&#39;哈希地址&#39;)</code></p>\n<p>跳转到指定的哈希地址，并增加一条历史记录</p>\n<p><code>this.$router.replace(&#39;哈希地址&#39;)</code></p>\n<p>跳转到指定的哈希地址，并替换掉当前的历史记录</p>\n<p><code>this.$router.go(数值n)</code></p>\n<p>在浏览历史中前进和后退（负数表示后退，整数表示前进）</p>\n<p>如果次数达到上限则原地不动</p>\n<p>在实际开发中，由于我们一般只会前进或后退1个页面，所以$router.go有一个快捷写法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$router.back() 后退</span><br><span class=\"line\"></span><br><span class=\"line\">$router.forward() 前进</span><br></pre></td></tr></table></figure>\n<p>注意：后面这两个不用写this</p>\n<h2 id=\"导航守卫\"><a href=\"#导航守卫\" class=\"headerlink\" title=\"导航守卫\"></a>导航守卫</h2><p>可以控制路由的访问权限</p>\n<h3 id=\"全局前置守卫\"><a href=\"#全局前置守卫\" class=\"headerlink\" title=\"全局前置守卫\"></a>全局前置守卫</h3><p>每次发生路由的导航跳转时，都会触发全局前置守卫，就是那个fn</p>\n<p>写在index.js里面</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const router = new VueRouter(&#123;.....&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.beforeEach(function(to,from,next)&#123;......&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"守卫方法的3个形参\"><a href=\"#守卫方法的3个形参\" class=\"headerlink\" title=\"守卫方法的3个形参\"></a>守卫方法的3个形参</h3><p>to 将要访问的路由的信息对象</p>\n<p>from 将要离开的路由的信息对象</p>\n<p>next 是一个函数，调用next（）表示放行，允许这次路由导航，必写</p>\n<h3 id=\"next函数的3种调用方式\"><a href=\"#next函数的3种调用方式\" class=\"headerlink\" title=\"next函数的3种调用方式\"></a>next函数的3种调用方式</h3><p>当前用户拥有后台主页的访问权限，直接放行，next（）</p>\n<p>当前用户没有后台主页的访问权限，强制其跳转到登录页面next（’/login’)</p>\n<p>当前用户没有后台主页的访问权限，不允许跳转到后台主页，强制用户停留在当前页面，哪也不去</p>\n<p>next(false)</p>\n<h3 id=\"控制后台主页的访问权限\"><a href=\"#控制后台主页的访问权限\" class=\"headerlink\" title=\"控制后台主页的访问权限\"></a>控制后台主页的访问权限</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.beforeEach(function(to,from,next)&#123;</span><br><span class=\"line\">\t//假设main页面是后台</span><br><span class=\"line\">\tif(to.path === &#x27;/main&#x27;)&#123;</span><br><span class=\"line\">\t\tconst token = localStorage.getItem(&#x27;token&#x27;);</span><br><span class=\"line\">\t\tif(token)&#123;</span><br><span class=\"line\">\t\t\tnext();//访问的是后台，并且有登录</span><br><span class=\"line\">\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\tnext(&#x27;/login&#x27;);//访问后台，但是没登录</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;else&#123;</span><br><span class=\"line\">\t\tnext();//不是要访问后台，不需要登录，直接放行</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n"},{"title":"失踪人口回归","date":"2023-11-20T12:36:54.000Z","top_img":"../image/无风险03.jpg","cover":"../image/无风险03.jpg","description":"我回来啦","_content":"\n在2022心血来潮想搭这个blog，然后因为某些特殊原因搭了一个2.0版本，现在又觉得还是原版香了，现在看我当年写的blog，一整个尬住的大动作，好了不说了，总之就是回归了，希望这次坚持的久一点吧哈哈哈哈。也想试试倒逼输入是什么feel，就又回来了，good good study，day day up！\n\n回顾一下失踪期间的情况吧。2022年搭blog的时候，菜狗一个，项目没几个，但是起码很自信，js基础Dom、Bom都属于一个比较熟悉的状态，ES6一般般，会Git，但是不多（指一直都是我一个人在提交，没协作开发过），Vue2已学完，处于还不是特别熟悉的时候，但是会Node，能自己写点简单的接口给自己接着玩。Echarts也处于一个比较熟悉的状态，也跟过原生小程序，但是对API很不熟悉，uniapp听说坑太多没学。处于一个还在系统学习路上的人，对很多知识点都是一知半解，就是学了，知道有这个东西，但是实践比较少。对SQL还是比较熟悉的，数据库啥的我就是说洒洒水。\n\n现在的情况：三件套平时不用的都忘得差不多了（没错，就是面试的时候直接被面试官偷家了，一点一点扒，然后被吊打），Vue2比较熟悉了，Vue3学了，Ts学了，但是Node生疏了（好久没写了，Express忘得差不多了，更别说什么事件循环、洋葱模型了），体验过真正的前后端交互了（dbq后端老哥，刚来的时候天天给你乱传参了，咱就是说我也不是故意的，这真就不是我封装的，没看懂组件的锅），Git真的用过了，骚操作遇过了，原生小程序忘得可以说是很光了，uniapp被迫在学了，真的在学了，你信我！！！！代码能力依旧菜狗，打扰了。SQL也好久没写了，但是从之前只会sql server拓展到了MySQL也安了，再也不是那个只能连接sql server的人儿了。这一年也努力写过几个项目了，对一些常用的功能也算是比较熟悉了，进步有！不过比较遗憾的是对H5还是比较逃避，哈哈，就是不太确定。这一年也看了好多博客，看别人的博客真享受，but自己当博主好难（bushi）\n\n这一年感觉学习最大占比的是背八股！！！没错，没看错，就是背了很多八股，有一些东西，我可能之前知道有这个东西，但是不是特别了解，通过背八股也学了一些东西，还有一些优化啥的，学了这些七七八八的东西。还有手撕，平时一点原理不看的我被面试逼着去了解，去看了，啊我不管，反正被问到了还是要会的。还有一个是算法，LeetCode自己很不喜欢刷算法，但是还是被逼着刷，看视频，找到适合我的，能看懂的，然后开刷，冲冲冲。到现在虽然嘴上说着我不喜欢刷算法，但是身体很诚实，指200道左右了，但是不影响我算法依旧菜狗，挂笔试挂一堆。拜托，面试的时候叫我写代码真的对我来说挑战蛮大的（不喜欢被人盯着写代码）\n\n目前想看书了，努力拓展自己的书单ing\n\n目前看过的：《你不知道的JS》\n\n没看完的：《红宝书》《Vue.js设计与实现》\n\n想看的：有很多。。。\n\n好了，就唠嗑这么多吧，失踪blog主回归，又要来胡说八道了。。。","source":"_posts/失踪人口回归.md","raw":"---\ntitle: 失踪人口回归\ndate: 2023-11-20 20:36:54\ntags: \n  - 闲聊\ncategories: 闲聊\ntop_img: \"../image/无风险03.jpg\"\ncover: \"../image/无风险03.jpg\"\ndescription: 我回来啦\n---\n\n在2022心血来潮想搭这个blog，然后因为某些特殊原因搭了一个2.0版本，现在又觉得还是原版香了，现在看我当年写的blog，一整个尬住的大动作，好了不说了，总之就是回归了，希望这次坚持的久一点吧哈哈哈哈。也想试试倒逼输入是什么feel，就又回来了，good good study，day day up！\n\n回顾一下失踪期间的情况吧。2022年搭blog的时候，菜狗一个，项目没几个，但是起码很自信，js基础Dom、Bom都属于一个比较熟悉的状态，ES6一般般，会Git，但是不多（指一直都是我一个人在提交，没协作开发过），Vue2已学完，处于还不是特别熟悉的时候，但是会Node，能自己写点简单的接口给自己接着玩。Echarts也处于一个比较熟悉的状态，也跟过原生小程序，但是对API很不熟悉，uniapp听说坑太多没学。处于一个还在系统学习路上的人，对很多知识点都是一知半解，就是学了，知道有这个东西，但是实践比较少。对SQL还是比较熟悉的，数据库啥的我就是说洒洒水。\n\n现在的情况：三件套平时不用的都忘得差不多了（没错，就是面试的时候直接被面试官偷家了，一点一点扒，然后被吊打），Vue2比较熟悉了，Vue3学了，Ts学了，但是Node生疏了（好久没写了，Express忘得差不多了，更别说什么事件循环、洋葱模型了），体验过真正的前后端交互了（dbq后端老哥，刚来的时候天天给你乱传参了，咱就是说我也不是故意的，这真就不是我封装的，没看懂组件的锅），Git真的用过了，骚操作遇过了，原生小程序忘得可以说是很光了，uniapp被迫在学了，真的在学了，你信我！！！！代码能力依旧菜狗，打扰了。SQL也好久没写了，但是从之前只会sql server拓展到了MySQL也安了，再也不是那个只能连接sql server的人儿了。这一年也努力写过几个项目了，对一些常用的功能也算是比较熟悉了，进步有！不过比较遗憾的是对H5还是比较逃避，哈哈，就是不太确定。这一年也看了好多博客，看别人的博客真享受，but自己当博主好难（bushi）\n\n这一年感觉学习最大占比的是背八股！！！没错，没看错，就是背了很多八股，有一些东西，我可能之前知道有这个东西，但是不是特别了解，通过背八股也学了一些东西，还有一些优化啥的，学了这些七七八八的东西。还有手撕，平时一点原理不看的我被面试逼着去了解，去看了，啊我不管，反正被问到了还是要会的。还有一个是算法，LeetCode自己很不喜欢刷算法，但是还是被逼着刷，看视频，找到适合我的，能看懂的，然后开刷，冲冲冲。到现在虽然嘴上说着我不喜欢刷算法，但是身体很诚实，指200道左右了，但是不影响我算法依旧菜狗，挂笔试挂一堆。拜托，面试的时候叫我写代码真的对我来说挑战蛮大的（不喜欢被人盯着写代码）\n\n目前想看书了，努力拓展自己的书单ing\n\n目前看过的：《你不知道的JS》\n\n没看完的：《红宝书》《Vue.js设计与实现》\n\n想看的：有很多。。。\n\n好了，就唠嗑这么多吧，失踪blog主回归，又要来胡说八道了。。。","slug":"失踪人口回归","published":1,"updated":"2023-11-20T13:03:42.114Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyn4sci9000qecvz7baz7fu8","content":"<p>在2022心血来潮想搭这个blog，然后因为某些特殊原因搭了一个2.0版本，现在又觉得还是原版香了，现在看我当年写的blog，一整个尬住的大动作，好了不说了，总之就是回归了，希望这次坚持的久一点吧哈哈哈哈。也想试试倒逼输入是什么feel，就又回来了，good good study，day day up！</p>\n<p>回顾一下失踪期间的情况吧。2022年搭blog的时候，菜狗一个，项目没几个，但是起码很自信，js基础Dom、Bom都属于一个比较熟悉的状态，ES6一般般，会Git，但是不多（指一直都是我一个人在提交，没协作开发过），Vue2已学完，处于还不是特别熟悉的时候，但是会Node，能自己写点简单的接口给自己接着玩。Echarts也处于一个比较熟悉的状态，也跟过原生小程序，但是对API很不熟悉，uniapp听说坑太多没学。处于一个还在系统学习路上的人，对很多知识点都是一知半解，就是学了，知道有这个东西，但是实践比较少。对SQL还是比较熟悉的，数据库啥的我就是说洒洒水。</p>\n<p>现在的情况：三件套平时不用的都忘得差不多了（没错，就是面试的时候直接被面试官偷家了，一点一点扒，然后被吊打），Vue2比较熟悉了，Vue3学了，Ts学了，但是Node生疏了（好久没写了，Express忘得差不多了，更别说什么事件循环、洋葱模型了），体验过真正的前后端交互了（dbq后端老哥，刚来的时候天天给你乱传参了，咱就是说我也不是故意的，这真就不是我封装的，没看懂组件的锅），Git真的用过了，骚操作遇过了，原生小程序忘得可以说是很光了，uniapp被迫在学了，真的在学了，你信我！！！！代码能力依旧菜狗，打扰了。SQL也好久没写了，但是从之前只会sql server拓展到了MySQL也安了，再也不是那个只能连接sql server的人儿了。这一年也努力写过几个项目了，对一些常用的功能也算是比较熟悉了，进步有！不过比较遗憾的是对H5还是比较逃避，哈哈，就是不太确定。这一年也看了好多博客，看别人的博客真享受，but自己当博主好难（bushi）</p>\n<p>这一年感觉学习最大占比的是背八股！！！没错，没看错，就是背了很多八股，有一些东西，我可能之前知道有这个东西，但是不是特别了解，通过背八股也学了一些东西，还有一些优化啥的，学了这些七七八八的东西。还有手撕，平时一点原理不看的我被面试逼着去了解，去看了，啊我不管，反正被问到了还是要会的。还有一个是算法，LeetCode自己很不喜欢刷算法，但是还是被逼着刷，看视频，找到适合我的，能看懂的，然后开刷，冲冲冲。到现在虽然嘴上说着我不喜欢刷算法，但是身体很诚实，指200道左右了，但是不影响我算法依旧菜狗，挂笔试挂一堆。拜托，面试的时候叫我写代码真的对我来说挑战蛮大的（不喜欢被人盯着写代码）</p>\n<p>目前想看书了，努力拓展自己的书单ing</p>\n<p>目前看过的：《你不知道的JS》</p>\n<p>没看完的：《红宝书》《Vue.js设计与实现》</p>\n<p>想看的：有很多。。。</p>\n<p>好了，就唠嗑这么多吧，失踪blog主回归，又要来胡说八道了。。。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在2022心血来潮想搭这个blog，然后因为某些特殊原因搭了一个2.0版本，现在又觉得还是原版香了，现在看我当年写的blog，一整个尬住的大动作，好了不说了，总之就是回归了，希望这次坚持的久一点吧哈哈哈哈。也想试试倒逼输入是什么feel，就又回来了，good good study，day day up！</p>\n<p>回顾一下失踪期间的情况吧。2022年搭blog的时候，菜狗一个，项目没几个，但是起码很自信，js基础Dom、Bom都属于一个比较熟悉的状态，ES6一般般，会Git，但是不多（指一直都是我一个人在提交，没协作开发过），Vue2已学完，处于还不是特别熟悉的时候，但是会Node，能自己写点简单的接口给自己接着玩。Echarts也处于一个比较熟悉的状态，也跟过原生小程序，但是对API很不熟悉，uniapp听说坑太多没学。处于一个还在系统学习路上的人，对很多知识点都是一知半解，就是学了，知道有这个东西，但是实践比较少。对SQL还是比较熟悉的，数据库啥的我就是说洒洒水。</p>\n<p>现在的情况：三件套平时不用的都忘得差不多了（没错，就是面试的时候直接被面试官偷家了，一点一点扒，然后被吊打），Vue2比较熟悉了，Vue3学了，Ts学了，但是Node生疏了（好久没写了，Express忘得差不多了，更别说什么事件循环、洋葱模型了），体验过真正的前后端交互了（dbq后端老哥，刚来的时候天天给你乱传参了，咱就是说我也不是故意的，这真就不是我封装的，没看懂组件的锅），Git真的用过了，骚操作遇过了，原生小程序忘得可以说是很光了，uniapp被迫在学了，真的在学了，你信我！！！！代码能力依旧菜狗，打扰了。SQL也好久没写了，但是从之前只会sql server拓展到了MySQL也安了，再也不是那个只能连接sql server的人儿了。这一年也努力写过几个项目了，对一些常用的功能也算是比较熟悉了，进步有！不过比较遗憾的是对H5还是比较逃避，哈哈，就是不太确定。这一年也看了好多博客，看别人的博客真享受，but自己当博主好难（bushi）</p>\n<p>这一年感觉学习最大占比的是背八股！！！没错，没看错，就是背了很多八股，有一些东西，我可能之前知道有这个东西，但是不是特别了解，通过背八股也学了一些东西，还有一些优化啥的，学了这些七七八八的东西。还有手撕，平时一点原理不看的我被面试逼着去了解，去看了，啊我不管，反正被问到了还是要会的。还有一个是算法，LeetCode自己很不喜欢刷算法，但是还是被逼着刷，看视频，找到适合我的，能看懂的，然后开刷，冲冲冲。到现在虽然嘴上说着我不喜欢刷算法，但是身体很诚实，指200道左右了，但是不影响我算法依旧菜狗，挂笔试挂一堆。拜托，面试的时候叫我写代码真的对我来说挑战蛮大的（不喜欢被人盯着写代码）</p>\n<p>目前想看书了，努力拓展自己的书单ing</p>\n<p>目前看过的：《你不知道的JS》</p>\n<p>没看完的：《红宝书》《Vue.js设计与实现》</p>\n<p>想看的：有很多。。。</p>\n<p>好了，就唠嗑这么多吧，失踪blog主回归，又要来胡说八道了。。。</p>\n"},{"title":"数据库报错设备未就绪怎么办","date":"2022-09-17T13:16:29.000Z","top_img":"../image/无风险03.jpg","cover":"../image/无风险03.jpg","description":"数据库报错21(设备未就绪)该怎么办","_content":"\n今天在启动项目的时候发现报了好大一串错误\n\nRequestError: The operating system returned error 21(设备未就绪。) to SQL Server during a read at offset 0x00000000350000 in file '这里是路径'. Additional messages in the SQL Server error log and operating system error log may provide more detail. This is a severe system-level error condition that threatens database integrity and must be corrected immediately. Complete a full database consistency check (DBCC CHECKDB). This error can be caused \nby many factors; for more information, see SQL Server Books Online.\n\n先说说解决方案吧\n直接打开服务，然后找到SqlServer的服务，重启一下再进去就正常了\n果然还得是重启大法好\n\n上网查了一下，别人说的解决方案是加这段代码\n```\nuse master\n \ndeclare @databasename varchar(255)\n \nset @databasename='leddb'\n \nexec sp_dboption @databasename, N'single', N'true'--将目标数据库置为单用户状态\n \ndbcc checkdb (@databasename,REPAIR_ALLOW_DATA_LOSS)\n \ndbcc checkdb (@databasename,REPAIR_REBUILD)\n \nexec sp_dboption @databasename, N'single', N'false'--将目标数据库置为多用户状态\n```","source":"_posts/数据库报错设备未就绪怎么办.md","raw":"---\ntitle: 数据库报错设备未就绪怎么办\ndate: 2022-09-17 21:16:29\ntags: \n  - 经验\n  - 数据库\n  - sqlserver\ncategories: 经验\ntop_img: \"../image/无风险03.jpg\"\ncover: \"../image/无风险03.jpg\"\ndescription: 数据库报错21(设备未就绪)该怎么办\n---\n\n今天在启动项目的时候发现报了好大一串错误\n\nRequestError: The operating system returned error 21(设备未就绪。) to SQL Server during a read at offset 0x00000000350000 in file '这里是路径'. Additional messages in the SQL Server error log and operating system error log may provide more detail. This is a severe system-level error condition that threatens database integrity and must be corrected immediately. Complete a full database consistency check (DBCC CHECKDB). This error can be caused \nby many factors; for more information, see SQL Server Books Online.\n\n先说说解决方案吧\n直接打开服务，然后找到SqlServer的服务，重启一下再进去就正常了\n果然还得是重启大法好\n\n上网查了一下，别人说的解决方案是加这段代码\n```\nuse master\n \ndeclare @databasename varchar(255)\n \nset @databasename='leddb'\n \nexec sp_dboption @databasename, N'single', N'true'--将目标数据库置为单用户状态\n \ndbcc checkdb (@databasename,REPAIR_ALLOW_DATA_LOSS)\n \ndbcc checkdb (@databasename,REPAIR_REBUILD)\n \nexec sp_dboption @databasename, N'single', N'false'--将目标数据库置为多用户状态\n```","slug":"数据库报错设备未就绪怎么办","published":1,"updated":"2022-10-04T12:49:32.515Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyn4scib000uecvzcvz20ylt","content":"<p>今天在启动项目的时候发现报了好大一串错误</p>\n<p>RequestError: The operating system returned error 21(设备未就绪。) to SQL Server during a read at offset 0x00000000350000 in file ‘这里是路径’. Additional messages in the SQL Server error log and operating system error log may provide more detail. This is a severe system-level error condition that threatens database integrity and must be corrected immediately. Complete a full database consistency check (DBCC CHECKDB). This error can be caused<br>by many factors; for more information, see SQL Server Books Online.</p>\n<p>先说说解决方案吧<br>直接打开服务，然后找到SqlServer的服务，重启一下再进去就正常了<br>果然还得是重启大法好</p>\n<p>上网查了一下，别人说的解决方案是加这段代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use master</span><br><span class=\"line\"> </span><br><span class=\"line\">declare @databasename varchar(255)</span><br><span class=\"line\"> </span><br><span class=\"line\">set @databasename=&#x27;leddb&#x27;</span><br><span class=\"line\"> </span><br><span class=\"line\">exec sp_dboption @databasename, N&#x27;single&#x27;, N&#x27;true&#x27;--将目标数据库置为单用户状态</span><br><span class=\"line\"> </span><br><span class=\"line\">dbcc checkdb (@databasename,REPAIR_ALLOW_DATA_LOSS)</span><br><span class=\"line\"> </span><br><span class=\"line\">dbcc checkdb (@databasename,REPAIR_REBUILD)</span><br><span class=\"line\"> </span><br><span class=\"line\">exec sp_dboption @databasename, N&#x27;single&#x27;, N&#x27;false&#x27;--将目标数据库置为多用户状态</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>今天在启动项目的时候发现报了好大一串错误</p>\n<p>RequestError: The operating system returned error 21(设备未就绪。) to SQL Server during a read at offset 0x00000000350000 in file ‘这里是路径’. Additional messages in the SQL Server error log and operating system error log may provide more detail. This is a severe system-level error condition that threatens database integrity and must be corrected immediately. Complete a full database consistency check (DBCC CHECKDB). This error can be caused<br>by many factors; for more information, see SQL Server Books Online.</p>\n<p>先说说解决方案吧<br>直接打开服务，然后找到SqlServer的服务，重启一下再进去就正常了<br>果然还得是重启大法好</p>\n<p>上网查了一下，别人说的解决方案是加这段代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use master</span><br><span class=\"line\"> </span><br><span class=\"line\">declare @databasename varchar(255)</span><br><span class=\"line\"> </span><br><span class=\"line\">set @databasename=&#x27;leddb&#x27;</span><br><span class=\"line\"> </span><br><span class=\"line\">exec sp_dboption @databasename, N&#x27;single&#x27;, N&#x27;true&#x27;--将目标数据库置为单用户状态</span><br><span class=\"line\"> </span><br><span class=\"line\">dbcc checkdb (@databasename,REPAIR_ALLOW_DATA_LOSS)</span><br><span class=\"line\"> </span><br><span class=\"line\">dbcc checkdb (@databasename,REPAIR_REBUILD)</span><br><span class=\"line\"> </span><br><span class=\"line\">exec sp_dboption @databasename, N&#x27;single&#x27;, N&#x27;false&#x27;--将目标数据库置为多用户状态</span><br></pre></td></tr></table></figure>"},{"title":"正则表达式学习笔记","date":"2022-08-30T06:43:34.000Z","label":"这是一篇正则表达式的知识点总结","top_img":"../image/无风险04.jpg","cover":"../image/无风险04.jpg","description":"这是一篇正则表达式的知识点总结","_content":"\n## 创建正则表达式\n\n1、通过调用RegExp对象的构造函数创建\n\nvar 变量名=new RegExp(/表达式/);\n\n2、通过字面量创建\n\nvar 变量名=/表达式/;\n\n注：正则表达式里面不需要加引号，不管是数字型还是字符型，然后test方法里面的如果是字符串就需要加引号\n\n## 测试正则表达式\n\n**——有个在线测试工具，去菜鸟工具那边有一个**\n\ntest()正则对象方法，用于检测字符串是否符合该规则，符合返回true，不符合返回false\n\nregexObj.test(str)   检测str文本是否符合我们写的正则表达式\n\nregaxObj是写的正则表达式\n\nstr是要测试的文本\n\n## 边界符\n\n用于提示字符所在处的位置\n![边界符](../image/img01.jpg)\n\n## 字符类\n\n表示有一系列字符可供选择，只需要符合其中一个就行\n\nvar rg = /[abc]/   表示只要包含a或者b或者c任意一个就行，无论这三个字母的其中一个在哪个位置都行，只要有就是true\n\nvar rg1 = /^[abc]$/ 表示3选1，a或者b或者c\n\nvar rg2=/^[a-z]$/ 表示a-z里面任何一个都返回true，只能是一个，还有，大小写不敏感，你写a-z，他就只认小写的英文字母，大写的不认\n\n字符组合\n\nvar reg=/^[a-zA-Z]$/  这样就是26个英文字母不管大小写，随便输入一个都是返回true\n\n^写在[]里面表示取反的意思，就是不能\n\n## 量词符\n\n![量词符](../image/img02.png)\n\n注意，你如果用最后一个的时候，n和m中间不要有空格，不然报错\n\n## 括号总结\n\n中括号：字符集合，匹配方括号中的任意字符\n\n大括号：量词符，里面表示重复次数\n\n小括号：表示优先级\n\n## 预定义类\n\n预定义类指的是某些常见模式的简写方式\n![预定义类](../image/img03.png)\n\n如果你一个判断要满足a or b，那么用|做分隔符\n\n## 正则表达式中的替换\n\nreplace()方法可以实现替换字符串操作，用来替换的参数可以是一个空字符串或者是一个正则表达式。\n\nxx.replace(正则表达式或者被替换的字符，替换为的字符串)\n\n上面这个返回值是一个替换完毕的新字符\n\n注意：replace只能替换掉第一个满足条件的\n\n如果想要替换全部的话，要使用正则表达式参数\n\n/表达式/[switch]\n\ng:全局匹配\n\ni:忽略大小写\n\ngi:全局匹配+忽略大小写\n\n## 正则与字符串操作\n\nexec()函数用于检索字符串中的正则表达式的匹配。\n\n如果字符串中有匹配的值，那么就返回匹配值，否则返回null\n\nRegExpObject.exec(string)\n\n```js\nvar str='hello'\nvar pattern=/o/\nconsole.log(pattern.exec(str))\n```\n未完待续...","source":"_posts/正则表达式学习笔记.md","raw":"---\ntitle: 正则表达式学习笔记\ndate: 2022-08-30 14:43:34\ntags: \n  - 学习笔记\n  - 正则表达式\n  - 前端\ncategories: 学习笔记\nlabel: 这是一篇正则表达式的知识点总结\ntop_img: \"../image/无风险04.jpg\"\ncover: \"../image/无风险04.jpg\"\ndescription: 这是一篇正则表达式的知识点总结\n---\n\n## 创建正则表达式\n\n1、通过调用RegExp对象的构造函数创建\n\nvar 变量名=new RegExp(/表达式/);\n\n2、通过字面量创建\n\nvar 变量名=/表达式/;\n\n注：正则表达式里面不需要加引号，不管是数字型还是字符型，然后test方法里面的如果是字符串就需要加引号\n\n## 测试正则表达式\n\n**——有个在线测试工具，去菜鸟工具那边有一个**\n\ntest()正则对象方法，用于检测字符串是否符合该规则，符合返回true，不符合返回false\n\nregexObj.test(str)   检测str文本是否符合我们写的正则表达式\n\nregaxObj是写的正则表达式\n\nstr是要测试的文本\n\n## 边界符\n\n用于提示字符所在处的位置\n![边界符](../image/img01.jpg)\n\n## 字符类\n\n表示有一系列字符可供选择，只需要符合其中一个就行\n\nvar rg = /[abc]/   表示只要包含a或者b或者c任意一个就行，无论这三个字母的其中一个在哪个位置都行，只要有就是true\n\nvar rg1 = /^[abc]$/ 表示3选1，a或者b或者c\n\nvar rg2=/^[a-z]$/ 表示a-z里面任何一个都返回true，只能是一个，还有，大小写不敏感，你写a-z，他就只认小写的英文字母，大写的不认\n\n字符组合\n\nvar reg=/^[a-zA-Z]$/  这样就是26个英文字母不管大小写，随便输入一个都是返回true\n\n^写在[]里面表示取反的意思，就是不能\n\n## 量词符\n\n![量词符](../image/img02.png)\n\n注意，你如果用最后一个的时候，n和m中间不要有空格，不然报错\n\n## 括号总结\n\n中括号：字符集合，匹配方括号中的任意字符\n\n大括号：量词符，里面表示重复次数\n\n小括号：表示优先级\n\n## 预定义类\n\n预定义类指的是某些常见模式的简写方式\n![预定义类](../image/img03.png)\n\n如果你一个判断要满足a or b，那么用|做分隔符\n\n## 正则表达式中的替换\n\nreplace()方法可以实现替换字符串操作，用来替换的参数可以是一个空字符串或者是一个正则表达式。\n\nxx.replace(正则表达式或者被替换的字符，替换为的字符串)\n\n上面这个返回值是一个替换完毕的新字符\n\n注意：replace只能替换掉第一个满足条件的\n\n如果想要替换全部的话，要使用正则表达式参数\n\n/表达式/[switch]\n\ng:全局匹配\n\ni:忽略大小写\n\ngi:全局匹配+忽略大小写\n\n## 正则与字符串操作\n\nexec()函数用于检索字符串中的正则表达式的匹配。\n\n如果字符串中有匹配的值，那么就返回匹配值，否则返回null\n\nRegExpObject.exec(string)\n\n```js\nvar str='hello'\nvar pattern=/o/\nconsole.log(pattern.exec(str))\n```\n未完待续...","slug":"正则表达式学习笔记","published":1,"updated":"2022-10-04T12:49:46.065Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyn4scic000xecvzh1ng4axw","content":"<h2 id=\"创建正则表达式\"><a href=\"#创建正则表达式\" class=\"headerlink\" title=\"创建正则表达式\"></a>创建正则表达式</h2><p>1、通过调用RegExp对象的构造函数创建</p>\n<p>var 变量名=new RegExp(/表达式/);</p>\n<p>2、通过字面量创建</p>\n<p>var 变量名=/表达式/;</p>\n<p>注：正则表达式里面不需要加引号，不管是数字型还是字符型，然后test方法里面的如果是字符串就需要加引号</p>\n<h2 id=\"测试正则表达式\"><a href=\"#测试正则表达式\" class=\"headerlink\" title=\"测试正则表达式\"></a>测试正则表达式</h2><p><strong>——有个在线测试工具，去菜鸟工具那边有一个</strong></p>\n<p>test()正则对象方法，用于检测字符串是否符合该规则，符合返回true，不符合返回false</p>\n<p>regexObj.test(str)   检测str文本是否符合我们写的正则表达式</p>\n<p>regaxObj是写的正则表达式</p>\n<p>str是要测试的文本</p>\n<h2 id=\"边界符\"><a href=\"#边界符\" class=\"headerlink\" title=\"边界符\"></a>边界符</h2><p>用于提示字符所在处的位置<br><img src=\"/../image/img01.jpg\" alt=\"边界符\"></p>\n<h2 id=\"字符类\"><a href=\"#字符类\" class=\"headerlink\" title=\"字符类\"></a>字符类</h2><p>表示有一系列字符可供选择，只需要符合其中一个就行</p>\n<p>var rg = /[abc]/   表示只要包含a或者b或者c任意一个就行，无论这三个字母的其中一个在哪个位置都行，只要有就是true</p>\n<p>var rg1 = /^[abc]$/ 表示3选1，a或者b或者c</p>\n<p>var rg2=/^[a-z]$/ 表示a-z里面任何一个都返回true，只能是一个，还有，大小写不敏感，你写a-z，他就只认小写的英文字母，大写的不认</p>\n<p>字符组合</p>\n<p>var reg=/^[a-zA-Z]$/  这样就是26个英文字母不管大小写，随便输入一个都是返回true</p>\n<p>^写在[]里面表示取反的意思，就是不能</p>\n<h2 id=\"量词符\"><a href=\"#量词符\" class=\"headerlink\" title=\"量词符\"></a>量词符</h2><p><img src=\"/../image/img02.png\" alt=\"量词符\"></p>\n<p>注意，你如果用最后一个的时候，n和m中间不要有空格，不然报错</p>\n<h2 id=\"括号总结\"><a href=\"#括号总结\" class=\"headerlink\" title=\"括号总结\"></a>括号总结</h2><p>中括号：字符集合，匹配方括号中的任意字符</p>\n<p>大括号：量词符，里面表示重复次数</p>\n<p>小括号：表示优先级</p>\n<h2 id=\"预定义类\"><a href=\"#预定义类\" class=\"headerlink\" title=\"预定义类\"></a>预定义类</h2><p>预定义类指的是某些常见模式的简写方式<br><img src=\"/../image/img03.png\" alt=\"预定义类\"></p>\n<p>如果你一个判断要满足a or b，那么用|做分隔符</p>\n<h2 id=\"正则表达式中的替换\"><a href=\"#正则表达式中的替换\" class=\"headerlink\" title=\"正则表达式中的替换\"></a>正则表达式中的替换</h2><p>replace()方法可以实现替换字符串操作，用来替换的参数可以是一个空字符串或者是一个正则表达式。</p>\n<p>xx.replace(正则表达式或者被替换的字符，替换为的字符串)</p>\n<p>上面这个返回值是一个替换完毕的新字符</p>\n<p>注意：replace只能替换掉第一个满足条件的</p>\n<p>如果想要替换全部的话，要使用正则表达式参数</p>\n<p>/表达式/[switch]</p>\n<p>g:全局匹配</p>\n<p>i:忽略大小写</p>\n<p>gi:全局匹配+忽略大小写</p>\n<h2 id=\"正则与字符串操作\"><a href=\"#正则与字符串操作\" class=\"headerlink\" title=\"正则与字符串操作\"></a>正则与字符串操作</h2><p>exec()函数用于检索字符串中的正则表达式的匹配。</p>\n<p>如果字符串中有匹配的值，那么就返回匹配值，否则返回null</p>\n<p>RegExpObject.exec(string)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str=<span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pattern=<span class=\"regexp\">/o/</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(pattern.<span class=\"title function_\">exec</span>(str))</span><br></pre></td></tr></table></figure>\n<p>未完待续…</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"创建正则表达式\"><a href=\"#创建正则表达式\" class=\"headerlink\" title=\"创建正则表达式\"></a>创建正则表达式</h2><p>1、通过调用RegExp对象的构造函数创建</p>\n<p>var 变量名=new RegExp(/表达式/);</p>\n<p>2、通过字面量创建</p>\n<p>var 变量名=/表达式/;</p>\n<p>注：正则表达式里面不需要加引号，不管是数字型还是字符型，然后test方法里面的如果是字符串就需要加引号</p>\n<h2 id=\"测试正则表达式\"><a href=\"#测试正则表达式\" class=\"headerlink\" title=\"测试正则表达式\"></a>测试正则表达式</h2><p><strong>——有个在线测试工具，去菜鸟工具那边有一个</strong></p>\n<p>test()正则对象方法，用于检测字符串是否符合该规则，符合返回true，不符合返回false</p>\n<p>regexObj.test(str)   检测str文本是否符合我们写的正则表达式</p>\n<p>regaxObj是写的正则表达式</p>\n<p>str是要测试的文本</p>\n<h2 id=\"边界符\"><a href=\"#边界符\" class=\"headerlink\" title=\"边界符\"></a>边界符</h2><p>用于提示字符所在处的位置<br><img src=\"/../image/img01.jpg\" alt=\"边界符\"></p>\n<h2 id=\"字符类\"><a href=\"#字符类\" class=\"headerlink\" title=\"字符类\"></a>字符类</h2><p>表示有一系列字符可供选择，只需要符合其中一个就行</p>\n<p>var rg = /[abc]/   表示只要包含a或者b或者c任意一个就行，无论这三个字母的其中一个在哪个位置都行，只要有就是true</p>\n<p>var rg1 = /^[abc]$/ 表示3选1，a或者b或者c</p>\n<p>var rg2=/^[a-z]$/ 表示a-z里面任何一个都返回true，只能是一个，还有，大小写不敏感，你写a-z，他就只认小写的英文字母，大写的不认</p>\n<p>字符组合</p>\n<p>var reg=/^[a-zA-Z]$/  这样就是26个英文字母不管大小写，随便输入一个都是返回true</p>\n<p>^写在[]里面表示取反的意思，就是不能</p>\n<h2 id=\"量词符\"><a href=\"#量词符\" class=\"headerlink\" title=\"量词符\"></a>量词符</h2><p><img src=\"/../image/img02.png\" alt=\"量词符\"></p>\n<p>注意，你如果用最后一个的时候，n和m中间不要有空格，不然报错</p>\n<h2 id=\"括号总结\"><a href=\"#括号总结\" class=\"headerlink\" title=\"括号总结\"></a>括号总结</h2><p>中括号：字符集合，匹配方括号中的任意字符</p>\n<p>大括号：量词符，里面表示重复次数</p>\n<p>小括号：表示优先级</p>\n<h2 id=\"预定义类\"><a href=\"#预定义类\" class=\"headerlink\" title=\"预定义类\"></a>预定义类</h2><p>预定义类指的是某些常见模式的简写方式<br><img src=\"/../image/img03.png\" alt=\"预定义类\"></p>\n<p>如果你一个判断要满足a or b，那么用|做分隔符</p>\n<h2 id=\"正则表达式中的替换\"><a href=\"#正则表达式中的替换\" class=\"headerlink\" title=\"正则表达式中的替换\"></a>正则表达式中的替换</h2><p>replace()方法可以实现替换字符串操作，用来替换的参数可以是一个空字符串或者是一个正则表达式。</p>\n<p>xx.replace(正则表达式或者被替换的字符，替换为的字符串)</p>\n<p>上面这个返回值是一个替换完毕的新字符</p>\n<p>注意：replace只能替换掉第一个满足条件的</p>\n<p>如果想要替换全部的话，要使用正则表达式参数</p>\n<p>/表达式/[switch]</p>\n<p>g:全局匹配</p>\n<p>i:忽略大小写</p>\n<p>gi:全局匹配+忽略大小写</p>\n<h2 id=\"正则与字符串操作\"><a href=\"#正则与字符串操作\" class=\"headerlink\" title=\"正则与字符串操作\"></a>正则与字符串操作</h2><p>exec()函数用于检索字符串中的正则表达式的匹配。</p>\n<p>如果字符串中有匹配的值，那么就返回匹配值，否则返回null</p>\n<p>RegExpObject.exec(string)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str=<span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pattern=<span class=\"regexp\">/o/</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(pattern.<span class=\"title function_\">exec</span>(str))</span><br></pre></td></tr></table></figure>\n<p>未完待续…</p>\n"},{"title":"zhanhu的前端经验","description":"一些练习里面的得到的经验","date":"2022-10-04T09:18:24.000Z","top_img":"../image/无风险01.jpg","cover":"../image/无风险01.jpg","_content":"\n# 经验篇\n\n<div style=\"text-align: right\"> ——zhanhu的前端经验 </div>\n\n备注：本文章所有的详见桌面冲啊里面的demo1\n已将项目源码上传至gitee，详见vue2-practice\n\n视频来源：https://www.bilibili.com/video/BV1tA411P7pQ?p=23\n\n## 生成随机数的方法\n\n```js\ngetRand(min,max){\n   return Math.floor(Math.random()*(max-min+1)+min)\n  }\n//还可以这么写\nMath.floor(Math.random()*100)\n//这个表示1-100\n```\n\n## 控制显示与隐藏的方法\n\nv-show = \"msg\"\n\n其中msg是一个布尔值，默认为false，即不显示。\n\n然后通过方法改变msg的值\n\n```js\nchange(){\n\n      if(this.msg === true){\n\n        this.msg = false;\n\n      }\n\n      else{\n\n        this.msg = true;\n\n      }\n```\n\n## 使用less的方法\n\n首先要安装less和less-loadedr\n\n```\nnpm install less less-loader --save-dev\n```\n\n然后在style中写上```<style lang=\"less\">```\n\n## 改变鼠标形状\n```\ncursor:pointer;\n```\n可能的值：见下方链接\n\nhttps://www.w3school.com.cn/cssref/pr_class_cursor.asp\n\n## 禁止选中文字\n\nhttps://www.cnblogs.com/yangchin9/p/10904805.html\n\n## 在html中写左尖括号和右尖括号的方法\n\n```\n&lt;   左尖括号\n&gt;   右尖括号，其中，右尖括号可以直接写>\n```\n\n## 合并边框\n\n```css\nborder-collapse: collapse;\n```\n\n## vue关闭eslint\n\nhttps://blog.csdn.net/qq_44378557/article/details/120990041\n\nhttps://blog.csdn.net/qq_44774831/article/details/117933127?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166083554716782388027031%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166083554716782388027031&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-117933127-null-null.142^v42^pc_rank_34,185^v2^control&utm_term=%E5%85%B3%E9%97%ADeslint&spm=1018.2226.3001.4187\n\n啊好长，csdn里面搜的\n\n## 清除定时器的注意点\n\n在同一个函数中清除定时器需要把clearInterval写在setInterval里面\n\n## 刚开始按钮处于禁用状态，等达到某一条件解禁的方法\n\n让他动态绑定一个变量，先让这个变量的值为true，等达到条件之后把值改为false即可\n\n## 通过id，找到对应的下标\n\n```js\n let index = this.list.findIndex(obj=>obj.id === id)\n```\n\n  ps:其中，list是一个数组，数组的每一个元素都是对象，list就是这个数组的数组名，在实际应用中改一下就可以了\n\n## 数组元素累加的函数——reduce\n\nhttps://www.runoob.com/jsref/jsref-reduce.html\n\n详见BuyBook.vue里面的计算属性\n\n```\ncomputed:{\n    totalNum(){\n      return this.fruits.reduce((sum,obj)=>{\n         sum+=Number(obj.num);\n         return sum;\n      },0)\n    }\n  }\n```\n\n注意一下：这里一定要记得加初值0，不然出bug，认真的。然后加数字最好，Number强制类型转换一下，不然也会按字符串处理\n\n## 收集复选框对应值的办法\n\n即选中/取消复选框后如何把他对应的值获取到。\n\n首先要:value = \"值\"，先绑定他对应的值，其次用v-model去收集\n\n注意，v-model的值必须是一个数组才能实现收集到复选框里面的值。\n\n## 动态绑定class\n\nhttps://blog.csdn.net/qq_43077894/article/details/83544399\n\n## 如何完美的画一个带边框的表格\n\n```css\n\n.tab1{\n    width: 600px;\n    text-align: center;\n    min-height: 25px;\n    line-height: 25px;\n    border-collapse: collapse;\n    padding: 2px;\n    table-layout:fixed;//这个是为了表格不因为数据变化而变形\n}\n.tab1,.tab1 tr th,.tab1 tr td{\n    border: 1px solid black;\n}\n```\n\n## 表格合并单元格\n\n<tr  colspan=\"6\">合计：{{total}}</tr>\n\n## 产生随机颜色\n\n```js\ngetRandColor(){\n            let r = Math.floor(Math.random()*256);\n            let g = Math.floor(Math.random()*256);\n            let b = Math.floor(Math.random()*256);\n            return `rgb(${r},${g},${b})`\n        },\n```\n\n## 对表格实现增删查改\n\n详见 Student.vue\n\n## 将代码上传到gitee\n\nhttps://blog.csdn.net/weixin_44829930/article/details/111635154\n\n其中第四步不要执行，不然报错\n\n对于不是第一次上传的仓库。第一步不需要。在执行最后一步直接要先执行```git pull --rebase origin master```，不然会报错。\n\n##  Duplicate keys detected: '0'. This may cause an update error.解决方案\n\n这个是因为同一个template里面用了两个一模一样的v-for，绑了同一个key导致的，把其中一个key改掉就可以了\n\nhttps://www.bbsmax.com/A/nAJvpRLQdr/\n\n## 什么时候用计算属性的完整写法\n\n当页面或者其他地方给计算属性赋予1个值的时候\n\n写法：\n\n```\n//没用完整写法是这么写的\nisAll(){\n           return this.things.every(obj=>{\n                return obj.test === true;\n            })\n        }\n```\n\n```\n//完整版呢写法这样写，其中那个set和get是固定的不能改\nisAll:{\n            set(val){},\n            get(){\n                return this.things.every(obj=>{\n                return obj.test === true;\n            })\n            }\n        }\n```\n\n## 实现复选框的选中和全选\n\n详见Shop.vue\n\n## 单行文本溢出\n\n```css\nwhite-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n```\n\n","source":"_posts/经验篇.md","raw":"---\ntitle: zhanhu的前端经验\ndescription: 一些练习里面的得到的经验\ndate: 2022-10-4 17:18:24\ntags: \n  - 经验\n  - vue2\n  - 前端\ncategories: 经验\ntop_img: \"../image/无风险01.jpg\"\ncover: \"../image/无风险01.jpg\"\n\n---\n\n# 经验篇\n\n<div style=\"text-align: right\"> ——zhanhu的前端经验 </div>\n\n备注：本文章所有的详见桌面冲啊里面的demo1\n已将项目源码上传至gitee，详见vue2-practice\n\n视频来源：https://www.bilibili.com/video/BV1tA411P7pQ?p=23\n\n## 生成随机数的方法\n\n```js\ngetRand(min,max){\n   return Math.floor(Math.random()*(max-min+1)+min)\n  }\n//还可以这么写\nMath.floor(Math.random()*100)\n//这个表示1-100\n```\n\n## 控制显示与隐藏的方法\n\nv-show = \"msg\"\n\n其中msg是一个布尔值，默认为false，即不显示。\n\n然后通过方法改变msg的值\n\n```js\nchange(){\n\n      if(this.msg === true){\n\n        this.msg = false;\n\n      }\n\n      else{\n\n        this.msg = true;\n\n      }\n```\n\n## 使用less的方法\n\n首先要安装less和less-loadedr\n\n```\nnpm install less less-loader --save-dev\n```\n\n然后在style中写上```<style lang=\"less\">```\n\n## 改变鼠标形状\n```\ncursor:pointer;\n```\n可能的值：见下方链接\n\nhttps://www.w3school.com.cn/cssref/pr_class_cursor.asp\n\n## 禁止选中文字\n\nhttps://www.cnblogs.com/yangchin9/p/10904805.html\n\n## 在html中写左尖括号和右尖括号的方法\n\n```\n&lt;   左尖括号\n&gt;   右尖括号，其中，右尖括号可以直接写>\n```\n\n## 合并边框\n\n```css\nborder-collapse: collapse;\n```\n\n## vue关闭eslint\n\nhttps://blog.csdn.net/qq_44378557/article/details/120990041\n\nhttps://blog.csdn.net/qq_44774831/article/details/117933127?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166083554716782388027031%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166083554716782388027031&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-117933127-null-null.142^v42^pc_rank_34,185^v2^control&utm_term=%E5%85%B3%E9%97%ADeslint&spm=1018.2226.3001.4187\n\n啊好长，csdn里面搜的\n\n## 清除定时器的注意点\n\n在同一个函数中清除定时器需要把clearInterval写在setInterval里面\n\n## 刚开始按钮处于禁用状态，等达到某一条件解禁的方法\n\n让他动态绑定一个变量，先让这个变量的值为true，等达到条件之后把值改为false即可\n\n## 通过id，找到对应的下标\n\n```js\n let index = this.list.findIndex(obj=>obj.id === id)\n```\n\n  ps:其中，list是一个数组，数组的每一个元素都是对象，list就是这个数组的数组名，在实际应用中改一下就可以了\n\n## 数组元素累加的函数——reduce\n\nhttps://www.runoob.com/jsref/jsref-reduce.html\n\n详见BuyBook.vue里面的计算属性\n\n```\ncomputed:{\n    totalNum(){\n      return this.fruits.reduce((sum,obj)=>{\n         sum+=Number(obj.num);\n         return sum;\n      },0)\n    }\n  }\n```\n\n注意一下：这里一定要记得加初值0，不然出bug，认真的。然后加数字最好，Number强制类型转换一下，不然也会按字符串处理\n\n## 收集复选框对应值的办法\n\n即选中/取消复选框后如何把他对应的值获取到。\n\n首先要:value = \"值\"，先绑定他对应的值，其次用v-model去收集\n\n注意，v-model的值必须是一个数组才能实现收集到复选框里面的值。\n\n## 动态绑定class\n\nhttps://blog.csdn.net/qq_43077894/article/details/83544399\n\n## 如何完美的画一个带边框的表格\n\n```css\n\n.tab1{\n    width: 600px;\n    text-align: center;\n    min-height: 25px;\n    line-height: 25px;\n    border-collapse: collapse;\n    padding: 2px;\n    table-layout:fixed;//这个是为了表格不因为数据变化而变形\n}\n.tab1,.tab1 tr th,.tab1 tr td{\n    border: 1px solid black;\n}\n```\n\n## 表格合并单元格\n\n<tr  colspan=\"6\">合计：{{total}}</tr>\n\n## 产生随机颜色\n\n```js\ngetRandColor(){\n            let r = Math.floor(Math.random()*256);\n            let g = Math.floor(Math.random()*256);\n            let b = Math.floor(Math.random()*256);\n            return `rgb(${r},${g},${b})`\n        },\n```\n\n## 对表格实现增删查改\n\n详见 Student.vue\n\n## 将代码上传到gitee\n\nhttps://blog.csdn.net/weixin_44829930/article/details/111635154\n\n其中第四步不要执行，不然报错\n\n对于不是第一次上传的仓库。第一步不需要。在执行最后一步直接要先执行```git pull --rebase origin master```，不然会报错。\n\n##  Duplicate keys detected: '0'. This may cause an update error.解决方案\n\n这个是因为同一个template里面用了两个一模一样的v-for，绑了同一个key导致的，把其中一个key改掉就可以了\n\nhttps://www.bbsmax.com/A/nAJvpRLQdr/\n\n## 什么时候用计算属性的完整写法\n\n当页面或者其他地方给计算属性赋予1个值的时候\n\n写法：\n\n```\n//没用完整写法是这么写的\nisAll(){\n           return this.things.every(obj=>{\n                return obj.test === true;\n            })\n        }\n```\n\n```\n//完整版呢写法这样写，其中那个set和get是固定的不能改\nisAll:{\n            set(val){},\n            get(){\n                return this.things.every(obj=>{\n                return obj.test === true;\n            })\n            }\n        }\n```\n\n## 实现复选框的选中和全选\n\n详见Shop.vue\n\n## 单行文本溢出\n\n```css\nwhite-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n```\n\n","slug":"经验篇","published":1,"updated":"2024-07-15T15:10:14.836Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyn4scid0010ecvzczvcdf02","content":"<h1 id=\"经验篇\"><a href=\"#经验篇\" class=\"headerlink\" title=\"经验篇\"></a>经验篇</h1><div style=\"text-align: right\"> ——zhanhu的前端经验 </div>\n\n<p>备注：本文章所有的详见桌面冲啊里面的demo1<br>已将项目源码上传至gitee，详见vue2-practice</p>\n<p>视频来源：<a href=\"https://www.bilibili.com/video/BV1tA411P7pQ?p=23\">https://www.bilibili.com/video/BV1tA411P7pQ?p=23</a></p>\n<h2 id=\"生成随机数的方法\"><a href=\"#生成随机数的方法\" class=\"headerlink\" title=\"生成随机数的方法\"></a>生成随机数的方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">getRand</span>(<span class=\"params\">min,max</span>)&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()*(max-min+<span class=\"number\">1</span>)+min)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">//还可以这么写</span></span><br><span class=\"line\"><span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()*<span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"comment\">//这个表示1-100</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"控制显示与隐藏的方法\"><a href=\"#控制显示与隐藏的方法\" class=\"headerlink\" title=\"控制显示与隐藏的方法\"></a>控制显示与隐藏的方法</h2><p>v-show = “msg”</p>\n<p>其中msg是一个布尔值，默认为false，即不显示。</p>\n<p>然后通过方法改变msg的值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">change</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">msg</span> === <span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">msg</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">msg</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用less的方法\"><a href=\"#使用less的方法\" class=\"headerlink\" title=\"使用less的方法\"></a>使用less的方法</h2><p>首先要安装less和less-loadedr</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install less less-loader --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>然后在style中写上<code>&lt;style lang=&quot;less&quot;&gt;</code></p>\n<h2 id=\"改变鼠标形状\"><a href=\"#改变鼠标形状\" class=\"headerlink\" title=\"改变鼠标形状\"></a>改变鼠标形状</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cursor:pointer;</span><br></pre></td></tr></table></figure>\n<p>可能的值：见下方链接</p>\n<p><a href=\"https://www.w3school.com.cn/cssref/pr_class_cursor.asp\">https://www.w3school.com.cn/cssref/pr_class_cursor.asp</a></p>\n<h2 id=\"禁止选中文字\"><a href=\"#禁止选中文字\" class=\"headerlink\" title=\"禁止选中文字\"></a>禁止选中文字</h2><p><a href=\"https://www.cnblogs.com/yangchin9/p/10904805.html\">https://www.cnblogs.com/yangchin9/p/10904805.html</a></p>\n<h2 id=\"在html中写左尖括号和右尖括号的方法\"><a href=\"#在html中写左尖括号和右尖括号的方法\" class=\"headerlink\" title=\"在html中写左尖括号和右尖括号的方法\"></a>在html中写左尖括号和右尖括号的方法</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;lt;   左尖括号</span><br><span class=\"line\">&amp;gt;   右尖括号，其中，右尖括号可以直接写&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"合并边框\"><a href=\"#合并边框\" class=\"headerlink\" title=\"合并边框\"></a>合并边框</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">border-collapse</span>: collapse;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"vue关闭eslint\"><a href=\"#vue关闭eslint\" class=\"headerlink\" title=\"vue关闭eslint\"></a>vue关闭eslint</h2><p><a href=\"https://blog.csdn.net/qq_44378557/article/details/120990041\">https://blog.csdn.net/qq_44378557/article/details/120990041</a></p>\n<p><a href=\"https://blog.csdn.net/qq_44774831/article/details/117933127?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166083554716782388027031%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=166083554716782388027031&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-117933127-null-null.142%5Ev42%5Epc_rank_34,185%5Ev2%5Econtrol&amp;utm_term=%E5%85%B3%E9%97%ADeslint&amp;spm=1018.2226.3001.4187\">https://blog.csdn.net/qq_44774831/article/details/117933127?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166083554716782388027031%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=166083554716782388027031&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-117933127-null-null.142^v42^pc_rank_34,185^v2^control&amp;utm_term=%E5%85%B3%E9%97%ADeslint&amp;spm=1018.2226.3001.4187</a></p>\n<p>啊好长，csdn里面搜的</p>\n<h2 id=\"清除定时器的注意点\"><a href=\"#清除定时器的注意点\" class=\"headerlink\" title=\"清除定时器的注意点\"></a>清除定时器的注意点</h2><p>在同一个函数中清除定时器需要把clearInterval写在setInterval里面</p>\n<h2 id=\"刚开始按钮处于禁用状态，等达到某一条件解禁的方法\"><a href=\"#刚开始按钮处于禁用状态，等达到某一条件解禁的方法\" class=\"headerlink\" title=\"刚开始按钮处于禁用状态，等达到某一条件解禁的方法\"></a>刚开始按钮处于禁用状态，等达到某一条件解禁的方法</h2><p>让他动态绑定一个变量，先让这个变量的值为true，等达到条件之后把值改为false即可</p>\n<h2 id=\"通过id，找到对应的下标\"><a href=\"#通过id，找到对应的下标\" class=\"headerlink\" title=\"通过id，找到对应的下标\"></a>通过id，找到对应的下标</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> index = <span class=\"variable language_\">this</span>.<span class=\"property\">list</span>.<span class=\"title function_\">findIndex</span>(<span class=\"function\"><span class=\"params\">obj</span>=&gt;</span>obj.<span class=\"property\">id</span> === id)</span><br></pre></td></tr></table></figure>\n\n<p>  ps:其中，list是一个数组，数组的每一个元素都是对象，list就是这个数组的数组名，在实际应用中改一下就可以了</p>\n<h2 id=\"数组元素累加的函数——reduce\"><a href=\"#数组元素累加的函数——reduce\" class=\"headerlink\" title=\"数组元素累加的函数——reduce\"></a>数组元素累加的函数——reduce</h2><p><a href=\"https://www.runoob.com/jsref/jsref-reduce.html\">https://www.runoob.com/jsref/jsref-reduce.html</a></p>\n<p>详见BuyBook.vue里面的计算属性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed:&#123;</span><br><span class=\"line\">    totalNum()&#123;</span><br><span class=\"line\">      return this.fruits.reduce((sum,obj)=&gt;&#123;</span><br><span class=\"line\">         sum+=Number(obj.num);</span><br><span class=\"line\">         return sum;</span><br><span class=\"line\">      &#125;,0)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意一下：这里一定要记得加初值0，不然出bug，认真的。然后加数字最好，Number强制类型转换一下，不然也会按字符串处理</p>\n<h2 id=\"收集复选框对应值的办法\"><a href=\"#收集复选框对应值的办法\" class=\"headerlink\" title=\"收集复选框对应值的办法\"></a>收集复选框对应值的办法</h2><p>即选中/取消复选框后如何把他对应的值获取到。</p>\n<p>首先要:value = “值”，先绑定他对应的值，其次用v-model去收集</p>\n<p>注意，v-model的值必须是一个数组才能实现收集到复选框里面的值。</p>\n<h2 id=\"动态绑定class\"><a href=\"#动态绑定class\" class=\"headerlink\" title=\"动态绑定class\"></a>动态绑定class</h2><p><a href=\"https://blog.csdn.net/qq_43077894/article/details/83544399\">https://blog.csdn.net/qq_43077894/article/details/83544399</a></p>\n<h2 id=\"如何完美的画一个带边框的表格\"><a href=\"#如何完美的画一个带边框的表格\" class=\"headerlink\" title=\"如何完美的画一个带边框的表格\"></a>如何完美的画一个带边框的表格</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.tab1</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">min-height</span>: <span class=\"number\">25px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">25px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-collapse</span>: collapse;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">table-layout</span>:fixed;//这个是为了表格不因为数据变化而变形</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.tab1</span>,<span class=\"selector-class\">.tab1</span> <span class=\"selector-tag\">tr</span> <span class=\"selector-tag\">th</span>,<span class=\"selector-class\">.tab1</span> <span class=\"selector-tag\">tr</span> <span class=\"selector-tag\">td</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid black;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"表格合并单元格\"><a href=\"#表格合并单元格\" class=\"headerlink\" title=\"表格合并单元格\"></a>表格合并单元格</h2><tr  colspan=\"6\">合计：</tr>\n\n<h2 id=\"产生随机颜色\"><a href=\"#产生随机颜色\" class=\"headerlink\" title=\"产生随机颜色\"></a>产生随机颜色</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">getRandColor</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> r = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()*<span class=\"number\">256</span>);</span><br><span class=\"line\">            <span class=\"keyword\">let</span> g = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()*<span class=\"number\">256</span>);</span><br><span class=\"line\">            <span class=\"keyword\">let</span> b = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()*<span class=\"number\">256</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">`rgb(<span class=\"subst\">$&#123;r&#125;</span>,<span class=\"subst\">$&#123;g&#125;</span>,<span class=\"subst\">$&#123;b&#125;</span>)`</span></span><br><span class=\"line\">        &#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对表格实现增删查改\"><a href=\"#对表格实现增删查改\" class=\"headerlink\" title=\"对表格实现增删查改\"></a>对表格实现增删查改</h2><p>详见 Student.vue</p>\n<h2 id=\"将代码上传到gitee\"><a href=\"#将代码上传到gitee\" class=\"headerlink\" title=\"将代码上传到gitee\"></a>将代码上传到gitee</h2><p><a href=\"https://blog.csdn.net/weixin_44829930/article/details/111635154\">https://blog.csdn.net/weixin_44829930/article/details/111635154</a></p>\n<p>其中第四步不要执行，不然报错</p>\n<p>对于不是第一次上传的仓库。第一步不需要。在执行最后一步直接要先执行<code>git pull --rebase origin master</code>，不然会报错。</p>\n<h2 id=\"Duplicate-keys-detected-‘0’-This-may-cause-an-update-error-解决方案\"><a href=\"#Duplicate-keys-detected-‘0’-This-may-cause-an-update-error-解决方案\" class=\"headerlink\" title=\"Duplicate keys detected: ‘0’. This may cause an update error.解决方案\"></a>Duplicate keys detected: ‘0’. This may cause an update error.解决方案</h2><p>这个是因为同一个template里面用了两个一模一样的v-for，绑了同一个key导致的，把其中一个key改掉就可以了</p>\n<p><a href=\"https://www.bbsmax.com/A/nAJvpRLQdr/\">https://www.bbsmax.com/A/nAJvpRLQdr/</a></p>\n<h2 id=\"什么时候用计算属性的完整写法\"><a href=\"#什么时候用计算属性的完整写法\" class=\"headerlink\" title=\"什么时候用计算属性的完整写法\"></a>什么时候用计算属性的完整写法</h2><p>当页面或者其他地方给计算属性赋予1个值的时候</p>\n<p>写法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//没用完整写法是这么写的</span><br><span class=\"line\">isAll()&#123;</span><br><span class=\"line\">           return this.things.every(obj=&gt;&#123;</span><br><span class=\"line\">                return obj.test === true;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//完整版呢写法这样写，其中那个set和get是固定的不能改</span><br><span class=\"line\">isAll:&#123;</span><br><span class=\"line\">            set(val)&#123;&#125;,</span><br><span class=\"line\">            get()&#123;</span><br><span class=\"line\">                return this.things.every(obj=&gt;&#123;</span><br><span class=\"line\">                return obj.test === true;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实现复选框的选中和全选\"><a href=\"#实现复选框的选中和全选\" class=\"headerlink\" title=\"实现复选框的选中和全选\"></a>实现复选框的选中和全选</h2><p>详见Shop.vue</p>\n<h2 id=\"单行文本溢出\"><a href=\"#单行文本溢出\" class=\"headerlink\" title=\"单行文本溢出\"></a>单行文本溢出</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"经验篇\"><a href=\"#经验篇\" class=\"headerlink\" title=\"经验篇\"></a>经验篇</h1><div style=\"text-align: right\"> ——zhanhu的前端经验 </div>\n\n<p>备注：本文章所有的详见桌面冲啊里面的demo1<br>已将项目源码上传至gitee，详见vue2-practice</p>\n<p>视频来源：<a href=\"https://www.bilibili.com/video/BV1tA411P7pQ?p=23\">https://www.bilibili.com/video/BV1tA411P7pQ?p=23</a></p>\n<h2 id=\"生成随机数的方法\"><a href=\"#生成随机数的方法\" class=\"headerlink\" title=\"生成随机数的方法\"></a>生成随机数的方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">getRand</span>(<span class=\"params\">min,max</span>)&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()*(max-min+<span class=\"number\">1</span>)+min)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">//还可以这么写</span></span><br><span class=\"line\"><span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()*<span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"comment\">//这个表示1-100</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"控制显示与隐藏的方法\"><a href=\"#控制显示与隐藏的方法\" class=\"headerlink\" title=\"控制显示与隐藏的方法\"></a>控制显示与隐藏的方法</h2><p>v-show = “msg”</p>\n<p>其中msg是一个布尔值，默认为false，即不显示。</p>\n<p>然后通过方法改变msg的值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">change</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">msg</span> === <span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">msg</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">msg</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用less的方法\"><a href=\"#使用less的方法\" class=\"headerlink\" title=\"使用less的方法\"></a>使用less的方法</h2><p>首先要安装less和less-loadedr</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install less less-loader --save-dev</span><br></pre></td></tr></table></figure>\n\n<p>然后在style中写上<code>&lt;style lang=&quot;less&quot;&gt;</code></p>\n<h2 id=\"改变鼠标形状\"><a href=\"#改变鼠标形状\" class=\"headerlink\" title=\"改变鼠标形状\"></a>改变鼠标形状</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cursor:pointer;</span><br></pre></td></tr></table></figure>\n<p>可能的值：见下方链接</p>\n<p><a href=\"https://www.w3school.com.cn/cssref/pr_class_cursor.asp\">https://www.w3school.com.cn/cssref/pr_class_cursor.asp</a></p>\n<h2 id=\"禁止选中文字\"><a href=\"#禁止选中文字\" class=\"headerlink\" title=\"禁止选中文字\"></a>禁止选中文字</h2><p><a href=\"https://www.cnblogs.com/yangchin9/p/10904805.html\">https://www.cnblogs.com/yangchin9/p/10904805.html</a></p>\n<h2 id=\"在html中写左尖括号和右尖括号的方法\"><a href=\"#在html中写左尖括号和右尖括号的方法\" class=\"headerlink\" title=\"在html中写左尖括号和右尖括号的方法\"></a>在html中写左尖括号和右尖括号的方法</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;lt;   左尖括号</span><br><span class=\"line\">&amp;gt;   右尖括号，其中，右尖括号可以直接写&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"合并边框\"><a href=\"#合并边框\" class=\"headerlink\" title=\"合并边框\"></a>合并边框</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">border-collapse</span>: collapse;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"vue关闭eslint\"><a href=\"#vue关闭eslint\" class=\"headerlink\" title=\"vue关闭eslint\"></a>vue关闭eslint</h2><p><a href=\"https://blog.csdn.net/qq_44378557/article/details/120990041\">https://blog.csdn.net/qq_44378557/article/details/120990041</a></p>\n<p><a href=\"https://blog.csdn.net/qq_44774831/article/details/117933127?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166083554716782388027031%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=166083554716782388027031&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-117933127-null-null.142%5Ev42%5Epc_rank_34,185%5Ev2%5Econtrol&amp;utm_term=%E5%85%B3%E9%97%ADeslint&amp;spm=1018.2226.3001.4187\">https://blog.csdn.net/qq_44774831/article/details/117933127?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166083554716782388027031%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=166083554716782388027031&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-117933127-null-null.142^v42^pc_rank_34,185^v2^control&amp;utm_term=%E5%85%B3%E9%97%ADeslint&amp;spm=1018.2226.3001.4187</a></p>\n<p>啊好长，csdn里面搜的</p>\n<h2 id=\"清除定时器的注意点\"><a href=\"#清除定时器的注意点\" class=\"headerlink\" title=\"清除定时器的注意点\"></a>清除定时器的注意点</h2><p>在同一个函数中清除定时器需要把clearInterval写在setInterval里面</p>\n<h2 id=\"刚开始按钮处于禁用状态，等达到某一条件解禁的方法\"><a href=\"#刚开始按钮处于禁用状态，等达到某一条件解禁的方法\" class=\"headerlink\" title=\"刚开始按钮处于禁用状态，等达到某一条件解禁的方法\"></a>刚开始按钮处于禁用状态，等达到某一条件解禁的方法</h2><p>让他动态绑定一个变量，先让这个变量的值为true，等达到条件之后把值改为false即可</p>\n<h2 id=\"通过id，找到对应的下标\"><a href=\"#通过id，找到对应的下标\" class=\"headerlink\" title=\"通过id，找到对应的下标\"></a>通过id，找到对应的下标</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> index = <span class=\"variable language_\">this</span>.<span class=\"property\">list</span>.<span class=\"title function_\">findIndex</span>(<span class=\"function\"><span class=\"params\">obj</span>=&gt;</span>obj.<span class=\"property\">id</span> === id)</span><br></pre></td></tr></table></figure>\n\n<p>  ps:其中，list是一个数组，数组的每一个元素都是对象，list就是这个数组的数组名，在实际应用中改一下就可以了</p>\n<h2 id=\"数组元素累加的函数——reduce\"><a href=\"#数组元素累加的函数——reduce\" class=\"headerlink\" title=\"数组元素累加的函数——reduce\"></a>数组元素累加的函数——reduce</h2><p><a href=\"https://www.runoob.com/jsref/jsref-reduce.html\">https://www.runoob.com/jsref/jsref-reduce.html</a></p>\n<p>详见BuyBook.vue里面的计算属性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed:&#123;</span><br><span class=\"line\">    totalNum()&#123;</span><br><span class=\"line\">      return this.fruits.reduce((sum,obj)=&gt;&#123;</span><br><span class=\"line\">         sum+=Number(obj.num);</span><br><span class=\"line\">         return sum;</span><br><span class=\"line\">      &#125;,0)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意一下：这里一定要记得加初值0，不然出bug，认真的。然后加数字最好，Number强制类型转换一下，不然也会按字符串处理</p>\n<h2 id=\"收集复选框对应值的办法\"><a href=\"#收集复选框对应值的办法\" class=\"headerlink\" title=\"收集复选框对应值的办法\"></a>收集复选框对应值的办法</h2><p>即选中/取消复选框后如何把他对应的值获取到。</p>\n<p>首先要:value = “值”，先绑定他对应的值，其次用v-model去收集</p>\n<p>注意，v-model的值必须是一个数组才能实现收集到复选框里面的值。</p>\n<h2 id=\"动态绑定class\"><a href=\"#动态绑定class\" class=\"headerlink\" title=\"动态绑定class\"></a>动态绑定class</h2><p><a href=\"https://blog.csdn.net/qq_43077894/article/details/83544399\">https://blog.csdn.net/qq_43077894/article/details/83544399</a></p>\n<h2 id=\"如何完美的画一个带边框的表格\"><a href=\"#如何完美的画一个带边框的表格\" class=\"headerlink\" title=\"如何完美的画一个带边框的表格\"></a>如何完美的画一个带边框的表格</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.tab1</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">    <span class=\"attribute\">min-height</span>: <span class=\"number\">25px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">25px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-collapse</span>: collapse;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">table-layout</span>:fixed;//这个是为了表格不因为数据变化而变形</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.tab1</span>,<span class=\"selector-class\">.tab1</span> <span class=\"selector-tag\">tr</span> <span class=\"selector-tag\">th</span>,<span class=\"selector-class\">.tab1</span> <span class=\"selector-tag\">tr</span> <span class=\"selector-tag\">td</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid black;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"表格合并单元格\"><a href=\"#表格合并单元格\" class=\"headerlink\" title=\"表格合并单元格\"></a>表格合并单元格</h2><tr  colspan=\"6\">合计：</tr>\n\n<h2 id=\"产生随机颜色\"><a href=\"#产生随机颜色\" class=\"headerlink\" title=\"产生随机颜色\"></a>产生随机颜色</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">getRandColor</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> r = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()*<span class=\"number\">256</span>);</span><br><span class=\"line\">            <span class=\"keyword\">let</span> g = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()*<span class=\"number\">256</span>);</span><br><span class=\"line\">            <span class=\"keyword\">let</span> b = <span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()*<span class=\"number\">256</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">`rgb(<span class=\"subst\">$&#123;r&#125;</span>,<span class=\"subst\">$&#123;g&#125;</span>,<span class=\"subst\">$&#123;b&#125;</span>)`</span></span><br><span class=\"line\">        &#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对表格实现增删查改\"><a href=\"#对表格实现增删查改\" class=\"headerlink\" title=\"对表格实现增删查改\"></a>对表格实现增删查改</h2><p>详见 Student.vue</p>\n<h2 id=\"将代码上传到gitee\"><a href=\"#将代码上传到gitee\" class=\"headerlink\" title=\"将代码上传到gitee\"></a>将代码上传到gitee</h2><p><a href=\"https://blog.csdn.net/weixin_44829930/article/details/111635154\">https://blog.csdn.net/weixin_44829930/article/details/111635154</a></p>\n<p>其中第四步不要执行，不然报错</p>\n<p>对于不是第一次上传的仓库。第一步不需要。在执行最后一步直接要先执行<code>git pull --rebase origin master</code>，不然会报错。</p>\n<h2 id=\"Duplicate-keys-detected-‘0’-This-may-cause-an-update-error-解决方案\"><a href=\"#Duplicate-keys-detected-‘0’-This-may-cause-an-update-error-解决方案\" class=\"headerlink\" title=\"Duplicate keys detected: ‘0’. This may cause an update error.解决方案\"></a>Duplicate keys detected: ‘0’. This may cause an update error.解决方案</h2><p>这个是因为同一个template里面用了两个一模一样的v-for，绑了同一个key导致的，把其中一个key改掉就可以了</p>\n<p><a href=\"https://www.bbsmax.com/A/nAJvpRLQdr/\">https://www.bbsmax.com/A/nAJvpRLQdr/</a></p>\n<h2 id=\"什么时候用计算属性的完整写法\"><a href=\"#什么时候用计算属性的完整写法\" class=\"headerlink\" title=\"什么时候用计算属性的完整写法\"></a>什么时候用计算属性的完整写法</h2><p>当页面或者其他地方给计算属性赋予1个值的时候</p>\n<p>写法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//没用完整写法是这么写的</span><br><span class=\"line\">isAll()&#123;</span><br><span class=\"line\">           return this.things.every(obj=&gt;&#123;</span><br><span class=\"line\">                return obj.test === true;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//完整版呢写法这样写，其中那个set和get是固定的不能改</span><br><span class=\"line\">isAll:&#123;</span><br><span class=\"line\">            set(val)&#123;&#125;,</span><br><span class=\"line\">            get()&#123;</span><br><span class=\"line\">                return this.things.every(obj=&gt;&#123;</span><br><span class=\"line\">                return obj.test === true;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实现复选框的选中和全选\"><a href=\"#实现复选框的选中和全选\" class=\"headerlink\" title=\"实现复选框的选中和全选\"></a>实现复选框的选中和全选</h2><p>详见Shop.vue</p>\n<h2 id=\"单行文本溢出\"><a href=\"#单行文本溢出\" class=\"headerlink\" title=\"单行文本溢出\"></a>单行文本溢出</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"浅谈第一次用node写接口遇到的坑","date":"2022-09-14T07:04:54.000Z","top_img":"../image/无风险02.jpg","cover":"../image/无风险02.jpg","description":"node.js写接口遇到的坑","_content":"\n这几天一直在用node.js写接口，一方面是为了理解前后端交互的过程，一方面是为了了解后端的代码逻辑和数据库交互过程，由于我的MySQL用到的工具DataGrip过期了，所以只能用SqlServer做数据库。。。巨坑由此接踵而来\n\n首先是数据库连接与读取数据，笔者之前用过Python连接过SqlServer，也了解过mysql与数据库的连接与查询，可遇到node连接SqlServer却一直无法成功，上网查了好几个版本的代码终究还是无法解决。。。刚开始是连不上数据库，后来是由于SqlServer的读取数据语法跟mysql有点区别，所以用mysql的语法一直走不通，各种报错，经过一夜的不懈尝试，终于成功了，成功版本的代码如下：\n### 连接数据库\n```js\n\nlet sql = require('mssql');\n\nlet dbConfig = {\n  user: '用户名（默认sa）',\n  password: '密码',\n  server: 'localhost',\n  database: '数据库名',\n  port: 1433,\n  pool: {\n      max: 10,\n      min: 0,\n      idleTimeoutMillis: 60000\n  },\n  options: {\n    trustedConnection: true,\n    encrypt: false,\n    enableArithAbort: true,\n    trustServerCertificate: false,\n\n  },\n};\n```\n### 使用数据库\n这边以注册为例分享可以成功使用的代码\n```js\nconst { sql, dbConfig } = require('../db/index')\n\n// 注册的处理函数\nexports.register = (req, res) => {\n    // 获取客户端提交给服务器的用户信息\n    const userinfo = req.body\n\n    // 判断用户名和密码是否为空\n    if (!userinfo.username || !userinfo.password) {\n        return res.send({ status: 1, message: '用户名或密码不能为空' })\n    }\n    // 检验用户名是否被占用\n\n    sql.connect(dbConfig, function (err) {  //连接数据库\n        if (err) {\n            console.log('连接数据库失败');\n            return;\n        } else {\n            var request = new sql.Request();\n            var UserName = userinfo.username\n            var password = userinfo.password\n            var sqlstr = \"select * from users where username='\" + UserName + \"'\"\n            \n            request.query(sqlstr, function (err, results) { //执行查询语句\t\t\t\n                if (err) {\n                    console.log('查询失败：' + err);\n                    return res.send({ status: 1, message: err.message })\n                }\n               \n                if (results.recordset.length > 0) {\n                    return res.send({ status: 1, message: '用户名被占用，请重新输入用户名' })\n                }\n            \n                // 定义插入新用户的SQL语句\n                const sqlstr2 = \"insert into users (username,password) values ('\"+ UserName + \"','\"+ password +\"'\"+\")\"\n                request.query(sqlstr2, (err, results) => {\n                    console.log(results);\n                    // 判断SQL语句是否执行成功\n                    if (err) return res.send({ status: 1, message: err.message })\n                    // 判断影响行数是否为1\n                    if (results.rowsAffected[0] !== 1) return res.send({ status: 1, message: '注册用户失败，请稍后再试' })\n                    // 注册成功\n                    res.send({ status: 0, message: '注册成功' })\n                })\n\n\n            });\n            sql.end;\n        }\n    })\n   \n}\n```\n这样，这个连接问题就解决了，但是随着而来的是另一个问题：<strong>SQL注入</strong>\n### 何为SQL注入\nSQL注入是一种web安全漏洞，主要形成原因是在数据库交互中，传入的数据拼接到SQL语句中后，被当做SQL语句的一部分执行，从而导致数据库受损。\n\n在我上述代码中，产生这种现象的原因就是因为我SQL语句写的时候用的是拼接字符串的形式，且我前面没做任何校验就把这些数据送进SQL语句执行。\n最终有大佬建议我用 sequelize 来做 ORM 库，不要轻易的做拼接SQL语句。\nhttps://sequelize.org/docs/v6/core-concepts/model-querying-basics/#the-basics\n\n这个问题之后，又迎来了下一个问题，这次不是接口的错，是前端传递参数的时候格式不正确\n![](../image/node01.png)\n![](../image/node02.jpg)\n![](../image/node03.jpg)\n这是我的原始代码，\n前端接口写的```this.form``` 传递的是我data里面收集到的表单对象，通过log一下这个和看了一下浏览器发的请求信息发现了不对劲\n![this.form的数据](../image/node04.png)\n![发请求的数据](../image/node05.png)\n在第二张照片中可以看出，在前端传递数据的时候就已经把他变成键了\n最后的解决方案是：把```this.form```改成```JSON.parse(JSON.stringify(this.form))```\n\n\n最后的最后，感谢在遇到问题的时候那些为我解答和指出漏洞的陌生人们！！！\n\n\n","source":"_posts/浅谈第一次用node写接口遇到的坑.md","raw":"---\ntitle: 浅谈第一次用node写接口遇到的坑\ndate: 2022-09-14 15:04:54\ntags: \n  - 经验\n  - node.js\ncategories: 经验\ntop_img: \"../image/无风险02.jpg\"\ncover: \"../image/无风险02.jpg\"\ndescription: node.js写接口遇到的坑\n---\n\n这几天一直在用node.js写接口，一方面是为了理解前后端交互的过程，一方面是为了了解后端的代码逻辑和数据库交互过程，由于我的MySQL用到的工具DataGrip过期了，所以只能用SqlServer做数据库。。。巨坑由此接踵而来\n\n首先是数据库连接与读取数据，笔者之前用过Python连接过SqlServer，也了解过mysql与数据库的连接与查询，可遇到node连接SqlServer却一直无法成功，上网查了好几个版本的代码终究还是无法解决。。。刚开始是连不上数据库，后来是由于SqlServer的读取数据语法跟mysql有点区别，所以用mysql的语法一直走不通，各种报错，经过一夜的不懈尝试，终于成功了，成功版本的代码如下：\n### 连接数据库\n```js\n\nlet sql = require('mssql');\n\nlet dbConfig = {\n  user: '用户名（默认sa）',\n  password: '密码',\n  server: 'localhost',\n  database: '数据库名',\n  port: 1433,\n  pool: {\n      max: 10,\n      min: 0,\n      idleTimeoutMillis: 60000\n  },\n  options: {\n    trustedConnection: true,\n    encrypt: false,\n    enableArithAbort: true,\n    trustServerCertificate: false,\n\n  },\n};\n```\n### 使用数据库\n这边以注册为例分享可以成功使用的代码\n```js\nconst { sql, dbConfig } = require('../db/index')\n\n// 注册的处理函数\nexports.register = (req, res) => {\n    // 获取客户端提交给服务器的用户信息\n    const userinfo = req.body\n\n    // 判断用户名和密码是否为空\n    if (!userinfo.username || !userinfo.password) {\n        return res.send({ status: 1, message: '用户名或密码不能为空' })\n    }\n    // 检验用户名是否被占用\n\n    sql.connect(dbConfig, function (err) {  //连接数据库\n        if (err) {\n            console.log('连接数据库失败');\n            return;\n        } else {\n            var request = new sql.Request();\n            var UserName = userinfo.username\n            var password = userinfo.password\n            var sqlstr = \"select * from users where username='\" + UserName + \"'\"\n            \n            request.query(sqlstr, function (err, results) { //执行查询语句\t\t\t\n                if (err) {\n                    console.log('查询失败：' + err);\n                    return res.send({ status: 1, message: err.message })\n                }\n               \n                if (results.recordset.length > 0) {\n                    return res.send({ status: 1, message: '用户名被占用，请重新输入用户名' })\n                }\n            \n                // 定义插入新用户的SQL语句\n                const sqlstr2 = \"insert into users (username,password) values ('\"+ UserName + \"','\"+ password +\"'\"+\")\"\n                request.query(sqlstr2, (err, results) => {\n                    console.log(results);\n                    // 判断SQL语句是否执行成功\n                    if (err) return res.send({ status: 1, message: err.message })\n                    // 判断影响行数是否为1\n                    if (results.rowsAffected[0] !== 1) return res.send({ status: 1, message: '注册用户失败，请稍后再试' })\n                    // 注册成功\n                    res.send({ status: 0, message: '注册成功' })\n                })\n\n\n            });\n            sql.end;\n        }\n    })\n   \n}\n```\n这样，这个连接问题就解决了，但是随着而来的是另一个问题：<strong>SQL注入</strong>\n### 何为SQL注入\nSQL注入是一种web安全漏洞，主要形成原因是在数据库交互中，传入的数据拼接到SQL语句中后，被当做SQL语句的一部分执行，从而导致数据库受损。\n\n在我上述代码中，产生这种现象的原因就是因为我SQL语句写的时候用的是拼接字符串的形式，且我前面没做任何校验就把这些数据送进SQL语句执行。\n最终有大佬建议我用 sequelize 来做 ORM 库，不要轻易的做拼接SQL语句。\nhttps://sequelize.org/docs/v6/core-concepts/model-querying-basics/#the-basics\n\n这个问题之后，又迎来了下一个问题，这次不是接口的错，是前端传递参数的时候格式不正确\n![](../image/node01.png)\n![](../image/node02.jpg)\n![](../image/node03.jpg)\n这是我的原始代码，\n前端接口写的```this.form``` 传递的是我data里面收集到的表单对象，通过log一下这个和看了一下浏览器发的请求信息发现了不对劲\n![this.form的数据](../image/node04.png)\n![发请求的数据](../image/node05.png)\n在第二张照片中可以看出，在前端传递数据的时候就已经把他变成键了\n最后的解决方案是：把```this.form```改成```JSON.parse(JSON.stringify(this.form))```\n\n\n最后的最后，感谢在遇到问题的时候那些为我解答和指出漏洞的陌生人们！！！\n\n\n","slug":"浅谈第一次用node写接口遇到的坑","published":1,"updated":"2022-10-04T12:49:09.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clyn4scif0014ecvz8wk6727e","content":"<p>这几天一直在用node.js写接口，一方面是为了理解前后端交互的过程，一方面是为了了解后端的代码逻辑和数据库交互过程，由于我的MySQL用到的工具DataGrip过期了，所以只能用SqlServer做数据库。。。巨坑由此接踵而来</p>\n<p>首先是数据库连接与读取数据，笔者之前用过Python连接过SqlServer，也了解过mysql与数据库的连接与查询，可遇到node连接SqlServer却一直无法成功，上网查了好几个版本的代码终究还是无法解决。。。刚开始是连不上数据库，后来是由于SqlServer的读取数据语法跟mysql有点区别，所以用mysql的语法一直走不通，各种报错，经过一夜的不懈尝试，终于成功了，成功版本的代码如下：</p>\n<h3 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> sql = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mssql&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> dbConfig = &#123;</span><br><span class=\"line\">  <span class=\"attr\">user</span>: <span class=\"string\">&#x27;用户名（默认sa）&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">password</span>: <span class=\"string\">&#x27;密码&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">server</span>: <span class=\"string\">&#x27;localhost&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">database</span>: <span class=\"string\">&#x27;数据库名&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">port</span>: <span class=\"number\">1433</span>,</span><br><span class=\"line\">  <span class=\"attr\">pool</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">max</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">      <span class=\"attr\">min</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"attr\">idleTimeoutMillis</span>: <span class=\"number\">60000</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">trustedConnection</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">encrypt</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">enableArithAbort</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">trustServerCertificate</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用数据库\"><a href=\"#使用数据库\" class=\"headerlink\" title=\"使用数据库\"></a>使用数据库</h3><p>这边以注册为例分享可以成功使用的代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; sql, dbConfig &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../db/index&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注册的处理函数</span></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">register</span> = <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取客户端提交给服务器的用户信息</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> userinfo = req.<span class=\"property\">body</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断用户名和密码是否为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!userinfo.<span class=\"property\">username</span> || !userinfo.<span class=\"property\">password</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.<span class=\"title function_\">send</span>(&#123; <span class=\"attr\">status</span>: <span class=\"number\">1</span>, <span class=\"attr\">message</span>: <span class=\"string\">&#x27;用户名或密码不能为空&#x27;</span> &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 检验用户名是否被占用</span></span><br><span class=\"line\"></span><br><span class=\"line\">    sql.<span class=\"title function_\">connect</span>(dbConfig, <span class=\"keyword\">function</span> (<span class=\"params\">err</span>) &#123;  <span class=\"comment\">//连接数据库</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;连接数据库失败&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> request = <span class=\"keyword\">new</span> sql.<span class=\"title class_\">Request</span>();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> <span class=\"title class_\">UserName</span> = userinfo.<span class=\"property\">username</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> password = userinfo.<span class=\"property\">password</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> sqlstr = <span class=\"string\">&quot;select * from users where username=&#x27;&quot;</span> + <span class=\"title class_\">UserName</span> + <span class=\"string\">&quot;&#x27;&quot;</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            request.<span class=\"title function_\">query</span>(sqlstr, <span class=\"keyword\">function</span> (<span class=\"params\">err, results</span>) &#123; <span class=\"comment\">//执行查询语句\t\t\t</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;查询失败：&#x27;</span> + err);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> res.<span class=\"title function_\">send</span>(&#123; <span class=\"attr\">status</span>: <span class=\"number\">1</span>, <span class=\"attr\">message</span>: err.<span class=\"property\">message</span> &#125;)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">               </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (results.<span class=\"property\">recordset</span>.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> res.<span class=\"title function_\">send</span>(&#123; <span class=\"attr\">status</span>: <span class=\"number\">1</span>, <span class=\"attr\">message</span>: <span class=\"string\">&#x27;用户名被占用，请重新输入用户名&#x27;</span> &#125;)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">                <span class=\"comment\">// 定义插入新用户的SQL语句</span></span><br><span class=\"line\">                <span class=\"keyword\">const</span> sqlstr2 = <span class=\"string\">&quot;insert into users (username,password) values (&#x27;&quot;</span>+ <span class=\"title class_\">UserName</span> + <span class=\"string\">&quot;&#x27;,&#x27;&quot;</span>+ password +<span class=\"string\">&quot;&#x27;&quot;</span>+<span class=\"string\">&quot;)&quot;</span></span><br><span class=\"line\">                request.<span class=\"title function_\">query</span>(sqlstr2, <span class=\"function\">(<span class=\"params\">err, results</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(results);</span><br><span class=\"line\">                    <span class=\"comment\">// 判断SQL语句是否执行成功</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> res.<span class=\"title function_\">send</span>(&#123; <span class=\"attr\">status</span>: <span class=\"number\">1</span>, <span class=\"attr\">message</span>: err.<span class=\"property\">message</span> &#125;)</span><br><span class=\"line\">                    <span class=\"comment\">// 判断影响行数是否为1</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (results.<span class=\"property\">rowsAffected</span>[<span class=\"number\">0</span>] !== <span class=\"number\">1</span>) <span class=\"keyword\">return</span> res.<span class=\"title function_\">send</span>(&#123; <span class=\"attr\">status</span>: <span class=\"number\">1</span>, <span class=\"attr\">message</span>: <span class=\"string\">&#x27;注册用户失败，请稍后再试&#x27;</span> &#125;)</span><br><span class=\"line\">                    <span class=\"comment\">// 注册成功</span></span><br><span class=\"line\">                    res.<span class=\"title function_\">send</span>(&#123; <span class=\"attr\">status</span>: <span class=\"number\">0</span>, <span class=\"attr\">message</span>: <span class=\"string\">&#x27;注册成功&#x27;</span> &#125;)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            sql.<span class=\"property\">end</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样，这个连接问题就解决了，但是随着而来的是另一个问题：<strong>SQL注入</strong></p>\n<h3 id=\"何为SQL注入\"><a href=\"#何为SQL注入\" class=\"headerlink\" title=\"何为SQL注入\"></a>何为SQL注入</h3><p>SQL注入是一种web安全漏洞，主要形成原因是在数据库交互中，传入的数据拼接到SQL语句中后，被当做SQL语句的一部分执行，从而导致数据库受损。</p>\n<p>在我上述代码中，产生这种现象的原因就是因为我SQL语句写的时候用的是拼接字符串的形式，且我前面没做任何校验就把这些数据送进SQL语句执行。<br>最终有大佬建议我用 sequelize 来做 ORM 库，不要轻易的做拼接SQL语句。<br><a href=\"https://sequelize.org/docs/v6/core-concepts/model-querying-basics/#the-basics\">https://sequelize.org/docs/v6/core-concepts/model-querying-basics/#the-basics</a></p>\n<p>这个问题之后，又迎来了下一个问题，这次不是接口的错，是前端传递参数的时候格式不正确<br><img src=\"/../image/node01.png\"><br><img src=\"/../image/node02.jpg\"><br><img src=\"/../image/node03.jpg\"><br>这是我的原始代码，<br>前端接口写的<code>this.form</code> 传递的是我data里面收集到的表单对象，通过log一下这个和看了一下浏览器发的请求信息发现了不对劲<br><img src=\"/../image/node04.png\" alt=\"this.form的数据\"><br><img src=\"/../image/node05.png\" alt=\"发请求的数据\"><br>在第二张照片中可以看出，在前端传递数据的时候就已经把他变成键了<br>最后的解决方案是：把<code>this.form</code>改成<code>JSON.parse(JSON.stringify(this.form))</code></p>\n<p>最后的最后，感谢在遇到问题的时候那些为我解答和指出漏洞的陌生人们！！！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这几天一直在用node.js写接口，一方面是为了理解前后端交互的过程，一方面是为了了解后端的代码逻辑和数据库交互过程，由于我的MySQL用到的工具DataGrip过期了，所以只能用SqlServer做数据库。。。巨坑由此接踵而来</p>\n<p>首先是数据库连接与读取数据，笔者之前用过Python连接过SqlServer，也了解过mysql与数据库的连接与查询，可遇到node连接SqlServer却一直无法成功，上网查了好几个版本的代码终究还是无法解决。。。刚开始是连不上数据库，后来是由于SqlServer的读取数据语法跟mysql有点区别，所以用mysql的语法一直走不通，各种报错，经过一夜的不懈尝试，终于成功了，成功版本的代码如下：</p>\n<h3 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> sql = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mssql&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> dbConfig = &#123;</span><br><span class=\"line\">  <span class=\"attr\">user</span>: <span class=\"string\">&#x27;用户名（默认sa）&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">password</span>: <span class=\"string\">&#x27;密码&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">server</span>: <span class=\"string\">&#x27;localhost&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">database</span>: <span class=\"string\">&#x27;数据库名&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">port</span>: <span class=\"number\">1433</span>,</span><br><span class=\"line\">  <span class=\"attr\">pool</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">max</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">      <span class=\"attr\">min</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"attr\">idleTimeoutMillis</span>: <span class=\"number\">60000</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">trustedConnection</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">encrypt</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">enableArithAbort</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">trustServerCertificate</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用数据库\"><a href=\"#使用数据库\" class=\"headerlink\" title=\"使用数据库\"></a>使用数据库</h3><p>这边以注册为例分享可以成功使用的代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; sql, dbConfig &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;../db/index&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注册的处理函数</span></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">register</span> = <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取客户端提交给服务器的用户信息</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> userinfo = req.<span class=\"property\">body</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 判断用户名和密码是否为空</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!userinfo.<span class=\"property\">username</span> || !userinfo.<span class=\"property\">password</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.<span class=\"title function_\">send</span>(&#123; <span class=\"attr\">status</span>: <span class=\"number\">1</span>, <span class=\"attr\">message</span>: <span class=\"string\">&#x27;用户名或密码不能为空&#x27;</span> &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 检验用户名是否被占用</span></span><br><span class=\"line\"></span><br><span class=\"line\">    sql.<span class=\"title function_\">connect</span>(dbConfig, <span class=\"keyword\">function</span> (<span class=\"params\">err</span>) &#123;  <span class=\"comment\">//连接数据库</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;连接数据库失败&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> request = <span class=\"keyword\">new</span> sql.<span class=\"title class_\">Request</span>();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> <span class=\"title class_\">UserName</span> = userinfo.<span class=\"property\">username</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> password = userinfo.<span class=\"property\">password</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> sqlstr = <span class=\"string\">&quot;select * from users where username=&#x27;&quot;</span> + <span class=\"title class_\">UserName</span> + <span class=\"string\">&quot;&#x27;&quot;</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            request.<span class=\"title function_\">query</span>(sqlstr, <span class=\"keyword\">function</span> (<span class=\"params\">err, results</span>) &#123; <span class=\"comment\">//执行查询语句\t\t\t</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;查询失败：&#x27;</span> + err);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> res.<span class=\"title function_\">send</span>(&#123; <span class=\"attr\">status</span>: <span class=\"number\">1</span>, <span class=\"attr\">message</span>: err.<span class=\"property\">message</span> &#125;)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">               </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (results.<span class=\"property\">recordset</span>.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> res.<span class=\"title function_\">send</span>(&#123; <span class=\"attr\">status</span>: <span class=\"number\">1</span>, <span class=\"attr\">message</span>: <span class=\"string\">&#x27;用户名被占用，请重新输入用户名&#x27;</span> &#125;)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">                <span class=\"comment\">// 定义插入新用户的SQL语句</span></span><br><span class=\"line\">                <span class=\"keyword\">const</span> sqlstr2 = <span class=\"string\">&quot;insert into users (username,password) values (&#x27;&quot;</span>+ <span class=\"title class_\">UserName</span> + <span class=\"string\">&quot;&#x27;,&#x27;&quot;</span>+ password +<span class=\"string\">&quot;&#x27;&quot;</span>+<span class=\"string\">&quot;)&quot;</span></span><br><span class=\"line\">                request.<span class=\"title function_\">query</span>(sqlstr2, <span class=\"function\">(<span class=\"params\">err, results</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(results);</span><br><span class=\"line\">                    <span class=\"comment\">// 判断SQL语句是否执行成功</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> res.<span class=\"title function_\">send</span>(&#123; <span class=\"attr\">status</span>: <span class=\"number\">1</span>, <span class=\"attr\">message</span>: err.<span class=\"property\">message</span> &#125;)</span><br><span class=\"line\">                    <span class=\"comment\">// 判断影响行数是否为1</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (results.<span class=\"property\">rowsAffected</span>[<span class=\"number\">0</span>] !== <span class=\"number\">1</span>) <span class=\"keyword\">return</span> res.<span class=\"title function_\">send</span>(&#123; <span class=\"attr\">status</span>: <span class=\"number\">1</span>, <span class=\"attr\">message</span>: <span class=\"string\">&#x27;注册用户失败，请稍后再试&#x27;</span> &#125;)</span><br><span class=\"line\">                    <span class=\"comment\">// 注册成功</span></span><br><span class=\"line\">                    res.<span class=\"title function_\">send</span>(&#123; <span class=\"attr\">status</span>: <span class=\"number\">0</span>, <span class=\"attr\">message</span>: <span class=\"string\">&#x27;注册成功&#x27;</span> &#125;)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            sql.<span class=\"property\">end</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样，这个连接问题就解决了，但是随着而来的是另一个问题：<strong>SQL注入</strong></p>\n<h3 id=\"何为SQL注入\"><a href=\"#何为SQL注入\" class=\"headerlink\" title=\"何为SQL注入\"></a>何为SQL注入</h3><p>SQL注入是一种web安全漏洞，主要形成原因是在数据库交互中，传入的数据拼接到SQL语句中后，被当做SQL语句的一部分执行，从而导致数据库受损。</p>\n<p>在我上述代码中，产生这种现象的原因就是因为我SQL语句写的时候用的是拼接字符串的形式，且我前面没做任何校验就把这些数据送进SQL语句执行。<br>最终有大佬建议我用 sequelize 来做 ORM 库，不要轻易的做拼接SQL语句。<br><a href=\"https://sequelize.org/docs/v6/core-concepts/model-querying-basics/#the-basics\">https://sequelize.org/docs/v6/core-concepts/model-querying-basics/#the-basics</a></p>\n<p>这个问题之后，又迎来了下一个问题，这次不是接口的错，是前端传递参数的时候格式不正确<br><img src=\"/../image/node01.png\"><br><img src=\"/../image/node02.jpg\"><br><img src=\"/../image/node03.jpg\"><br>这是我的原始代码，<br>前端接口写的<code>this.form</code> 传递的是我data里面收集到的表单对象，通过log一下这个和看了一下浏览器发的请求信息发现了不对劲<br><img src=\"/../image/node04.png\" alt=\"this.form的数据\"><br><img src=\"/../image/node05.png\" alt=\"发请求的数据\"><br>在第二张照片中可以看出，在前端传递数据的时候就已经把他变成键了<br>最后的解决方案是：把<code>this.form</code>改成<code>JSON.parse(JSON.stringify(this.form))</code></p>\n<p>最后的最后，感谢在遇到问题的时候那些为我解答和指出漏洞的陌生人们！！！</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clyn4schj0001ecvz9opj9v9n","category_id":"clyn4schr0004ecvz4izv0eh2","_id":"clyn4sci1000gecvz7tga1axe"},{"post_id":"clyn4schp0003ecvzb2nq84go","category_id":"clyn4schx000becvz48aj00js","_id":"clyn4sci5000lecvz42dc62sn"},{"post_id":"clyn4sci0000fecvzfpdja8bq","category_id":"clyn4schx000becvz48aj00js","_id":"clyn4sci9000pecvzgypnc6e8"},{"post_id":"clyn4scht0007ecvz5ccdddmw","category_id":"clyn4sci1000hecvzfdqj88pz","_id":"clyn4scia000secvzg2t95nwk"},{"post_id":"clyn4sci4000kecvz4updgs67","category_id":"clyn4schx000becvz48aj00js","_id":"clyn4scic000vecvz0k8s2863"},{"post_id":"clyn4sci8000oecvz4ris13qw","category_id":"clyn4sci1000hecvzfdqj88pz","_id":"clyn4scid000zecvze3ioa3r0"},{"post_id":"clyn4schv0009ecvzd2467c7g","category_id":"clyn4schx000becvz48aj00js","_id":"clyn4scif0012ecvzab83238g"},{"post_id":"clyn4sci9000qecvz7baz7fu8","category_id":"clyn4schr0004ecvz4izv0eh2","_id":"clyn4scig0016ecvzemxb4a4h"},{"post_id":"clyn4scib000uecvzcvz20ylt","category_id":"clyn4schx000becvz48aj00js","_id":"clyn4scih0019ecvz5kb60q1m"},{"post_id":"clyn4schw000aecvzeiqe60l3","category_id":"clyn4sci1000hecvzfdqj88pz","_id":"clyn4scih001becvz8475aulv"},{"post_id":"clyn4scic000xecvzh1ng4axw","category_id":"clyn4sci1000hecvzfdqj88pz","_id":"clyn4scih001decvz9uyi0imf"},{"post_id":"clyn4scid0010ecvzczvcdf02","category_id":"clyn4schx000becvz48aj00js","_id":"clyn4scih001fecvz4q86bp6n"},{"post_id":"clyn4schy000eecvzcvsp5utf","category_id":"clyn4sci1000hecvzfdqj88pz","_id":"clyn4scii001gecvz3o8c0gcb"},{"post_id":"clyn4scif0014ecvz8wk6727e","category_id":"clyn4schx000becvz48aj00js","_id":"clyn4scii001iecvz9y3pag7w"},{"post_id":"clyn4sci2000jecvz103584sc","category_id":"clyn4scig0015ecvzd8wedlfs","_id":"clyn4scii001kecvz2ey09uoz"}],"PostTag":[{"post_id":"clyn4schj0001ecvz9opj9v9n","tag_id":"clyn4schs0005ecvz7si1dm1a","_id":"clyn4schy000decvz75jf1gvi"},{"post_id":"clyn4sci9000qecvz7baz7fu8","tag_id":"clyn4schs0005ecvz7si1dm1a","_id":"clyn4scic000wecvzabopfhve"},{"post_id":"clyn4schp0003ecvzb2nq84go","tag_id":"clyn4schx000cecvzcwsucfo0","_id":"clyn4scif0013ecvz6eilgc2a"},{"post_id":"clyn4schp0003ecvzb2nq84go","tag_id":"clyn4sci2000iecvz4l53gvif","_id":"clyn4scig0017ecvz5uqt33sr"},{"post_id":"clyn4schp0003ecvzb2nq84go","tag_id":"clyn4sci6000necvzb3tba77w","_id":"clyn4scih001aecvzfr37etmt"},{"post_id":"clyn4schp0003ecvzb2nq84go","tag_id":"clyn4scib000tecvz0w64chb3","_id":"clyn4scih001cecvz9hfigm4l"},{"post_id":"clyn4scht0007ecvz5ccdddmw","tag_id":"clyn4scie0011ecvz0arn4oj8","_id":"clyn4scii001jecvz0intcibv"},{"post_id":"clyn4scht0007ecvz5ccdddmw","tag_id":"clyn4scih0018ecvzdwz4cpi7","_id":"clyn4scii001lecvz3v7k9dni"},{"post_id":"clyn4scht0007ecvz5ccdddmw","tag_id":"clyn4scih001eecvz514u62ac","_id":"clyn4scij001necvzflnvcbi0"},{"post_id":"clyn4schv0009ecvzd2467c7g","tag_id":"clyn4schx000cecvzcwsucfo0","_id":"clyn4scik001recvz2ro0fr2d"},{"post_id":"clyn4schv0009ecvzd2467c7g","tag_id":"clyn4scii001mecvz5xc29wum","_id":"clyn4scik001secvz1uq20okq"},{"post_id":"clyn4schv0009ecvzd2467c7g","tag_id":"clyn4scij001oecvz859f2u57","_id":"clyn4scik001uecvz67mfgxfw"},{"post_id":"clyn4schv0009ecvzd2467c7g","tag_id":"clyn4scih001eecvz514u62ac","_id":"clyn4scik001vecvz75jx9npn"},{"post_id":"clyn4schw000aecvzeiqe60l3","tag_id":"clyn4scie0011ecvz0arn4oj8","_id":"clyn4scil001xecvzeon60rmu"},{"post_id":"clyn4schw000aecvzeiqe60l3","tag_id":"clyn4scik001tecvzck7hgg0j","_id":"clyn4scil001yecvz5wpn783x"},{"post_id":"clyn4schy000eecvzcvsp5utf","tag_id":"clyn4scie0011ecvz0arn4oj8","_id":"clyn4scim0022ecvzhilp2lrp"},{"post_id":"clyn4schy000eecvzcvsp5utf","tag_id":"clyn4scil001zecvz9m6x6aic","_id":"clyn4scim0023ecvz5j7a1uyp"},{"post_id":"clyn4schy000eecvzcvsp5utf","tag_id":"clyn4scih001eecvz514u62ac","_id":"clyn4scim0025ecvzhtq544rx"},{"post_id":"clyn4sci0000fecvzfpdja8bq","tag_id":"clyn4schx000cecvzcwsucfo0","_id":"clyn4scin0028ecvz4vxygen3"},{"post_id":"clyn4sci0000fecvzfpdja8bq","tag_id":"clyn4scim0021ecvz314x9hj6","_id":"clyn4scin0029ecvz46nic78a"},{"post_id":"clyn4sci0000fecvzfpdja8bq","tag_id":"clyn4scim0024ecvzfby40yzb","_id":"clyn4scin002becvz4wlraxkd"},{"post_id":"clyn4sci0000fecvzfpdja8bq","tag_id":"clyn4scih001eecvz514u62ac","_id":"clyn4scin002cecvz8t3bb949"},{"post_id":"clyn4sci2000jecvz103584sc","tag_id":"clyn4scin0027ecvzdrsh806n","_id":"clyn4scio002eecvzdf5i5mcn"},{"post_id":"clyn4sci4000kecvz4updgs67","tag_id":"clyn4schx000cecvzcwsucfo0","_id":"clyn4scio002fecvzcy4yfnvw"},{"post_id":"clyn4sci4000kecvz4updgs67","tag_id":"clyn4scin002aecvzdzmm9xds","_id":"clyn4scio002hecvz2yhe3znh"},{"post_id":"clyn4sci8000oecvz4ris13qw","tag_id":"clyn4scie0011ecvz0arn4oj8","_id":"clyn4scip002kecvzfjmk0kjn"},{"post_id":"clyn4sci8000oecvz4ris13qw","tag_id":"clyn4scii001mecvz5xc29wum","_id":"clyn4scip002lecvz8ha2fxrd"},{"post_id":"clyn4sci8000oecvz4ris13qw","tag_id":"clyn4scih001eecvz514u62ac","_id":"clyn4scip002necvzbrnh13mx"},{"post_id":"clyn4scib000uecvzcvz20ylt","tag_id":"clyn4schx000cecvzcwsucfo0","_id":"clyn4sciq002pecvz8mu4dx3n"},{"post_id":"clyn4scib000uecvzcvz20ylt","tag_id":"clyn4scip002jecvzh6chalmp","_id":"clyn4sciq002qecvz7y2i6mxm"},{"post_id":"clyn4scib000uecvzcvz20ylt","tag_id":"clyn4scip002mecvz87y64o3r","_id":"clyn4sciq002secvz3z094q9g"},{"post_id":"clyn4scic000xecvzh1ng4axw","tag_id":"clyn4scie0011ecvz0arn4oj8","_id":"clyn4scir002vecvz784q6wo2"},{"post_id":"clyn4scic000xecvzh1ng4axw","tag_id":"clyn4sciq002recvzfs0757l0","_id":"clyn4scir002wecvzf7633eg9"},{"post_id":"clyn4scic000xecvzh1ng4axw","tag_id":"clyn4scih001eecvz514u62ac","_id":"clyn4scir002yecvz941833e4"},{"post_id":"clyn4scid0010ecvzczvcdf02","tag_id":"clyn4schx000cecvzcwsucfo0","_id":"clyn4scir0030ecvzcy5dc7ys"},{"post_id":"clyn4scid0010ecvzczvcdf02","tag_id":"clyn4scii001mecvz5xc29wum","_id":"clyn4scir0031ecvz0cveb5sh"},{"post_id":"clyn4scid0010ecvzczvcdf02","tag_id":"clyn4scih001eecvz514u62ac","_id":"clyn4scir0032ecvz5v6i9rtg"},{"post_id":"clyn4scif0014ecvz8wk6727e","tag_id":"clyn4schx000cecvzcwsucfo0","_id":"clyn4scis0033ecvz2x37ao7m"},{"post_id":"clyn4scif0014ecvz8wk6727e","tag_id":"clyn4scir002zecvzbao7g52w","_id":"clyn4scis0034ecvzh0loh5wv"}],"Tag":[{"name":"闲聊","_id":"clyn4schs0005ecvz7si1dm1a"},{"name":"经验","_id":"clyn4schx000cecvzcwsucfo0"},{"name":"python","_id":"clyn4sci2000iecvz4l53gvif"},{"name":"数据挖掘","_id":"clyn4sci6000necvzb3tba77w"},{"name":"jupyter","_id":"clyn4scib000tecvz0w64chb3"},{"name":"学习笔记","_id":"clyn4scie0011ecvz0arn4oj8"},{"name":"ajax","_id":"clyn4scih0018ecvzdwz4cpi7"},{"name":"前端","_id":"clyn4scih001eecvz514u62ac"},{"name":"vue2","_id":"clyn4scii001mecvz5xc29wum"},{"name":"eslint","_id":"clyn4scij001oecvz859f2u57"},{"name":"git","_id":"clyn4scik001tecvzck7hgg0j"},{"name":"javascript","_id":"clyn4scil001zecvz9m6x6aic"},{"name":"ElementUI","_id":"clyn4scim0021ecvz314x9hj6"},{"name":"npm","_id":"clyn4scim0024ecvzfby40yzb"},{"name":"官方教程","_id":"clyn4scin0027ecvzdrsh806n"},{"name":"node","_id":"clyn4scin002aecvzdzmm9xds"},{"name":"数据库","_id":"clyn4scip002jecvzh6chalmp"},{"name":"sqlserver","_id":"clyn4scip002mecvz87y64o3r"},{"name":"正则表达式","_id":"clyn4sciq002recvzfs0757l0"},{"name":"node.js","_id":"clyn4scir002zecvzbao7g52w"}]}}